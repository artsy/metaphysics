type Artist {
  entityId: String!
}

"""
Artist Affinity
"""
type ArtistAffinity {
  """
  Artist ID
  """
  artistId: ID!

  """
  Calculated affinity Score
  """
  score: Float!
}

"""
The connection type for ArtistAffinity.
"""
type ArtistAffinityConnection {
  """
  A list of edges.
  """
  edges: [ArtistAffinityEdge]

  """
  A list of nodes.
  """
  nodes: [ArtistAffinity]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type ArtistAffinityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ArtistAffinity
}

"""
Artist ID and Medium Tuple
"""
input ArtistIdMediumTupleType {
  artistId: String!
  medium: String!
}

"""
Artist Recommendation
"""
type ArtistRecommendation {
  """
  Artist ID
  """
  artistId: ID!

  """
  Calculated score
  """
  score: Float!
}

"""
The connection type for ArtistRecommendation.
"""
type ArtistRecommendationConnection {
  """
  A list of edges.
  """
  edges: [ArtistRecommendationEdge]

  """
  A list of nodes.
  """
  nodes: [ArtistRecommendation]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type ArtistRecommendationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ArtistRecommendation
}

"""
Artist Sparkline
"""
type ArtistSparkline {
  artistId: ID!
  artistName: String
  eventDigest: String
  sparkles: BigInt
  tier: Float
  year: String
}

"""
The connection type for ArtistSparkline.
"""
type ArtistSparklineConnection {
  """
  A list of edges.
  """
  edges: [ArtistSparklineEdge]

  """
  A list of nodes.
  """
  nodes: [ArtistSparkline]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type ArtistSparklineEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ArtistSparkline
}

type Artwork {
  entityId: String!
}

"""
Artwork Recommendation
"""
type ArtworkRecommendation {
  """
  Artwork ID
  """
  artworkId: ID!

  """
  Calculated score
  """
  score: Float!
}

"""
The connection type for ArtworkRecommendation.
"""
type ArtworkRecommendationConnection {
  """
  A list of edges.
  """
  edges: [ArtworkRecommendationEdge]

  """
  A list of nodes.
  """
  nodes: [ArtworkRecommendation]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type ArtworkRecommendationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ArtworkRecommendation
}

"""
Publish artwork Series Stats
"""
type ArtworksPublishedStats {
  percentageChanged: Int!
  period: QueryPeriodEnum!
  timeSeries: [PartnerTimeSeriesStats!]!
  totalCount: Int!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Market Price Insights Calendar year
"""
type CalendarYearMarketPriceInsights {
  artistId: ID
  artistName: String
  averageSalePrice: BigInt
  createdAt: ISO8601DateTime
  id: ID!
  lotsSold: BigInt
  medianSalePrice: BigInt
  medium: String
  updatedAt: ISO8601DateTime
  valueSold: BigInt
  year: String!
}

"""
Price Insights Calendar year
"""
type CalendarYearPriceInsights {
  calendarYearMarketPriceInsights: [CalendarYearMarketPriceInsights!]
  medium: String!
}

"""
An ISO 8601 datetime
"""
scalar DateTime

"""
Visitor countries, device, referals and session page
"""
type GroupedStats {
  groupedEntity: GroupedStatsUnion!
  period: QueryPeriodEnum!
}

"""
The connection type for GroupedStats.
"""
type GroupedStatsConnection {
  """
  A list of edges.
  """
  edges: [GroupedStatsEdge]

  """
  A list of nodes.
  """
  nodes: [GroupedStats]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GroupedStatsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GroupedStats
}

enum GroupedStatsMetricEnum {
  """
  visitor_by_device
  """
  VISITOR_BY_DEVICE

  """
  visitor_by_landing_page
  """
  VISITOR_BY_LANDING_PAGE

  """
  visitor_by_location
  """
  VISITOR_BY_LOCATION

  """
  visitor_by_referral
  """
  VISITOR_BY_REFERRAL
}

enum GroupedStatsObjectTypeEnum {
  """
  country
  """
  COUNTRY

  """
  device type
  """
  DEVICE

  """
  landing page
  """
  LANDING_PAGE

  """
  referral
  """
  REFERRAL
}

"""
A grouped stat item: country or device etc.
"""
union GroupedStatsUnion =
    VisitorsByCountry
  | VisitorsByDevice
  | VisitorsByLandingPage
  | VisitorsByReferral

"""
A histogram bin
"""
type HistogramBin {
  maxPriceCents: Int!
  minPriceCents: Int!
  numArtworks: Int!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Market Price Insights
"""
type MarketPriceInsights {
  annualLotsSold: Int
  annualValueSoldCents: BigInt
  artistId: ID
  artistName: String
  artsyQInventory: Int
  createdAt: ISO8601DateTime
  demandRank: Float
  demandTrend: Float
  highRangeCents: BigInt
  id: ID!
  largeHighRangeCents: BigInt
  largeLowRangeCents: BigInt
  largeMidRangeCents: BigInt
  lastAuctionResultDate: ISO8601DateTime
  liquidityRank: Float
  lotsSoldLast12Months: Int
  lotsSoldLast24Months: Int
  lotsSoldLast36Months: Int
  lotsSoldLast48Months: Int
  lotsSoldLast60Months: Int
  lotsSoldLast72Months: Int
  lotsSoldLast84Months: Int
  lotsSoldLast96Months: Int
  lowRangeCents: BigInt
  medianSaleOverEstimatePercentage: Int
  medianSalePriceLast36Months: BigInt
  medianSalePriceLast96Months: BigInt
  medianSaleToEstimateRatio: Float
  medium: String
  mediumHighRangeCents: BigInt
  mediumLowRangeCents: BigInt
  mediumMidRangeCents: BigInt
  midRangeCents: BigInt
  sellThroughRate: Float
  smallHighRangeCents: BigInt
  smallLowRangeCents: BigInt
  smallMidRangeCents: BigInt
  updatedAt: ISO8601DateTime
}

"""
The connection type for MarketPriceInsights.
"""
type MarketPriceInsightsConnection {
  """
  A list of edges.
  """
  edges: [MarketPriceInsightsEdge]

  """
  A list of nodes.
  """
  nodes: [MarketPriceInsights]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type MarketPriceInsightsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketPriceInsights
}

"""
New For You Recommendation
"""
type NewForYouRecommendation {
  """
  Artwork ID
  """
  artworkId: ID!

  """
  Artwork's published_at
  """
  publishedAt: DateTime!

  """
  Artist affinity score
  """
  score: Float!

  """
  Version of affinity recommendation
  """
  version: String!
}

"""
The connection type for NewForYouRecommendation.
"""
type NewForYouRecommendationConnection {
  """
  A list of edges.
  """
  edges: [NewForYouRecommendationEdge]

  """
  A list of nodes.
  """
  nodes: [NewForYouRecommendation]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type NewForYouRecommendationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NewForYouRecommendation
}

type PageCursor {
  """
  first cursor on the page
  """
  cursor: String!

  """
  is this the current page?
  """
  isCurrent: Boolean!

  """
  page number out of totalPages
  """
  page: Int!
}

type PageCursors {
  around: [PageCursor!]!

  """
  optional, may be included in field around
  """
  first: PageCursor

  """
  optional, may be included in field around
  """
  last: PageCursor
  previous: PageCursor
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Stats for pageviews of partner content
"""
type PageviewStats {
  artworkViews: Int
  galleryViews: Int
  percentageChanged: Int!
  period: QueryPeriodEnum!
  showViews: Int
  timeSeries: [PartnerTimeSeriesStats!]!
  totalCount: Int!
  uniqueVisitors: Int
}

"""
Audience stats of a partner
"""
type PartnerAudienceStats {
  commercialVisitors: Int!
  partnerId: String!
  period: QueryPeriodEnum!
  uniqueVisitors: Int!
}

"""
Inquiry count time series data of a partner
"""
type PartnerInquiryCountTimeSeriesStats {
  count: Int
  endTime: DateTime
  startTime: DateTime
}

"""
Inquiry stats of a partner
"""
type PartnerInquiryStats {
  inquiryCount: Int!

  """
  Inquiry response time in seconds
  """
  inquiryResponseTime: Int
  partnerId: String!
  period: QueryPeriodEnum!

  """
  Partner inquiry count time series
  """
  timeSeries(cumulative: Boolean = false): [PartnerInquiryCountTimeSeriesStats!]
}

"""
Sales stats of a partner
"""
type PartnerSalesStats {
  orderCount: Int!

  """
  Order response time in seconds
  """
  orderResponseTime: Int
  partnerId: String!
  period: QueryPeriodEnum!

  """
  Partner sales time series
  """
  timeSeries(cumulative: Boolean = false): [PartnerSalesTimeSeriesStats!]
  totalCents: Int!
}

"""
Sales time series data of a partner
"""
type PartnerSalesTimeSeriesStats {
  count: Int
  endTime: DateTime
  startTime: DateTime
  totalCents: Int!
}

"""
Partner Stats
"""
type PartnerStats {
  """
  Time series data on number of artworks published
  """
  artworkPublished(period: QueryPeriodEnum!): PartnerStatsArtworksPublished

  """
  Time series data on number of artworks published
  """
  artworksPublished(period: QueryPeriodEnum!): ArtworksPublishedStats
    @deprecated(
      reason: "Use artworkPublished for refactored time series bucket code"
    )

  """
  Audience stats
  """
  audience(period: QueryPeriodEnum!): PartnerAudienceStats

  """
  Visitor countries, device, referals and session page
  """
  groupedStats(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    metric: GroupedStatsMetricEnum!
    objectType: GroupedStatsObjectTypeEnum!
    period: QueryPeriodEnum!
  ): GroupedStatsConnection

  """
  Inquiry stats
  """
  inquiry(period: QueryPeriodEnum!): PartnerInquiryStats

  """
  Different types of partner pageviews
  """
  pageview(period: QueryPeriodEnum!): PartnerStatsPageviews

  """
  Different types of partner pageviews
  """
  pageviews(period: QueryPeriodEnum!): PageviewStats
    @deprecated(reason: "Use pageview for refactored time series bucket code")
  partnerId: String!

  """
  Artworks, shows, viewing rooms, or artists ranked by views. Capped at 20 by the underlying sql query.
  """
  rankedStats(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    objectType: RankedStatsObjectTypeEnum!
    period: QueryPeriodEnum!
  ): RankedStatsConnection

  """
  Sales stats
  """
  sales(period: QueryPeriodEnum!): PartnerSalesStats

  """
  Top artworks ranked by views
  """
  topArtworks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RankedStatsConnection
    @deprecated(reason: "Use rankedStats(objectType: ) instead")

  """
  Number of unique visitors
  """
  uniqueVisitors(period: QueryPeriodEnum!): Int
    @deprecated(reason: "Use audience() { uniqueVisitors } instead")
}

"""
Publish artwork Series Stats
"""
type PartnerStatsArtworksPublished {
  partnerId: String!
  percentageChanged: Int!
  period: QueryPeriodEnum!

  """
  Partner artworks published count time series
  """
  timeSeries(
    cumulative: Boolean = false
  ): [PartnerStatsArtworksPublishedTimeSeries!]!
  totalCount: Int!
}

"""
Artworks published time series data of a partner
"""
type PartnerStatsArtworksPublishedTimeSeries {
  count: Int
  endTime: DateTime
  startTime: DateTime
}

"""
Stats for pageviews of partner content
"""
type PartnerStatsPageviews {
  artworkViews: Int!
  galleryViews: Int!
  partnerId: String!
  percentageChanged: Int!
  period: QueryPeriodEnum!
  showViews: Int!

  """
  Pageviews time series
  """
  timeSeries(cumulative: Boolean = false): [PartnerStatsPageviewsTimeSeries!]
  totalCount: Int!
  uniqueVisitors: Int!
}

"""
Pageviews time series data of a partner
"""
type PartnerStatsPageviewsTimeSeries {
  count: Int
  endTime: DateTime
  startTime: DateTime
}

"""
Partner Time Series Stats
"""
type PartnerTimeSeriesStats {
  count: Int
  endTime: DateTime
  startTime: DateTime
}

"""
Price Context Filter Type
"""
type PriceContextFilterType {
  category: PricingContextCategoryEnum
  dimension: PricingContextDimensionEnum
}

"""
The connection type for MarketPriceInsights.
"""
type PriceInsightConnection {
  """
  A list of edges.
  """
  edges: [PriceInsightEdge]

  """
  A list of nodes.
  """
  nodes: [MarketPriceInsights]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type PriceInsightEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketPriceInsights
}

enum PriceInsightSort {
  """
  sort by annual_lots_sold in ascending order
  """
  ANNUAL_LOTS_SOLD_ASC

  """
  sort by annual_lots_sold in descending order
  """
  ANNUAL_LOTS_SOLD_DESC

  """
  sort by annual_value_sold_cents in ascending order
  """
  ANNUAL_VALUE_SOLD_CENTS_ASC

  """
  sort by annual_value_sold_cents in descending order
  """
  ANNUAL_VALUE_SOLD_CENTS_DESC

  """
  sort by artist_id in ascending order
  """
  ARTIST_ID_ASC

  """
  sort by artist_id in descending order
  """
  ARTIST_ID_DESC

  """
  sort by artist_name in ascending order
  """
  ARTIST_NAME_ASC

  """
  sort by artist_name in descending order
  """
  ARTIST_NAME_DESC

  """
  sort by artsy_q_inventory in ascending order
  """
  ARTSY_Q_INVENTORY_ASC

  """
  sort by artsy_q_inventory in descending order
  """
  ARTSY_Q_INVENTORY_DESC

  """
  sort by created_at in ascending order
  """
  CREATED_AT_ASC

  """
  sort by created_at in descending order
  """
  CREATED_AT_DESC

  """
  sort by demand_rank in ascending order
  """
  DEMAND_RANK_ASC

  """
  sort by demand_rank in descending order
  """
  DEMAND_RANK_DESC

  """
  sort by demand_trend in ascending order
  """
  DEMAND_TREND_ASC

  """
  sort by demand_trend in descending order
  """
  DEMAND_TREND_DESC

  """
  sort by high_range_cents in ascending order
  """
  HIGH_RANGE_CENTS_ASC

  """
  sort by high_range_cents in descending order
  """
  HIGH_RANGE_CENTS_DESC

  """
  sort by id in ascending order
  """
  ID_ASC

  """
  sort by id in descending order
  """
  ID_DESC

  """
  sort by large_high_range_cents in ascending order
  """
  LARGE_HIGH_RANGE_CENTS_ASC

  """
  sort by large_high_range_cents in descending order
  """
  LARGE_HIGH_RANGE_CENTS_DESC

  """
  sort by large_low_range_cents in ascending order
  """
  LARGE_LOW_RANGE_CENTS_ASC

  """
  sort by large_low_range_cents in descending order
  """
  LARGE_LOW_RANGE_CENTS_DESC

  """
  sort by large_mid_range_cents in ascending order
  """
  LARGE_MID_RANGE_CENTS_ASC

  """
  sort by large_mid_range_cents in descending order
  """
  LARGE_MID_RANGE_CENTS_DESC

  """
  sort by last_auction_result_date in ascending order
  """
  LAST_AUCTION_RESULT_DATE_ASC

  """
  sort by last_auction_result_date in descending order
  """
  LAST_AUCTION_RESULT_DATE_DESC

  """
  sort by liquidity_rank in ascending order
  """
  LIQUIDITY_RANK_ASC

  """
  sort by liquidity_rank in descending order
  """
  LIQUIDITY_RANK_DESC

  """
  sort by lots_sold_last_12_months in ascending order
  """
  LOTS_SOLD_LAST_12_MONTHS_ASC

  """
  sort by lots_sold_last_12_months in descending order
  """
  LOTS_SOLD_LAST_12_MONTHS_DESC

  """
  sort by lots_sold_last_24_months in ascending order
  """
  LOTS_SOLD_LAST_24_MONTHS_ASC

  """
  sort by lots_sold_last_24_months in descending order
  """
  LOTS_SOLD_LAST_24_MONTHS_DESC

  """
  sort by lots_sold_last_36_months in ascending order
  """
  LOTS_SOLD_LAST_36_MONTHS_ASC

  """
  sort by lots_sold_last_36_months in descending order
  """
  LOTS_SOLD_LAST_36_MONTHS_DESC

  """
  sort by lots_sold_last_48_months in ascending order
  """
  LOTS_SOLD_LAST_48_MONTHS_ASC

  """
  sort by lots_sold_last_48_months in descending order
  """
  LOTS_SOLD_LAST_48_MONTHS_DESC

  """
  sort by lots_sold_last_60_months in ascending order
  """
  LOTS_SOLD_LAST_60_MONTHS_ASC

  """
  sort by lots_sold_last_60_months in descending order
  """
  LOTS_SOLD_LAST_60_MONTHS_DESC

  """
  sort by lots_sold_last_72_months in ascending order
  """
  LOTS_SOLD_LAST_72_MONTHS_ASC

  """
  sort by lots_sold_last_72_months in descending order
  """
  LOTS_SOLD_LAST_72_MONTHS_DESC

  """
  sort by lots_sold_last_84_months in ascending order
  """
  LOTS_SOLD_LAST_84_MONTHS_ASC

  """
  sort by lots_sold_last_84_months in descending order
  """
  LOTS_SOLD_LAST_84_MONTHS_DESC

  """
  sort by lots_sold_last_96_months in ascending order
  """
  LOTS_SOLD_LAST_96_MONTHS_ASC

  """
  sort by lots_sold_last_96_months in descending order
  """
  LOTS_SOLD_LAST_96_MONTHS_DESC

  """
  sort by low_range_cents in ascending order
  """
  LOW_RANGE_CENTS_ASC

  """
  sort by low_range_cents in descending order
  """
  LOW_RANGE_CENTS_DESC

  """
  sort by median_sale_price_last_36_months in ascending order
  """
  MEDIAN_SALE_PRICE_LAST_36_MONTHS_ASC

  """
  sort by median_sale_price_last_36_months in descending order
  """
  MEDIAN_SALE_PRICE_LAST_36_MONTHS_DESC

  """
  sort by median_sale_price_last_96_months in ascending order
  """
  MEDIAN_SALE_PRICE_LAST_96_MONTHS_ASC

  """
  sort by median_sale_price_last_96_months in descending order
  """
  MEDIAN_SALE_PRICE_LAST_96_MONTHS_DESC

  """
  sort by median_sale_to_estimate_ratio in ascending order
  """
  MEDIAN_SALE_TO_ESTIMATE_RATIO_ASC

  """
  sort by median_sale_to_estimate_ratio in descending order
  """
  MEDIAN_SALE_TO_ESTIMATE_RATIO_DESC

  """
  sort by medium in ascending order
  """
  MEDIUM_ASC

  """
  sort by medium in descending order
  """
  MEDIUM_DESC

  """
  sort by medium_high_range_cents in ascending order
  """
  MEDIUM_HIGH_RANGE_CENTS_ASC

  """
  sort by medium_high_range_cents in descending order
  """
  MEDIUM_HIGH_RANGE_CENTS_DESC

  """
  sort by medium_low_range_cents in ascending order
  """
  MEDIUM_LOW_RANGE_CENTS_ASC

  """
  sort by medium_low_range_cents in descending order
  """
  MEDIUM_LOW_RANGE_CENTS_DESC

  """
  sort by medium_mid_range_cents in ascending order
  """
  MEDIUM_MID_RANGE_CENTS_ASC

  """
  sort by medium_mid_range_cents in descending order
  """
  MEDIUM_MID_RANGE_CENTS_DESC

  """
  sort by mid_range_cents in ascending order
  """
  MID_RANGE_CENTS_ASC

  """
  sort by mid_range_cents in descending order
  """
  MID_RANGE_CENTS_DESC

  """
  sort by sell_through_rate in ascending order
  """
  SELL_THROUGH_RATE_ASC

  """
  sort by sell_through_rate in descending order
  """
  SELL_THROUGH_RATE_DESC

  """
  sort by small_high_range_cents in ascending order
  """
  SMALL_HIGH_RANGE_CENTS_ASC

  """
  sort by small_high_range_cents in descending order
  """
  SMALL_HIGH_RANGE_CENTS_DESC

  """
  sort by small_low_range_cents in ascending order
  """
  SMALL_LOW_RANGE_CENTS_ASC

  """
  sort by small_low_range_cents in descending order
  """
  SMALL_LOW_RANGE_CENTS_DESC

  """
  sort by small_mid_range_cents in ascending order
  """
  SMALL_MID_RANGE_CENTS_ASC

  """
  sort by small_mid_range_cents in descending order
  """
  SMALL_MID_RANGE_CENTS_DESC

  """
  sort by updated_at in ascending order
  """
  UPDATED_AT_ASC

  """
  sort by updated_at in descending order
  """
  UPDATED_AT_DESC
}

"""
Pricing Context Histogram
"""
type PricingContext {
  appliedFilters: PriceContextFilterType!
  bins: [HistogramBin!]!
}

enum PricingContextCategoryEnum {
  """
  Architecture
  """
  ARCHITECTURE

  """
  Books and Portfolios
  """
  BOOKS_AND_PORTFOLIOS

  """
  Design/Decorative Art
  """
  DESIGN_DECORATIVE_ART

  """
  Drawing, Collage or other Work on Paper
  """
  DRAWING_COLLAGE_OTHER_WORK_ON_PAPER

  """
  Fashion Design and Wearable Art
  """
  FASHION

  """
  Installation
  """
  INSTALLATION

  """
  Jewelry
  """
  JEWELRY

  """
  Mixed Media
  """
  MIXED_MEDIA

  """
  Other
  """
  OTHER

  """
  Painting
  """
  PAINTING

  """
  Performance Art
  """
  PERFORMANCE

  """
  Photography
  """
  PHOTOGRAPHY

  """
  Posters
  """
  POSTERS

  """
  Print
  """
  PRINT

  """
  Sculpture
  """
  SCULPTURE

  """
  Sound
  """
  SOUND

  """
  Textile Arts
  """
  TEXTILE

  """
  Video/Film/Animation
  """
  VIDEO_FILM_ANIMATION

  """
  Work on Paper
  """
  WORK_ON_PAPER
}

enum PricingContextDimensionEnum {
  """
  Large
  """
  LARGE

  """
  Medium
  """
  MEDIUM

  """
  Small
  """
  SMALL
}

type Query {
  """
  Get all artists with an affinity score for the current user (sorted by affinity score).
  """
  artistAffinities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    minScore: Float
    userId: String
  ): ArtistAffinityConnection

  """
  Get all recommended artists for the current user.
  """
  artistRecommendations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ArtistRecommendationConnection

  """
  Get the year sparklines for the current artist.
  """
  artistSparklines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    artistId: String!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ArtistSparklineConnection

  """
  Get all recommended artworks for the current user.
  """
  artworkRecommendations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    userId: String
  ): ArtworkRecommendationConnection

  """
  Get price insights for a market for each calendar year sorted by year asc.
  """
  calendarYearMarketPriceInsights(
    artistId: ID!
    endYear: String
    medium: String!
    startYear: String
  ): [CalendarYearMarketPriceInsights!]

  """
  Get list of calendar year price insights for an artist for each market sorted by year asc.
  """
  calendarYearPriceInsights(
    artistId: ID!
    endYear: String
    startYear: String
  ): [CalendarYearPriceInsights!]

  """
  Last updated timestamp
  """
  lastUpdatedAt: DateTime

  """
  Get price insights for a market.
  """
  marketPriceInsights(artistId: ID!, medium: String!): MarketPriceInsights

  """
  Get market price insights for tuples of artist id and medium.
  """
  marketPriceInsightsBatch(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    input: [ArtistIdMediumTupleType!]!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketPriceInsightsConnection

  """
  Get new for you artworks recs for the user.
  """
  newForYouRecommendations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    userId: String
    version: String
  ): NewForYouRecommendationConnection

  """
  Find PartnerStats
  """
  partnerStats(partnerId: String!): PartnerStats

  """
  Get all price insights for an artist.
  """
  priceInsights(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    artistId: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Return price insights sorted this way
    """
    sort: PriceInsightSort
  ): PriceInsightConnection

  """
  Pricing Context Histograms
  """
  pricingContext(
    artistId: String!
    category: PricingContextCategoryEnum!
    sizeScore: Int!
  ): PricingContext

  """
  Query UserStats
  """
  userStats(userId: String!): UserStats
}

enum QueryPeriodEnum {
  """
  Four weeks
  """
  FOUR_WEEKS

  """
  One year
  """
  ONE_YEAR

  """
  Sixteen weeks
  """
  SIXTEEN_WEEKS
}

"""
Top artworks, shows, viewing rooms, or artists from a partner
"""
type RankedStats {
  period: QueryPeriodEnum!
  rankedEntity: RankedStatsUnion!
  value: Int!
}

"""
The connection type for RankedStats.
"""
type RankedStatsConnection {
  """
  A list of edges.
  """
  edges: [RankedStatsEdge]

  """
  A list of nodes.
  """
  nodes: [RankedStats]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RankedStatsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RankedStats
}

enum RankedStatsObjectTypeEnum {
  """
  Artist
  """
  ARTIST

  """
  Artwork
  """
  ARTWORK

  """
  Show
  """
  SHOW

  """
  ViewingRoom
  """
  VIEWING_ROOM
}

"""
An artwork, artist, show, or viewing room
"""
union RankedStatsUnion = Artist | Artwork | Show | ViewingRoom

type Show {
  entityId: String!
}

"""
Statistics for users
"""
type UserStats {
  totalPurchaseCount: Int!
  userId: String!
}

type ViewingRoom {
  entityId: String!
}

type VisitorsByCountry {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type VisitorsByDevice {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type VisitorsByLandingPage {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type VisitorsByReferral {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}
