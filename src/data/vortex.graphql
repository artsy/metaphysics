type Artist {
  entityId: String!
}

type Artwork {
  entityId: String!
}

"""
Publish artwork Series Stats
"""
type ArtworksPublishedStats {
  percentageChanged: Int!
  period: QueryPeriodEnum!
  timeSeries: [PartnerTimeSeriesStats!]!
  totalCount: Int!
}

"""
An ISO 8601 datetime
"""
scalar DateTime

"""
A histogram bin
"""
type HistogramBin {
  maxPriceCents: Int!
  minPriceCents: Int!
  numArtworks: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Stats for pageviews of partner content
"""
type PageviewStats {
  artworkViews: Int
  galleryViews: Int
  percentageChanged: Int!
  period: QueryPeriodEnum!
  showViews: Int
  timeSeries: [PartnerTimeSeriesStats!]!
  totalCount: Int!
  uniqueVisitors: Int
}

"""
Audience stats of a partner
"""
type PartnerAudienceStats {
  partnerId: String!
  period: QueryPeriodEnum!
  uniqueVisitors: Int!
}

"""
Inquiry stats of a partner
"""
type PartnerInquiryStats {
  inquiryCount: Int!
  inquiryResponseTime: Int
  partnerId: String!
  period: QueryPeriodEnum!
}

"""
Sales stats of a partner
"""
type PartnerSalesStats {
  orderCount: Int!
  orderResponseTime: Int!
  partnerId: String!
  period: QueryPeriodEnum!

  """
  Partner sales time series
  """
  timeSeries(cumulative: Boolean = false): [PartnerSalesTimeSeriesStats!]
  totalCents: Int!
}

"""
Sales time series data of a partner
"""
type PartnerSalesTimeSeriesStats {
  count: Int
  endTime: DateTime
  startTime: DateTime
  totalCents: Int!
}

"""
Partner Stats
"""
type PartnerStats {
  """
  Time series data on number of artworks published
  """
  artworksPublished(period: QueryPeriodEnum!): ArtworksPublishedStats

  """
  Audience stats
  """
  audience(period: QueryPeriodEnum!): PartnerAudienceStats

  """
  Inquiry stats
  """
  inquiry(period: QueryPeriodEnum!): PartnerInquiryStats

  """
  Different types of partner pageviews
  """
  pageviews(period: QueryPeriodEnum!): PageviewStats
  partnerId: String!

  """
  Artworks, shows, and artists ranked by views
  """
  rankedStats(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    objectType: RankedStatsObjectTypeEnum!
    period: QueryPeriodEnum!
  ): RankedStatsConnection

  """
  Sales stats
  """
  sales(period: QueryPeriodEnum!): PartnerSalesStats

  """
  Top artworks ranked by views
  """
  topArtworks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RankedStatsConnection @deprecated(reason: "Use rankedStats(objectType: ) instead")

  """
  Number of unique visitors
  """
  uniqueVisitors(period: QueryPeriodEnum!): Int @deprecated(reason: "Use audience() { uniqueVisitors } instead")
}

"""
Partner Time Series Stats
"""
type PartnerTimeSeriesStats {
  count: Int
  endTime: DateTime
  startTime: DateTime
}

"""
Price Context Filter Type
"""
type PriceContextFilterType {
  category: PricingContextCategoryEnum
  dimension: PricingContextDimensionEnum
}

"""
Pricing Context Histogram
"""
type PricingContext {
  appliedFilters: PriceContextFilterType!
  bins: [HistogramBin!]!
}

enum PricingContextCategoryEnum {
  """
  Architecture
  """
  ARCHITECTURE

  """
  Books and Portfolios
  """
  BOOKS_AND_PORTFOLIOS

  """
  Design/Decorative Art
  """
  DESIGN_DECORATIVE_ART

  """
  Drawing, Collage or other Work on Paper
  """
  DRAWING_COLLAGE_OTHER_WORK_ON_PAPER

  """
  Fashion Design and Wearable Art
  """
  FASHION

  """
  Installation
  """
  INSTALLATION

  """
  Jewelry
  """
  JEWELRY

  """
  Mixed Media
  """
  MIXED_MEDIA

  """
  Other
  """
  OTHER

  """
  Painting
  """
  PAINTING

  """
  Performance Art
  """
  PERFORMANCE

  """
  Photography
  """
  PHOTOGRAPHY

  """
  Posters
  """
  POSTERS

  """
  Print
  """
  PRINT

  """
  Sculpture
  """
  SCULPTURE

  """
  Sound
  """
  SOUND

  """
  Textile Arts
  """
  TEXTILE

  """
  Video/Film/Animation
  """
  VIDEO_FILM_ANIMATION

  """
  Work on Paper
  """
  WORK_ON_PAPER
}

enum PricingContextDimensionEnum {
  """
  Large
  """
  LARGE

  """
  Medium
  """
  MEDIUM

  """
  Small
  """
  SMALL
}

type Query {
  """
  Find PartnerStats
  """
  partnerStats(partnerId: String!): PartnerStats

  """
  Pricing Context Histograms
  """
  pricingContext(artistId: String!, category: PricingContextCategoryEnum!, sizeScore: Int!): PricingContext
}

enum QueryPeriodEnum {
  """
  Four weeks
  """
  FOUR_WEEKS

  """
  One year
  """
  ONE_YEAR

  """
  Sixteen weeks
  """
  SIXTEEN_WEEKS
}

"""
Top artworks, shows, or artists from a partner
"""
type RankedStats {
  period: QueryPeriodEnum!
  rankedEntity: RankedStatsUnion!
  value: Int!
}

"""
The connection type for RankedStats.
"""
type RankedStatsConnection {
  """
  A list of edges.
  """
  edges: [RankedStatsEdge]

  """
  A list of nodes.
  """
  nodes: [RankedStats]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RankedStatsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RankedStats
}

enum RankedStatsObjectTypeEnum {
  """
  Artist
  """
  ARTIST

  """
  Artwork
  """
  ARTWORK

  """
  Show
  """
  SHOW
}

"""
An artwork, artist, or show
"""
union RankedStatsUnion = Artist | Artwork | Show

type Show {
  entityId: String!
}