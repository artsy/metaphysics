"""
An auction lot result
"""
type AuctionResultsByArtists {
  artistId: String
  boughtIn: Boolean!
  categoryText: String
  currency: String
  date: ISO8601DateTime
  dateText: String
  depthCm: Int
  description: String
  diameterCm: Int
  dimensionText: String
  externalUrl: String
  hammerPriceCents: BigInt
  hammerPriceCentsUsd: BigInt
  heightCm: Int
  highEstimateCents: BigInt
  highEstimateCentsUsd: BigInt
  id: ID!
  location: String
  lowEstimateCents: BigInt
  lowEstimateCentsUsd: BigInt
  mediumText: String
  organization: String
  priceRealizedCents: BigInt
  priceRealizedCentsUsd: BigInt
  saleDate: String
  saleDateText: String
  saleOverEstimatePercentage: Float
  saleTitle: String
  title: String
  widthCm: Int
}

"""
The connection type for AuctionResultsByArtists.
"""
type AuctionResultsByArtistsConnection {
  """
  A list of edges.
  """
  edges: [AuctionResultsByArtistsEdge]

  """
  A list of nodes.
  """
  nodes: [AuctionResultsByArtists]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type AuctionResultsByArtistsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuctionResultsByArtists
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Market Price Insights
"""
type MarketPriceInsights {
  annualLotsSold: Int
  annualValueSoldCents: BigInt
  artistId: ID
  artistName: String
  artsyQInventory: Int
  createdAt: ISO8601DateTime
  demandRank: Float
  demandTrend: Float
  highRangeCents: BigInt
  id: ID!
  largeHighRangeCents: BigInt
  largeLowRangeCents: BigInt
  largeMidRangeCents: BigInt
  liquidityRank: Float
  lowRangeCents: BigInt
  medianSaleOverEstimatePercentage: Int
  medianSaleToEstimateRatio: Float
  medium: String
  mediumHighRangeCents: BigInt
  mediumLowRangeCents: BigInt
  mediumMidRangeCents: BigInt
  midRangeCents: BigInt
  sellThroughRate: Float
  smallHighRangeCents: BigInt
  smallLowRangeCents: BigInt
  smallMidRangeCents: BigInt
  updatedAt: ISO8601DateTime
}

type PageCursor {
  """
  first cursor on the page
  """
  cursor: String!

  """
  is this the current page?
  """
  isCurrent: Boolean!

  """
  page number out of totalPages
  """
  page: Int!
}

type PageCursors {
  around: [PageCursor!]!

  """
  optional, may be included in field around
  """
  first: PageCursor

  """
  optional, may be included in field around
  """
  last: PageCursor
  previous: PageCursor
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
The connection type for MarketPriceInsights.
"""
type PriceInsightConnection {
  """
  A list of edges.
  """
  edges: [PriceInsightEdge]

  """
  A list of nodes.
  """
  nodes: [MarketPriceInsights]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type PriceInsightEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketPriceInsights
}

enum PriceInsightSort {
  """
  sort by annual_lots_sold in ascending order
  """
  ANNUAL_LOTS_SOLD_ASC

  """
  sort by annual_lots_sold in descending order
  """
  ANNUAL_LOTS_SOLD_DESC

  """
  sort by annual_value_sold_cents in ascending order
  """
  ANNUAL_VALUE_SOLD_CENTS_ASC

  """
  sort by annual_value_sold_cents in descending order
  """
  ANNUAL_VALUE_SOLD_CENTS_DESC

  """
  sort by artist_id in ascending order
  """
  ARTIST_ID_ASC

  """
  sort by artist_id in descending order
  """
  ARTIST_ID_DESC

  """
  sort by artist_name in ascending order
  """
  ARTIST_NAME_ASC

  """
  sort by artist_name in descending order
  """
  ARTIST_NAME_DESC

  """
  sort by artsy_q_inventory in ascending order
  """
  ARTSY_Q_INVENTORY_ASC

  """
  sort by artsy_q_inventory in descending order
  """
  ARTSY_Q_INVENTORY_DESC

  """
  sort by created_at in ascending order
  """
  CREATED_AT_ASC

  """
  sort by created_at in descending order
  """
  CREATED_AT_DESC

  """
  sort by demand_rank in ascending order
  """
  DEMAND_RANK_ASC

  """
  sort by demand_rank in descending order
  """
  DEMAND_RANK_DESC

  """
  sort by demand_trend in ascending order
  """
  DEMAND_TREND_ASC

  """
  sort by demand_trend in descending order
  """
  DEMAND_TREND_DESC

  """
  sort by high_range_cents in ascending order
  """
  HIGH_RANGE_CENTS_ASC

  """
  sort by high_range_cents in descending order
  """
  HIGH_RANGE_CENTS_DESC

  """
  sort by id in ascending order
  """
  ID_ASC

  """
  sort by id in descending order
  """
  ID_DESC

  """
  sort by large_high_range_cents in ascending order
  """
  LARGE_HIGH_RANGE_CENTS_ASC

  """
  sort by large_high_range_cents in descending order
  """
  LARGE_HIGH_RANGE_CENTS_DESC

  """
  sort by large_low_range_cents in ascending order
  """
  LARGE_LOW_RANGE_CENTS_ASC

  """
  sort by large_low_range_cents in descending order
  """
  LARGE_LOW_RANGE_CENTS_DESC

  """
  sort by large_mid_range_cents in ascending order
  """
  LARGE_MID_RANGE_CENTS_ASC

  """
  sort by large_mid_range_cents in descending order
  """
  LARGE_MID_RANGE_CENTS_DESC

  """
  sort by liquidity_rank in ascending order
  """
  LIQUIDITY_RANK_ASC

  """
  sort by liquidity_rank in descending order
  """
  LIQUIDITY_RANK_DESC

  """
  sort by low_range_cents in ascending order
  """
  LOW_RANGE_CENTS_ASC

  """
  sort by low_range_cents in descending order
  """
  LOW_RANGE_CENTS_DESC

  """
  sort by median_sale_to_estimate_ratio in ascending order
  """
  MEDIAN_SALE_TO_ESTIMATE_RATIO_ASC

  """
  sort by median_sale_to_estimate_ratio in descending order
  """
  MEDIAN_SALE_TO_ESTIMATE_RATIO_DESC

  """
  sort by medium in ascending order
  """
  MEDIUM_ASC

  """
  sort by medium in descending order
  """
  MEDIUM_DESC

  """
  sort by medium_high_range_cents in ascending order
  """
  MEDIUM_HIGH_RANGE_CENTS_ASC

  """
  sort by medium_high_range_cents in descending order
  """
  MEDIUM_HIGH_RANGE_CENTS_DESC

  """
  sort by medium_low_range_cents in ascending order
  """
  MEDIUM_LOW_RANGE_CENTS_ASC

  """
  sort by medium_low_range_cents in descending order
  """
  MEDIUM_LOW_RANGE_CENTS_DESC

  """
  sort by medium_mid_range_cents in ascending order
  """
  MEDIUM_MID_RANGE_CENTS_ASC

  """
  sort by medium_mid_range_cents in descending order
  """
  MEDIUM_MID_RANGE_CENTS_DESC

  """
  sort by mid_range_cents in ascending order
  """
  MID_RANGE_CENTS_ASC

  """
  sort by mid_range_cents in descending order
  """
  MID_RANGE_CENTS_DESC

  """
  sort by sell_through_rate in ascending order
  """
  SELL_THROUGH_RATE_ASC

  """
  sort by sell_through_rate in descending order
  """
  SELL_THROUGH_RATE_DESC

  """
  sort by small_high_range_cents in ascending order
  """
  SMALL_HIGH_RANGE_CENTS_ASC

  """
  sort by small_high_range_cents in descending order
  """
  SMALL_HIGH_RANGE_CENTS_DESC

  """
  sort by small_low_range_cents in ascending order
  """
  SMALL_LOW_RANGE_CENTS_ASC

  """
  sort by small_low_range_cents in descending order
  """
  SMALL_LOW_RANGE_CENTS_DESC

  """
  sort by small_mid_range_cents in ascending order
  """
  SMALL_MID_RANGE_CENTS_ASC

  """
  sort by small_mid_range_cents in descending order
  """
  SMALL_MID_RANGE_CENTS_DESC

  """
  sort by updated_at in ascending order
  """
  UPDATED_AT_ASC

  """
  sort by updated_at in descending order
  """
  UPDATED_AT_DESC
}

type Query {
  """
  Auction lot results
  """
  auctionResultsByArtistsConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    artistIds: [ID!]!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AuctionResultsByArtistsConnection

  """
  Get price insights for a market.
  """
  marketPriceInsights(artistId: ID!, medium: String!): MarketPriceInsights

  """
  Get all price insights for an artist.
  """
  priceInsights(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    artistId: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Return price insights sorted this way
    """
    sort: PriceInsightSort
  ): PriceInsightConnection
}
