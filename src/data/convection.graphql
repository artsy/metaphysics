# Autogenerated input type of AddAssetToConsignmentSubmission
input AddAssetToConsignmentSubmissionInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  submissionID: ID!
  geminiToken: String!
  assetType: String
}

# Autogenerated return type of AddAssetToConsignmentSubmission
type AddAssetToConsignmentSubmissionPayload {
  asset: Asset

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Submission Asset
type Asset {
  # type of this Asset
  asset_type: String!

  # gemini token for asset
  gemini_token: String

  # Uniq ID for this asset
  id: ID!

  # known image urls
  image_urls: JSON
  submissionID: ID
  submission_id: ID!
}

enum Category {
  PAINTING
  SCULPTURE
  PHOTOGRAPHY
  PRINT
  DRAWING_COLLAGE_OR_OTHER_WORK_ON_PAPER
  MIXED_MEDIA
  PERFORMANCE_ART
  INSTALLATION
  VIDEO_FILM_ANIMATION
  ARCHITECTURE
  FASHION_DESIGN_AND_WEARABLE_ART
  JEWELRY
  DESIGN_DECORATIVE_ART
  TEXTILE_ARTS
  OTHER
}

# Autogenerated input type of CreateSubmissionMutation
input CreateSubmissionMutationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  additionalInfo: String
  artistID: String!
  authenticityCertificate: Boolean
  category: Category
  currency: String
  depth: String
  dimensionsMetric: String
  edition: Boolean
  editionNumber: String
  editionSize: Int
  height: String
  locationCity: String
  locationCountry: String
  locationState: String
  medium: String
  minimumPriceDollars: Int
  provenance: String
  signature: Boolean
  state: State
  title: String
  width: String
  year: String
}

# Autogenerated return type of CreateSubmissionMutation
type CreateSubmissionMutationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  consignmentSubmission: Submission
}

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

# Represents untyped JSON
scalar JSON

# Mutation root for this schema
type Mutation {
  # Create an asset
  addAssetToConsignmentSubmission(input: AddAssetToConsignmentSubmissionInput): AddAssetToConsignmentSubmissionPayload
  createConsignmentSubmission(input: CreateSubmissionMutationInput): CreateSubmissionMutationPayload
  updateConsignmentSubmission(input: UpdateSubmissionMutationInput): UpdateSubmissionMutationPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# Query root for this schema
type Query {
  # Get a Submission
  submission(id: ID): Submission

  # Filter all submission
  submissions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Get all submissions with these IDs
    ids: [ID]

    # Only get submission by this user_id
    user_id: [ID]

    # If present return either completed or not completed submissions
    completed: Boolean
  ): SubmissionConnection
}

enum State {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

# Consignment Submission
type Submission {
  additional_info: String
  artist_id: String!
  assets: [Asset]
  authenticity_certificate: Boolean
  category: Category
  created_at: ISO8601DateTime
  currency: String
  depth: String
  dimensions_metric: String
  edition: String
  edition_number: String
  edition_size: Int
  height: String

  # Uniq ID for this submission
  id: ID!
  internalID: ID
  location_city: String
  location_country: String
  location_state: String
  medium: String
  minimum_price_dollars: Int
  provenance: String
  signature: Boolean
  state: State
  title: String
  user_id: String!
  width: String
  year: String
}

# The connection type for Submission.
type SubmissionConnection {
  # A list of edges.
  edges: [SubmissionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SubmissionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Submission
}

# Autogenerated input type of UpdateSubmissionMutation
input UpdateSubmissionMutationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  additionalInfo: String
  artistID: String
  authenticityCertificate: Boolean
  category: Category
  currency: String
  depth: String
  dimensionsMetric: String
  edition: Boolean
  editionNumber: String
  editionSize: Int
  height: String
  locationCity: String
  locationCountry: String
  locationState: String
  medium: String
  minimumPriceDollars: Int
  provenance: String
  signature: Boolean
  state: State
  title: String
  width: String
  year: String
}

# Autogenerated return type of UpdateSubmissionMutation
type UpdateSubmissionMutationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  consignmentSubmission: Submission
}
