# Autogenerated input type of ApproveOrder
input ApproveOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ApproveOrder
type ApproveOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  order: Order
}

# Autogenerated input type of CreateOrder
input CreateOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  currencyCode: String!
  lineItems: [LineItemAttributes!]
  partnerId: String!
  userId: String!
}

# Autogenerated return type of CreateOrder
type CreateOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  order: Order
}

# A valid URL, transported as a string
scalar DateTime

# Autogenerated input type of FinalizeOrder
input FinalizeOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of FinalizeOrder
type FinalizeOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  order: Order
}

# A Line Item
type LineItem {
  artworkId: String!
  createdAt: DateTime!
  editionSetId: String
  id: ID!
  priceCents: Int!
  quantity: Int!
  updatedAt: DateTime!
}

# Attributes for a LineItem
input LineItemAttributes {
  # Artwork Id
  artworkId: String!

  # EditionSet Id
  editionSetId: String

  # Item's price in cents
  priceCents: Int!

  # Number of items in the line item
  quantity: Int!
}

# The connection type for LineItem.
type LineItemConnection {
  # A list of edges.
  edges: [LineItemEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type LineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: LineItem
}

type Mutation {
  approveOrder(input: ApproveOrderInput!): ApproveOrderPayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload
  finalizeOrder(input: FinalizeOrderInput!): FinalizeOrderPayload
  rejectOrder(input: RejectOrderInput!): RejectOrderPayload
  submitOrder(input: SubmitOrderInput!): SubmitOrderPayload
}

# An Order
type Order {
  code: String!
  commissionFeeCents: Int
  createdAt: DateTime!
  currencyCode: String!
  id: ID!
  itemsTotalCents: Int!
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): LineItemConnection
  partnerId: String!
  shippingTotalCents: Int
  state: OrderStateEnum!
  stateExpiresAt: DateTime
  stateUpdatedAt: DateTime
  subtotalCents: Int
  taxTotalCents: Int
  totalCents: Int
  transactionFeeCents: Int
  updatedAt: DateTime!
  userId: String!
}

# The connection type for Order.
type OrderConnection {
  # A list of edges.
  edges: [OrderEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# Fields to sort by
enum OrderConnectionSortEnum {
  # Sort by latest timestamp order was updated in ascending order
  UPDATED_AT_ASC

  # Sort by latest timestamp order was updated in descending order
  UPDATED_AT_DESC
}

# An edge in a connection.
type OrderEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Order
}

enum OrderStateEnum {
  # order is approved by partner
  APPROVED

  # order is finalized by partner
  FINALIZED

  # order is still pending submission by collector
  PENDING

  # order is rejected by partner
  REJECTED

  # order is submitted by collector
  SUBMITTED
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Find an order by ID
  order(id: ID!): Order

  # Find list of orders
  orders(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    partnerId: String
    sort: OrderConnectionSortEnum
    state: OrderStateEnum
    userId: String
  ): OrderConnection
}

# Autogenerated input type of RejectOrder
input RejectOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of RejectOrder
type RejectOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  order: Order
}

# Autogenerated input type of SubmitOrder
input SubmitOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  creditCardId: String!
  destinationAccountId: String!
  id: ID!
}

# Autogenerated return type of SubmitOrder
type SubmitOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  order: Order
}