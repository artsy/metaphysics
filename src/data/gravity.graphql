type ARImage {
  height: Int
  imageURLs: ImageURLs
  internalID: ID!
  width: Int
}

"""
Autogenerated input type of AcceptPartnerAgreement
"""
input AcceptPartnerAgreementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partnerAgreementID: String!
}

"""
Autogenerated return type of AcceptPartnerAgreement
"""
type AcceptPartnerAgreementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partnerAgreementOrErrors: PartnerAgreementOrErrorsUnion!
}

"""
A legal agreement requiring partner consent
"""
type Agreement {
  """
  Agreement content in markdown format
  """
  content: String

  """
  When the agreement was created
  """
  createdAt: ISO8601DateTime!

  """
  When the agreement was deactivated in favor of a newer one
  """
  deactivatedAt: ISO8601DateTime

  """
  Description of this agreement
  """
  description: String

  """
  Unique ID for this agreement
  """
  id: ID!

  """
  Name of this agreement
  """
  name: String!

  """
  When the agreement was last updated
  """
  updatedAt: ISO8601DateTime!
}

type Artist {
  id: ID!
  isP1: Boolean!
  name: String
  slug: String!
  targetSupply: Boolean!
}

"""
The connection type for Artist.
"""
type ArtistConnection {
  """
  A list of edges.
  """
  edges: [ArtistEdge]

  """
  A list of nodes.
  """
  nodes: [Artist]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total count of matching nodes, before pagination
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ArtistEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Artist
}

"""
Artwork or design object
"""
type Artwork {
  artists: [Artist!] @deprecated(reason: "Deprecated for artistsConnection")
  artistsConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ArtistConnection

  """
  Unique ID for this work
  """
  id: ID!

  """
  Description of the work's medium
  """
  medium: String
  saleArtworksConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SaleArtworkConnection

  """
  Unique, friendly identifier for this work
  """
  slug: String!

  """
  Artwork title
  """
  title: String
}

"""
The connection type for Artwork.
"""
type ArtworkConnection {
  """
  A list of edges.
  """
  edges: [ArtworkEdge]

  """
  A list of nodes.
  """
  nodes: [Artwork]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total count of matching nodes, before pagination
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ArtworkEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Artwork
}

type ConditionReportRequest {
  internalID: ID!
  saleArtworkID: ID
  userID: ID
}

"""
Autogenerated input type of ConfirmPassword
"""
input ConfirmPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User password to confirm.
  """
  password: String!
}

"""
Autogenerated return type of ConfirmPassword
"""
type ConfirmPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  valid: Boolean!
}

"""
Autogenerated input type of CreateBankDebitSetup
"""
input CreateBankDebitSetupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentMethodTypes: [String!]!
}

"""
Autogenerated return type of CreateBankDebitSetup
"""
type CreateBankDebitSetupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientSecret: String!
}

"""
Autogenerated input type of CreateImage
"""
input CreateImageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The S3 url for the image to be processed
  """
  src: String!

  """
  The Gemini template key that tells us which image versions we want to generate during processing
  """
  templateKey: String!
}

"""
Autogenerated return type of CreateImage
"""
type CreateImagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  image: ARImage!
}

"""
A user-readable error
"""
type Error {
  """
  Error code
  """
  code: String!

  """
  Extra data about error.
  """
  data: JSON

  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

"""
A user-readable list of errors
"""
type Errors {
  """
  List of Errors.
  """
  errors: [Error!]!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type ImageURLs {
  normalized: String
}

"""
Represents untyped JSON
"""
scalar JSON

type Lot {
  bidCount: Int!
  events: [LotEvent!]
  highestBidKey: String
  internalID: ID!
  isWithdrawn: Boolean!
  minimumNextBidMajorDisplay: String
  minimumNextBidMinor: Int
  reserveStatus: String!
  sellingPriceMajorDisplay: String
  sellingPriceMinor: Int
  startingBidMajorDisplay: String
  startingBidMinor: Int
}

type LotEvent {
  appliedErrors: [String!]!
  bidMinor: Int
  bidToMax: Boolean
  calculatedHighestBidKey: String
  calculatedMinimumNextBidMinor: Int
  calculatedReserveStatus: String
  calculatedSellingPriceMinor: Int
  createdAt: String!
  extendedBiddingEndAt: ISO8601DateTime
  internalID: ID!
  isWithdrawn: Boolean
  key: String!
  paddleNumber: String
  previousReserveMinor: Int
  previousReserveStatus: String
  previousStartingBidMinor: Int
  reserveMinor: Int
  reserveStatus: String
  startingBidMinor: Int
  type: String!
  userAgent: String
  userID: ID
  userName: String
  withdrawnEventId: Int
  withdrawnMessage: String
  withdrawnPaddleNumber: String
  withdrawnUserId: ID
  withdrawnUserName: String
}

type Mutation {
  acceptPartnerAgreement(
    """
    Parameters for AcceptPartnerAgreement
    """
    input: AcceptPartnerAgreementInput!
  ): AcceptPartnerAgreementPayload
  confirmPassword(
    """
    Parameters for ConfirmPassword
    """
    input: ConfirmPasswordInput!
  ): ConfirmPasswordPayload
  createBankDebitSetup(
    """
    Parameters for CreateBankDebitSetup
    """
    input: CreateBankDebitSetupInput!
  ): CreateBankDebitSetupPayload
  createImage(
    """
    Parameters for CreateImage
    """
    input: CreateImageInput!
  ): CreateImagePayload
  recordArtworkView(
    """
    Parameters for RecordArtworkView
    """
    input: RecordArtworkViewInput!
  ): RecordArtworkViewPayload
  requestConditionReport(
    """
    Parameters for RequestConditionReport
    """
    input: RequestConditionReportInput!
  ): RequestConditionReportPayload
  transferMyCollection(
    """
    Parameters for TransferMyCollection
    """
    input: TransferMyCollectionInput!
  ): TransferMyCollectionPayload
}

type PageCursor {
  """
  first cursor on the page
  """
  cursor: String!

  """
  is this the current page?
  """
  isCurrent: Boolean!

  """
  page number out of totalPages
  """
  page: Int!
}

type PageCursors {
  around: [PageCursor!]!

  """
  optional, may be included in field around
  """
  first: PageCursor

  """
  optional, may be included in field around
  """
  last: PageCursor
  previous: PageCursor
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Partner {
  artworks: [Artwork!] @deprecated(reason: "Use artworks_connection")
  artworksConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ArtworkConnection
  displayName: String
  display_name: String @deprecated(reason: "Use displayName")
  givenName: String
  given_name: String @deprecated(reason: "Use givenName")
  id: ID!
  relativeSize: Int
  relative_size: Int @deprecated(reason: "Use relativeSize")
  slug: String
  subscriptionState: String
  subscription_state: String @deprecated(reason: "Use subscriptionState")

  """
  List users
  """
  usersConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UsersConnection
}

"""
A partner agreement
"""
type PartnerAgreement {
  """
  Datetime the agreement was accepted
  """
  acceptedAt: ISO8601DateTime

  """
  ID of user who accepted this agreement
  """
  acceptedBy: String

  """
  The associated agreement
  """
  agreement: Agreement!

  """
  Unique ID for this partner agreement
  """
  id: ID!
}

"""
A partner agreement or errors object
"""
union PartnerAgreementOrErrorsUnion = Errors | PartnerAgreement

type Query {
  """
  Find an agreement by ID
  """
  agreement(id: ID!): Agreement

  """
  Find an artist by ID
  """
  artist(id: ID!): Artist

  """
  Find artists by ID
  """
  artists(ids: [ID!]!): [Artist!]

  """
  Find an artwork by ID
  """
  artwork(id: ID!): Artwork

  """
  Find artworks by ID
  """
  artworks(externalIds: [ID!], ids: [ID!], importSource: String): [Artwork!]

  """
  Find a Lot via ID, or sale artwork ID
  """
  lot(ID: ID, saleArtworkID: ID): Lot

  """
  Autocomplete resolvers.
  """
  matchPartners(
    matchType: String
    page: Int = 1
    size: Int = 5
    term: String!
  ): [Partner!]

  """
  Autocomplete resolvers.
  """
  match_partners(
    match_type: String
    page: Int = 1
    size: Int = 5
    term: String!
  ): [Partner!] @deprecated(reason: "Use matchPartners")

  """
  Find a partner by ID
  """
  partner(id: ID!): Partner

  """
  Find partners by IDs
  """
  partners(ids: [ID!]!): [Partner!]

  """
  Find a sale by ID
  """
  sale(id: ID!): Sale

  """
  Find a sale artwork by ID
  """
  saleArtwork(id: ID!): SaleArtwork

  """
  Find sale artworks by IDs
  """
  saleArtworks(ids: [ID!]!): [SaleArtwork!]!
}

"""
Autogenerated input type of RecordArtworkView
"""
input RecordArtworkViewInput {
  artwork_id: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RecordArtworkView
"""
type RecordArtworkViewPayload {
  """
  Id of viewed artwork
  """
  artworkId: String!

  """
  Id of viewed artwork
  """
  artwork_id: String! @deprecated(reason: "Use artworkId")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of RequestConditionReport
"""
input RequestConditionReportInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the sale artwork.
  """
  saleArtworkID: String!
}

"""
Autogenerated return type of RequestConditionReport
"""
type RequestConditionReportPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conditionReportRequest: ConditionReportRequest!
}

type Sale {
  """
  State of auction-type sale
  """
  auctionState: String

  """
  Currency of sale
  """
  currency: String!

  """
  End time for sale
  """
  endAt: ISO8601DateTime

  """
  Unique ID for this sale
  """
  id: ID!

  """
  Start time for live bidding for sale
  """
  liveStartAt: ISO8601DateTime

  """
  Name of sale
  """
  name: String!

  """
  Fields used by sale administrators
  """
  saleAdministrationFields: SaleAdministrationFields

  """
  Unique, friendly identifier for this sale
  """
  slug: String!

  """
  Start time for sale
  """
  startAt: ISO8601DateTime
}

type SaleAdministrationFields {
  """
  User(s): Artsy employee(s) in charge of the sale catalogue
  """
  cataloguers: [User!]!
  collectorVetting: String
  id: ID!
  marketingTier: String
  marketingTierConfirmed: Boolean!

  """
  User(s): Artsy employee(s) in charge of trust and safety
  """
  monitoringOrAttendingAdmins: [User!]!
  partnerTier: String

  """
  Which global region (NALA, APAC, EMEA) the sale belongs to
  """
  partnershipsAdmins: [User!]!

  """
  User(s): Artsy employee(s) handling post-sale
  """
  postSaleManagers: [User!]!

  """
  User(s): Artsy Partnerships team member(s) in charge of the sale
  """
  projectManagers: [User!]!
  region: String

  """
  User(s): Artsy employee(s) project managing the sale
  """
  saleManagers: [User!]!
  status: String

  """
  User(s): Artsy employee(s) who are the sale manager
  """
  trustAndSafetyAdmins: [User!]!
}

type SaleArtwork {
  artwork: Artwork!
  highestBidAmountCents: Int

  """
  Unique ID for this sale artwork
  """
  id: ID!

  """
  Bidding Engine Lot ID
  """
  lotId: String

  """
  Lot number/identifier
  """
  lotLabel: String
  sale: Sale!

  """
  Whether the lot sold at auction
  """
  sold: Boolean
}

"""
The connection type for SaleArtwork.
"""
type SaleArtworkConnection {
  """
  A list of edges.
  """
  edges: [SaleArtworkEdge]

  """
  A list of nodes.
  """
  nodes: [SaleArtwork]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total count of matching nodes, before pagination
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SaleArtworkEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SaleArtwork
}

"""
Autogenerated input type of TransferMyCollection
"""
input TransferMyCollectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailFrom: String
  emailTo: String
  idFrom: String
  idTo: String
}

"""
Autogenerated return type of TransferMyCollection
"""
type TransferMyCollectionPayload {
  artworkCountOrError: TransferMyCollectionSuccessOrErrorsUnion!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Successfully transferred My Collection artworks.
"""
type TransferMyCollectionSuccess {
  """
  Number of transferred artworks.
  """
  count: Int!
}

"""
A transfer My Collection success or errors object
"""
union TransferMyCollectionSuccessOrErrorsUnion =
    Errors
  | TransferMyCollectionSuccess

type User {
  email: String
  id: ID!
  name: String
  secondFactorEnabled: Boolean
}

"""
The connection type for User.
"""
type UsersConnection {
  """
  A list of edges.
  """
  edges: [UsersConnectionEdge]

  """
  A list of nodes.
  """
  nodes: [User]
  pageCursors: PageCursors

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

"""
An edge in a connection.
"""
type UsersConnectionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}
