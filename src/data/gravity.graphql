"""
App Authenticator Two-Factor Authentication factor
"""
type AppSecondFactor implements SecondFactor {
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  internalID: ID!
  kind: SecondFactorKind!
  name: String
  otpProvisioningURI: String
  otpSecret: String
  updatedAt: ISO8601DateTime!
}

"""
Second factor input attributes
"""
input AppSecondFactorAttributes {
  """
  Name of the second factor
  """
  name: String
}

"""
An app second factor or errors
"""
union AppSecondFactorOrErrorsUnion = AppSecondFactor | Errors

type Artist {
  id: ID!
  name: String
  slug: String!
}

"""
The connection type for Artist.
"""
type ArtistConnection {
  """
  A list of edges.
  """
  edges: [ArtistEdge]

  """
  A list of nodes.
  """
  nodes: [Artist]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ArtistEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Artist
}

type ArtistSeries {
  """
  List of Mongo IDs for associated Artists
  """
  artistIDs: [String!]!
  description: String
  featured: Boolean!

  """
  Unique ID for this artist series
  """
  internalID: ID!
  published: Boolean!
  slug: String!
  title: String!
}

"""
Artwork or design object
"""
type Artwork {
  artists: [Artist!] @deprecated(reason: "Deprecated for artistsConnection")
  artistsConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ArtistConnection

  """
  Unique ID for this work
  """
  id: ID!

  """
  Description of the work's medium
  """
  medium: String

  """
  Unique, friendly identifier for this work
  """
  slug: String!

  """
  Artwork title
  """
  title: String
}

"""
The connection type for Artwork.
"""
type ArtworkConnection {
  """
  A list of edges.
  """
  edges: [ArtworkEdge]

  """
  A list of nodes.
  """
  nodes: [Artwork]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ArtworkEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Artwork
}

"""
Backup Two-Factor Authentication factor
"""
type BackupSecondFactor implements SecondFactor {
  code: String!
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  internalID: ID!
  kind: SecondFactorKind!
  updatedAt: ISO8601DateTime!
}

type BackupSecondFactors {
  secondFactors: [BackupSecondFactor!]!
}

"""
A list of backup second factors or errors
"""
union BackupSecondFactorsOrErrorsUnion = BackupSecondFactors | Errors

"""
Autogenerated input type of CaptureHold
"""
input CaptureHoldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Globally unique ID for the hold.
  """
  inventoryHoldId: ID!

  """
  Globally unique ID for the requester of the hold. Ex. Exchange Order ID.
  """
  referenceId: String!
}

"""
Autogenerated return type of CaptureHold
"""
type CaptureHoldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  holdOrError: InventoryHoldOrErrorUnion!
}

type ConditionReportRequest {
  internalID: ID!
  saleArtworkID: ID
  userID: ID
}

"""
Autogenerated input type of ConfirmPassword
"""
input ConfirmPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User password to confirm.
  """
  password: String!
}

"""
Autogenerated return type of ConfirmPassword
"""
type ConfirmPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  valid: Boolean!
}

"""
Autogenerated input type of CreateAppSecondFactor
"""
input CreateAppSecondFactorInput {
  attributes: AppSecondFactorAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAppSecondFactor
"""
type CreateAppSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorOrErrors: AppSecondFactorOrErrorsUnion!
}

"""
Autogenerated input type of CreateBackupSecondFactors
"""
input CreateBackupSecondFactorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String
}

"""
Autogenerated return type of CreateBackupSecondFactors
"""
type CreateBackupSecondFactorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorsOrErrors: BackupSecondFactorsOrErrorsUnion!
}

"""
Autogenerated input type of CreateSmsSecondFactor
"""
input CreateSmsSecondFactorInput {
  attributes: SmsSecondFactorAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateSmsSecondFactor
"""
type CreateSmsSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorOrErrors: SmsSecondFactorOrErrorsUnion!
}

"""
Autogenerated input type of CreateViewingRoom
"""
input CreateViewingRoomInput {
  attributes: ViewingRoomAttributes

  """
  Main text
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  End datetime
  """
  endAt: ISO8601DateTime

  """
  Introduction
  """
  introStatement: String

  """
  Partner Id
  """
  partnerId: String!

  """
  Pullquote
  """
  pullQuote: String

  """
  Start datetime
  """
  startAt: ISO8601DateTime

  """
  Timezone
  """
  timeZone: String

  """
  Title
  """
  title: String
}

"""
Autogenerated return type of CreateViewingRoom
"""
type CreateViewingRoomPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  viewingRoomOrErrors: ViewingRoomOrErrorsUnion!
}

"""
Autogenerated input type of DebitCommissionExemption
"""
input DebitCommissionExemptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Gross sale exemption amount and sale currency. Amount must be positive
  """
  exemption: MoneyInput!
  notes: String

  """
  Partner ID
  """
  partnerId: String!

  """
  The transaction ID (e.g. Exchange order ID) associated with this change
  """
  referenceId: ID
}

"""
Autogenerated return type of DebitCommissionExemption
"""
type DebitCommissionExemptionPayload {
  """
  The amount of GMV in sale currency to not charge commission on in this transaction
  """
  amountOfExemptGmvOrError: MoneyOrErrorUnion!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeliverSecondFactor
"""
input DeliverSecondFactorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorID: ID!
}

"""
Autogenerated return type of DeliverSecondFactor
"""
type DeliverSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

"""
Autogenerated input type of DisableSecondFactor
"""
input DisableSecondFactorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String
  secondFactorID: ID!
}

"""
Autogenerated return type of DisableSecondFactor
"""
type DisableSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

"""
Autogenerated input type of EnableSecondFactor
"""
input EnableSecondFactorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  password: String
  secondFactorID: ID!
}

"""
Autogenerated return type of EnableSecondFactor
"""
type EnableSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  recoveryCodes: [String!]
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

"""
A user-readable error
"""
type Error {
  """
  Error code
  """
  code: String!

  """
  Extra data about error.
  """
  data: JSON

  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

"""
A user-readable list of errors
"""
type Errors {
  """
  List of Errors.
  """
  errors: [Error!]!
}

"""
Autogenerated input type of HoldInventory
"""
input HoldInventoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  expiresInSeconds: Int
  items: [InventoryHoldItemAttributes!]!

  """
  Globally unique ID for the requester of this hold. Ex. Exchange Order ID.
  """
  referenceId: String!
}

"""
Autogenerated return type of HoldInventory
"""
type HoldInventoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  holdOrErrors: InventoryHoldOrErrorsUnion!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type InventoryHold {
  capturedAt: String
  id: ID!
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InventoryHoldItemConnection
  referenceId: String!
}

type InventoryHoldItem {
  artworkId: String!
  editionSetId: String
  id: ID!
  quantity: Int!
}

"""
Attributes for creating or updating an inventory hold item
"""
input InventoryHoldItemAttributes {
  """
  ID of the artwork
  """
  artworkId: String!

  """
  ID of edition set
  """
  editionSetId: String
  quantity: Int!
}

"""
The connection type for InventoryHoldItem.
"""
type InventoryHoldItemConnection {
  """
  A list of edges.
  """
  edges: [InventoryHoldItemEdge]

  """
  A list of nodes.
  """
  nodes: [InventoryHoldItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type InventoryHoldItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: InventoryHoldItem
}

"""
A hold or error object
"""
union InventoryHoldOrErrorUnion = Error | InventoryHold

"""
A hold or error object
"""
union InventoryHoldOrErrorsUnion = Errors | InventoryHold

"""
Represents untyped JSON
"""
scalar JSON

type Money {
  """
  Amount in the minor unit of currency
  """
  amountMinor: Int!

  """
  Three-letter currency code
  """
  currencyCode: String!
}

"""
A simple type to hold an amount and currency code
"""
input MoneyInput {
  """
  Amount in the minor unit of currency
  """
  amountMinor: Int!

  """
  Three-letter currency code
  """
  currencyCode: String!
}

"""
A money object with amount in minor currency and a currency code, or an error object
"""
union MoneyOrErrorUnion = Error | Money

type Mutation {
  captureHold(input: CaptureHoldInput!): CaptureHoldPayload
  confirmPassword(input: ConfirmPasswordInput!): ConfirmPasswordPayload
  createAppSecondFactor(
    input: CreateAppSecondFactorInput!
  ): CreateAppSecondFactorPayload
  createBackupSecondFactors(
    input: CreateBackupSecondFactorsInput!
  ): CreateBackupSecondFactorsPayload
  createSmsSecondFactor(
    input: CreateSmsSecondFactorInput!
  ): CreateSmsSecondFactorPayload
  createViewingRoom(input: CreateViewingRoomInput!): CreateViewingRoomPayload

  """
  Deduct from the partner's exemption balance, against which they can make sales and not pay commission
  """
  debitCommissionExemption(
    input: DebitCommissionExemptionInput!
  ): DebitCommissionExemptionPayload
  deliverSecondFactor(
    input: DeliverSecondFactorInput!
  ): DeliverSecondFactorPayload
  disableSecondFactor(
    input: DisableSecondFactorInput!
  ): DisableSecondFactorPayload
  enableSecondFactor(input: EnableSecondFactorInput!): EnableSecondFactorPayload
  holdInventory(input: HoldInventoryInput!): HoldInventoryPayload
  recordArtworkView(input: RecordArtworkViewInput!): RecordArtworkViewPayload

  """
  Refund commission exemption for a previous transaction
  """
  refundCommissionExemption(
    input: RefundCommissionExemptionInput!
  ): RefundCommissionExemptionPayload
  requestConditionReport(
    input: RequestConditionReportInput!
  ): RequestConditionReportPayload
  updateAppSecondFactor(
    input: UpdateAppSecondFactorInput!
  ): UpdateAppSecondFactorPayload
  updateSmsSecondFactor(
    input: UpdateSmsSecondFactorInput!
  ): UpdateSmsSecondFactorPayload
  updateViewingRoom(input: UpdateViewingRoomInput!): UpdateViewingRoomPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Partner {
  artworks: [Artwork!] @deprecated(reason: "Use artworks_connection")
  artworksConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ArtworkConnection
  displayName: String
  display_name: String @deprecated(reason: "Use displayName")
  givenName: String
  given_name: String @deprecated(reason: "Use givenName")
  id: ID!
  relativeSize: Int
  relative_size: Int @deprecated(reason: "Use relativeSize")
  slug: String
  subscriptionState: String
  subscription_state: String @deprecated(reason: "Use subscriptionState")
}

type Query {
  """
  Find an artist by ID
  """
  artist(id: ID!): Artist

  """
  Find an artist series by ID
  """
  artistSeries(id: ID!): ArtistSeries

  """
  Find artists by ID
  """
  artists(ids: [ID!]!): [Artist!]

  """
  Find an artwork by ID
  """
  artwork(id: ID!): Artwork

  """
  Find artworks by ID
  """
  artworks(ids: [ID!]!): [Artwork!]

  """
  Autocomplete resolvers.
  """
  matchPartners(
    matchType: String
    page: Int = 1
    size: Int = 5
    term: String!
  ): [Partner!]

  """
  Autocomplete resolvers.
  """
  match_partners(
    match_type: String
    page: Int = 1
    size: Int = 5
    term: String!
  ): [Partner!] @deprecated(reason: "Use matchPartners")

  """
  Find partners by IDs
  """
  partners(ids: [ID!]!): [Partner!]

  """
  List enabled Two-Factor Authentication factors
  """
  secondFactors(
    kinds: [SecondFactorKind!] = [app, sms, backup]
  ): [SecondFactor!]!

  """
  Find a viewing room by ID
  """
  viewingRoom(id: ID!): ViewingRoom

  """
  List viewing rooms
  """
  viewingRooms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    featured: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    partnerID: ID
    published: Boolean = true
  ): ViewingRoomConnection
}

"""
Autogenerated input type of RecordArtworkView
"""
input RecordArtworkViewInput {
  artwork_id: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RecordArtworkView
"""
type RecordArtworkViewPayload {
  """
  Id of viewed artwork
  """
  artworkId: String!

  """
  Id of viewed artwork
  """
  artwork_id: String! @deprecated(reason: "Use artworkId")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of RefundCommissionExemption
"""
input RefundCommissionExemptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notes: String

  """
  Partner ID
  """
  partnerId: String!

  """
  The transaction ID (e.g. Exchange order ID) associated with this change
  """
  referenceId: ID!
}

"""
Autogenerated return type of RefundCommissionExemption
"""
type RefundCommissionExemptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The total amount of GMV remaining in USD on which a partner won't be charged commission
  """
  gmvRefundedOrError: MoneyOrErrorUnion!
}

"""
Autogenerated input type of RequestConditionReport
"""
input RequestConditionReportInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the sale artwork.
  """
  saleArtworkID: String!
}

"""
Autogenerated return type of RequestConditionReport
"""
type RequestConditionReportPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conditionReportRequest: ConditionReportRequest!
}

interface SecondFactor {
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  internalID: ID!
  kind: SecondFactorKind!
  updatedAt: ISO8601DateTime!
}

"""
Two-Factor Authentication (2FA) Method
"""
enum SecondFactorKind {
  """
  App authenticator 2FA method
  """
  app

  """
  Backup 2FA method
  """
  backup

  """
  SMS 2FA method
  """
  sms
}

"""
A second factor or errors
"""
union SecondFactorOrErrorsUnion = AppSecondFactor | Errors | SmsSecondFactor

"""
SMS Two-Factor Authentication factor
"""
type SmsSecondFactor implements SecondFactor {
  countryCode: String
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  formattedPhoneNumber: String
  internalID: ID!
  kind: SecondFactorKind!
  lastDeliveredAt: ISO8601DateTime
  maskedPhone: String @deprecated(reason: "Use formattedPhoneNumber instead")
  phoneNumber: String
  updatedAt: ISO8601DateTime!
}

"""
SMS second factor input attributes
"""
input SmsSecondFactorAttributes {
  """
  ISO 3166 country code for the SMS second factor
  """
  countryCode: String

  """
  Phone number of the SMS second factor
  """
  phoneNumber: String
}

"""
An SMS second factor or errors
"""
union SmsSecondFactorOrErrorsUnion = Errors | SmsSecondFactor

"""
Autogenerated input type of UpdateAppSecondFactor
"""
input UpdateAppSecondFactorInput {
  attributes: AppSecondFactorAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorID: ID!
}

"""
Autogenerated return type of UpdateAppSecondFactor
"""
type UpdateAppSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorOrErrors: AppSecondFactorOrErrorsUnion!
}

"""
Autogenerated input type of UpdateSmsSecondFactor
"""
input UpdateSmsSecondFactorInput {
  attributes: SmsSecondFactorAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorID: ID!
}

"""
Autogenerated return type of UpdateSmsSecondFactor
"""
type UpdateSmsSecondFactorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  secondFactorOrErrors: SmsSecondFactorOrErrorsUnion!
}

"""
Autogenerated input type of UpdateViewingRoom
"""
input UpdateViewingRoomInput {
  artworks: [ViewingRoomArtworkAttributes!]
  attributes: ViewingRoomAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  viewingRoomID: String!
}

"""
Autogenerated return type of UpdateViewingRoom
"""
type UpdateViewingRoomPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  viewingRoomOrErrors: ViewingRoomOrErrorsUnion!
}

"""
An artwork viewing room
"""
type ViewingRoom {
  artworkIDs: [String!]!

  """
  Body copy
  """
  body: String

  """
  Datetime after which the viewing room is no longer viewable
  """
  endAt: ISO8601DateTime

  """
  Image URL for hero image on viewing room home screen
  """
  heroImageURL: String

  """
  Unique ID for this room
  """
  internalID: ID!

  """
  Introductory paragraph
  """
  introStatement: String

  """
  ID of the partner associated with this viewing room
  """
  partnerID: String!
  published: Boolean!
  pullQuote: String
  slug: String!

  """
  Datetime when the viewing room is viewable
  """
  startAt: ISO8601DateTime

  """
  Calculated field to reflect visibility and state of this viewing room
  """
  status: String!
  subsections: [ViewingRoomSubsection!]!
  timeZone: String

  """
  Viewing room name
  """
  title: String!
}

"""
Viewing Room artwork attributes
"""
input ViewingRoomArtworkAttributes {
  artworkID: String!
  position: Int!
}

"""
Basic viewing room attributes
"""
input ViewingRoomAttributes {
  body: String

  """
  Datetime (in UTC) when Viewing Room closes
  """
  endAt: ISO8601DateTime
  introStatement: String
  pullQuote: String

  """
  Datetime (in UTC) when Viewing Room opens
  """
  startAt: ISO8601DateTime

  """
  Time zone (tz database format, e.g. America/New_York) in which start_at/end_at attributes were input
  """
  timeZone: String

  """
  Title
  """
  title: String
}

"""
The connection type for ViewingRoom.
"""
type ViewingRoomConnection {
  """
  A list of edges.
  """
  edges: [ViewingRoomEdge]

  """
  A list of nodes.
  """
  nodes: [ViewingRoom]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ViewingRoomEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ViewingRoom
}

"""
A viewing room or errors object
"""
union ViewingRoomOrErrorsUnion = Errors | ViewingRoom

"""
Title, image, text, and caption for a viewing room section
"""
type ViewingRoomSubsection {
  """
  Body copy
  """
  body: String

  """
  Image caption
  """
  caption: String

  """
  Image URL
  """
  imageURL: String

  """
  Unique ID for this subsection
  """
  internalID: ID!

  """
  Section header
  """
  title: String
}
