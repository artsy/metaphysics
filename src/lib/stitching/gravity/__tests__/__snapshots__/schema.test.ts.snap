// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates an SDL 1`] = `
"# Autogenerated input type of AcceptPartnerAgreement
input AcceptPartnerAgreementInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  partnerAgreementID: String!
}

# Autogenerated return type of AcceptPartnerAgreement
type AcceptPartnerAgreementPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  partnerAgreementOrErrors: PartnerAgreementOrErrorsUnion!
}

# A legal agreement requiring partner consent
type Agreement {
  # Agreement content in markdown format
  content: String

  # When the agreement was created
  createdAt: ISO8601DateTime!

  # When the agreement was deactivated in favor of a newer one
  deactivatedAt: ISO8601DateTime

  # Description of this agreement
  description: String

  # Unique ID for this agreement
  id: ID!

  # Name of this agreement
  name: String!

  # When the agreement was last updated
  updatedAt: ISO8601DateTime!
}

# App Authenticator Two-Factor Authentication factor
type AppSecondFactor implements SecondFactor {
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  internalID: ID!
  kind: SecondFactorKind!
  name: String
  otpProvisioningURI: String
  otpSecret: String
  updatedAt: ISO8601DateTime!
}

# Second factor input attributes
input AppSecondFactorAttributes {
  # Name of the second factor
  name: String
}

# An app second factor or errors
union AppSecondFactorOrErrorsUnion = AppSecondFactor | Errors

type ARImage {
  height: Int
  imageURLs: ImageURLs
  internalID: ID!
  width: Int
}

input ARImageInput {
  internalID: ID!
}

type ArtistSeries {
  # List of Mongo IDs for associated Artists
  artistIDs: [String!]!
  artworkIDs: [ID!]!
  artworksCount: Int!
  description: String
  featured: Boolean!
  forSaleArtworksCount: Int!
  imageHeight: Int
  imageURL: String
  imageWidth: Int

  # Unique ID for this artist series
  internalID: ID!
  published: Boolean!
  representativeArtworkID: ID
  slug: String!
  title: String!
}

# The connection type for ArtistSeries.
type ArtistSeriesConnection {
  # A list of edges.
  edges: [ArtistSeriesEdge]

  # A list of nodes.
  nodes: [ArtistSeries]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Total count of matching nodes, before pagination
  totalCount: Int!
}

# An edge in a connection.
type ArtistSeriesEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ArtistSeries
}

# Backup Two-Factor Authentication factor
type BackupSecondFactor implements SecondFactor {
  code: String!
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  internalID: ID!
  kind: SecondFactorKind!
  updatedAt: ISO8601DateTime!
}

type BackupSecondFactors {
  secondFactors: [BackupSecondFactor!]!
}

# A list of backup second factors or errors
union BackupSecondFactorsOrErrorsUnion = BackupSecondFactors | Errors

# Autogenerated input type of CaptureHold
input CaptureHoldInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Globally unique ID for the hold.
  inventoryHoldId: ID!

  # Globally unique ID for the requester of the hold. Ex. Exchange Order ID.
  referenceId: String!
}

# Autogenerated return type of CaptureHold
type CaptureHoldPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  holdOrError: InventoryHoldOrErrorUnion!
}

type ConditionReportRequest {
  internalID: ID!
  saleArtworkID: ID
  userID: ID
}

# Autogenerated input type of ConfirmPassword
input ConfirmPasswordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # User password to confirm.
  password: String!
}

# Autogenerated return type of ConfirmPassword
type ConfirmPasswordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  valid: Boolean!
}

# Autogenerated input type of CreateAppSecondFactor
input CreateAppSecondFactorInput {
  attributes: AppSecondFactorAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  password: String!
}

# Autogenerated return type of CreateAppSecondFactor
type CreateAppSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorOrErrors: AppSecondFactorOrErrorsUnion!
}

# Autogenerated input type of CreateBackupSecondFactors
input CreateBackupSecondFactorsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  password: String
}

# Autogenerated return type of CreateBackupSecondFactors
type CreateBackupSecondFactorsPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorsOrErrors: BackupSecondFactorsOrErrorsUnion!
}

# Autogenerated input type of CreateImage
input CreateImageInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The S3 url for the image to be processed
  src: String!

  # The Gemini template key that tells us which image versions we want to generate during processing
  templateKey: String!
}

# Autogenerated return type of CreateImage
type CreateImagePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  image: ARImage!
}

# Autogenerated input type of CreateSavedSearch
input CreateSavedSearchInput {
  attributes: SearchCriteriaAttributes

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateSavedSearch
type CreateSavedSearchPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  savedSearchOrErrors: SearchCriteriaOrErrorsUnion!
}

# Autogenerated input type of CreateSmsSecondFactor
input CreateSmsSecondFactorInput {
  attributes: SmsSecondFactorAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  password: String!
}

# Autogenerated return type of CreateSmsSecondFactor
type CreateSmsSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorOrErrors: SmsSecondFactorOrErrorsUnion!
}

# Autogenerated input type of CreateUserAddress
input CreateUserAddressInput {
  attributes: UserAddressAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateUserAddress
type CreateUserAddressPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

# Autogenerated input type of CreateViewingRoom
input CreateViewingRoomInput {
  attributes: ViewingRoomAttributes

  # Main text
  body: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # End datetime
  endAt: ISO8601DateTime
  image: ARImageInput

  # Introduction
  introStatement: String
  partnerID: String

  # Partner Id
  partnerId: String

  # Pullquote
  pullQuote: String

  # Start datetime
  startAt: ISO8601DateTime

  # Timezone
  timeZone: String

  # Title
  title: String
}

# Autogenerated return type of CreateViewingRoom
type CreateViewingRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoomOrErrors: ViewingRoomOrErrorsUnion!
}

# Autogenerated input type of DeleteSavedSearch
input DeleteSavedSearchInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # search criteria id
  searchCriteriaID: String!
}

# Autogenerated return type of DeleteSavedSearch
type DeleteSavedSearchPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  savedSearchOrErrors: SearchCriteriaOrErrorsUnion!
}

# Autogenerated input type of DeleteUserAddress
input DeleteUserAddressInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressID: ID!
}

# Autogenerated return type of DeleteUserAddress
type DeleteUserAddressPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

# Autogenerated input type of DeleteViewingRoom
input DeleteViewingRoomInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoomID: ID!
}

# Autogenerated return type of DeleteViewingRoom
type DeleteViewingRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoom: ViewingRoom!
}

# Autogenerated input type of DeliverSecondFactor
input DeliverSecondFactorInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorID: ID!
}

# Autogenerated return type of DeliverSecondFactor
type DeliverSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

# Autogenerated input type of DisableSecondFactor
input DisableSecondFactorInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  password: String!
  secondFactorID: ID!
}

# Autogenerated return type of DisableSecondFactor
type DisableSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

type DoNotUseThisPartner {
  displayName: String
  display_name: String @deprecated(reason: \\"Use displayName\\")
  givenName: String
  given_name: String @deprecated(reason: \\"Use givenName\\")
  id: ID!
  relativeSize: Int
  relative_size: Int @deprecated(reason: \\"Use relativeSize\\")
  slug: String
  subscriptionState: String
  subscription_state: String @deprecated(reason: \\"Use subscriptionState\\")
}

# Autogenerated input type of EnableSecondFactor
input EnableSecondFactorInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  code: String!
  password: String
  secondFactorID: ID!
}

# Autogenerated return type of EnableSecondFactor
type EnableSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  recoveryCodes: [String!]
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

# A user-readable error
type Error {
  # Error code
  code: String!

  # Extra data about error.
  data: JSON

  # A description of the error
  message: String!

  # Which input value this error came from
  path: [String!]
}

# A user-readable list of errors
type Errors {
  # List of Errors.
  errors: [Error!]!
}

# Autogenerated input type of HoldInventory
input HoldInventoryInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  expiresInSeconds: Int
  items: [InventoryHoldItemAttributes!]!

  # Globally unique ID for the requester of this hold. Ex. Exchange Order ID.
  referenceId: String!
}

# Autogenerated return type of HoldInventory
type HoldInventoryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  holdOrErrors: InventoryHoldOrErrorsUnion!
}

type ImageURLs {
  normalized: String
}

type InventoryHold {
  capturedAt: String
  id: ID!
  items(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): InventoryHoldItemConnection
  referenceId: String!
}

type InventoryHoldItem {
  artworkId: String!
  editionSetId: String
  id: ID!
  quantity: Int!
}

# Attributes for creating or updating an inventory hold item
input InventoryHoldItemAttributes {
  # ID of the artwork
  artworkId: String!

  # ID of edition set
  editionSetId: String
  quantity: Int!
}

# The connection type for InventoryHoldItem.
type InventoryHoldItemConnection {
  # A list of edges.
  edges: [InventoryHoldItemEdge]

  # A list of nodes.
  nodes: [InventoryHoldItem]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Total count of matching nodes, before pagination
  totalCount: Int!
}

# An edge in a connection.
type InventoryHoldItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: InventoryHoldItem
}

# A hold or error object
union InventoryHoldOrErrorsUnion = Errors | InventoryHold

# A hold or error object
union InventoryHoldOrErrorUnion = Error | InventoryHold

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

# Represents untyped JSON
scalar JSON

# A money object with amount in minor currency and a currency code, or an error object
union MoneyOrErrorUnion = Error

type Mutation {
  acceptPartnerAgreement(input: AcceptPartnerAgreementInput!): AcceptPartnerAgreementPayload
  captureHold(input: CaptureHoldInput!): CaptureHoldPayload
  confirmPassword(input: ConfirmPasswordInput!): ConfirmPasswordPayload
  createAppSecondFactor(input: CreateAppSecondFactorInput!): CreateAppSecondFactorPayload
  createBackupSecondFactors(input: CreateBackupSecondFactorsInput!): CreateBackupSecondFactorsPayload
  createImage(input: CreateImageInput!): CreateImagePayload
  createSavedSearch(input: CreateSavedSearchInput!): CreateSavedSearchPayload
  createSmsSecondFactor(input: CreateSmsSecondFactorInput!): CreateSmsSecondFactorPayload
  createUserAddress(input: CreateUserAddressInput!): CreateUserAddressPayload
  createViewingRoom(input: CreateViewingRoomInput!): CreateViewingRoomPayload
  deleteSavedSearch(input: DeleteSavedSearchInput!): DeleteSavedSearchPayload
  deleteUserAddress(input: DeleteUserAddressInput!): DeleteUserAddressPayload
  deleteViewingRoom(input: DeleteViewingRoomInput!): DeleteViewingRoomPayload
  deliverSecondFactor(input: DeliverSecondFactorInput!): DeliverSecondFactorPayload
  disableSecondFactor(input: DisableSecondFactorInput!): DisableSecondFactorPayload
  enableSecondFactor(input: EnableSecondFactorInput!): EnableSecondFactorPayload
  holdInventory(input: HoldInventoryInput!): HoldInventoryPayload
  publishViewingRoom(input: PublishViewingRoomInput!): PublishViewingRoomPayload
  recordArtworkView(input: RecordArtworkViewInput!): RecordArtworkViewPayload
  requestConditionReport(input: RequestConditionReportInput!): RequestConditionReportPayload
  unpublishViewingRoom(input: UnpublishViewingRoomInput!): UnpublishViewingRoomPayload
  updateAppSecondFactor(input: UpdateAppSecondFactorInput!): UpdateAppSecondFactorPayload
  updateSmsSecondFactor(input: UpdateSmsSecondFactorInput!): UpdateSmsSecondFactorPayload
  updateUserAddress(input: UpdateUserAddressInput!): UpdateUserAddressPayload
  updateUserDefaultAddress(input: UpdateUserDefaultAddressInput!): UpdateUserDefaultAddressPayload
  updateViewingRoom(input: UpdateViewingRoomInput!): UpdateViewingRoomPayload
  updateViewingRoomArtworks(input: UpdateViewingRoomArtworksInput!): UpdateViewingRoomArtworksPayload
  updateViewingRoomSubsections(input: UpdateViewingRoomSubsectionsInput!): UpdateViewingRoomSubsectionsPayload
}

type PageCursor {
  # first cursor on the page
  cursor: String!

  # is this the current page?
  isCurrent: Boolean!

  # page number out of totalPages
  page: Int!
}

type PageCursors {
  around: [PageCursor!]!

  # optional, may be included in field around
  first: PageCursor

  # optional, may be included in field around
  last: PageCursor
  previous: PageCursor
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# A partner agreement
type PartnerAgreement {
  # Datetime the agreement was accepted
  acceptedAt: ISO8601DateTime

  # ID of user who accepted this agreement
  acceptedBy: String

  # The associated agreement
  agreement: Agreement!

  # Unique ID for this partner agreement
  id: ID!
}

# A partner agreement or errors object
union PartnerAgreementOrErrorsUnion = Errors | PartnerAgreement

# Autogenerated input type of PublishViewingRoom
input PublishViewingRoomInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoomID: ID!
}

# Autogenerated return type of PublishViewingRoom
type PublishViewingRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoom: ViewingRoom!
}

type Query {
  # Find an agreement by ID
  agreement(id: ID!): Agreement

  # Find an artist series by ID
  artistSeries(id: ID!): ArtistSeries

  # List all artist series, optionally filtered by artist or artwork
  artistSeriesConnection(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # ID of the artist by which to filter results
    artistID: ID

    # ID of the artwork by which to filter results
    artworkID: ID

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Array of IDs of artist series that should be excluded from results
    excludeIDs: [ID!]

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ArtistSeriesConnection

  # Autocomplete resolvers.
  _unused_gravity_matchPartners(matchType: String, page: Int = 1, size: Int = 5, term: String!): [DoNotUseThisPartner!]

  # Autocomplete resolvers.
  _unused_gravity_match_partners(match_type: String, page: Int = 1, size: Int = 5, term: String!): [DoNotUseThisPartner!] @deprecated(reason: \\"Use matchPartners\\")

  # Find a partner by ID
  _unused_gravity_partner(id: ID!): DoNotUseThisPartner

  # Find partners by IDs
  _unused_gravity_partners(ids: [ID!]!): [DoNotUseThisPartner!]

  # Find a saved search by ID or criteria
  _unused_gravity_savedSearch(criteria: SearchCriteriaAttributes, id: ID): SearchCriteria

  # List enabled Two-Factor Authentication factors
  _unused_gravity_secondFactors(kinds: [SecondFactorKind!] = [app, sms, backup]): [SecondFactor!]!

  # List of user's saved addresses
  _unused_gravity_userAddressConnection(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    userId: ID!
  ): UserAddressConnection

  # Find a viewing room by ID
  viewingRoom(id: ID!): ViewingRoom

  # (Deprecate) use viewingRoomsConnection
  viewingRooms(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    featured: Boolean

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    partnerID: ID

    # (Deprecated) Use statuses
    published: Boolean

    # Returns only viewing rooms with these statuses
    statuses: [ViewingRoomStatusEnum!] = [live]
  ): ViewingRoomConnection @deprecated(reason: \\"Use viewingRoomsConnection\\")

  # List viewing rooms
  _unused_gravity_viewingRoomsConnection(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    featured: Boolean

    # Returns the first _n_ elements from the list.
    first: Int
    ids: [ID!]

    # Returns the last _n_ elements from the list.
    last: Int
    partnerID: ID

    # Returns only viewing rooms with these statuses
    statuses: [ViewingRoomStatusEnum!] = [live]
  ): ViewingRoomsConnection
}

# Autogenerated input type of RecordArtworkView
input RecordArtworkViewInput {
  artwork_id: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RecordArtworkView
type RecordArtworkViewPayload {
  # Id of viewed artwork
  artworkId: String!

  # Id of viewed artwork
  artwork_id: String! @deprecated(reason: \\"Use artworkId\\")

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of RequestConditionReport
input RequestConditionReportInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # ID of the sale artwork.
  saleArtworkID: String!
}

# Autogenerated return type of RequestConditionReport
type RequestConditionReportPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  conditionReportRequest: ConditionReportRequest!
}

# Search criteria
type SearchCriteria {
  acquireable: Boolean
  additionalGeneIDs: [String!]!
  artistID: String
  atAuction: Boolean
  attributionClass: [String!]!
  attributionClasses: [String!]!
  colors: [String!]!
  dimensionRange: String
  dimensionScoreMax: Float
  dimensionScoreMin: Float
  height: String
  heightMax: Float
  heightMin: Float
  inquireableOnly: Boolean
  internalID: ID!
  locationCities: [String!]!
  majorPeriods: [String!]!
  materialsTerms: [String!]!
  offerable: Boolean
  partnerIDs: [String!]!
  priceMax: Int
  priceMin: Int
  priceRange: String
  width: String
  widthMax: Float
  widthMin: Float
}

# Attributes for a search criteria
input SearchCriteriaAttributes {
  acquireable: Boolean = null
  additionalGeneIDs: [String!] = []
  artistID: String = null
  atAuction: Boolean = null
  attributionClass: [String!] = []
  attributionClasses: [String!] = []
  colors: [String!] = []
  dimensionRange: String = null
  dimensionScoreMax: Float = null
  dimensionScoreMin: Float = null
  height: String = null
  heightMax: Float = null
  heightMin: Float = null
  inquireableOnly: Boolean = null
  locationCities: [String!] = []
  majorPeriods: [String!] = []
  materialsTerms: [String!] = []
  offerable: Boolean = null
  partnerIDs: [String!] = []
  priceMax: Int = null
  priceMin: Int = null
  priceRange: String = null
  width: Float = null
  widthMax: Float = null
  widthMin: Float = null
}

# A search criteria or errors object
union SearchCriteriaOrErrorsUnion = Errors | SearchCriteria

interface SecondFactor {
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  internalID: ID!
  kind: SecondFactorKind!
  updatedAt: ISO8601DateTime!
}

# Two-Factor Authentication (2FA) Method
enum SecondFactorKind {
  # App authenticator 2FA method
  app

  # Backup 2FA method
  backup

  # SMS 2FA method
  sms
}

# A second factor or errors
union SecondFactorOrErrorsUnion = AppSecondFactor | Errors | SmsSecondFactor

# SMS Two-Factor Authentication factor
type SmsSecondFactor implements SecondFactor {
  countryCode: String
  createdAt: ISO8601DateTime!
  disabledAt: ISO8601DateTime
  enabled: Boolean!
  enabledAt: ISO8601DateTime
  formattedPhoneNumber: String
  internalID: ID!
  kind: SecondFactorKind!
  lastDeliveredAt: ISO8601DateTime
  maskedPhone: String @deprecated(reason: \\"Use formattedPhoneNumber instead\\")
  phoneNumber: String
  updatedAt: ISO8601DateTime!
}

# SMS second factor input attributes
input SmsSecondFactorAttributes {
  # ISO 3166 country code for the SMS second factor
  countryCode: String

  # Phone number of the SMS second factor
  phoneNumber: String
}

# An SMS second factor or errors
union SmsSecondFactorOrErrorsUnion = Errors | SmsSecondFactor

# Autogenerated input type of UnpublishViewingRoom
input UnpublishViewingRoomInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoomID: ID!
}

# Autogenerated return type of UnpublishViewingRoom
type UnpublishViewingRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoom: ViewingRoom!
}

# Autogenerated input type of UpdateAppSecondFactor
input UpdateAppSecondFactorInput {
  attributes: AppSecondFactorAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorID: ID!
}

# Autogenerated return type of UpdateAppSecondFactor
type UpdateAppSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorOrErrors: AppSecondFactorOrErrorsUnion!
}

# Autogenerated input type of UpdateSmsSecondFactor
input UpdateSmsSecondFactorInput {
  attributes: SmsSecondFactorAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorID: ID!
}

# Autogenerated return type of UpdateSmsSecondFactor
type UpdateSmsSecondFactorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  secondFactorOrErrors: SmsSecondFactorOrErrorsUnion!
}

# Autogenerated input type of UpdateUserAddress
input UpdateUserAddressInput {
  attributes: UserAddressAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressID: ID!
}

# Autogenerated return type of UpdateUserAddress
type UpdateUserAddressPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

# Autogenerated input type of UpdateUserDefaultAddress
input UpdateUserDefaultAddressInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressID: ID!
}

# Autogenerated return type of UpdateUserDefaultAddress
type UpdateUserDefaultAddressPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

# Autogenerated input type of UpdateViewingRoomArtworks
input UpdateViewingRoomArtworksInput {
  artworks: [ViewingRoomArtworkInput!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoomID: String!
}

# Autogenerated return type of UpdateViewingRoomArtworks
type UpdateViewingRoomArtworksPayload {
  artworkIDs: [String!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of UpdateViewingRoom
input UpdateViewingRoomInput {
  attributes: ViewingRoomAttributes!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  image: ARImageInput
  viewingRoomID: String!
}

# Autogenerated return type of UpdateViewingRoom
type UpdateViewingRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewingRoomOrErrors: ViewingRoomOrErrorsUnion!
}

# Autogenerated input type of UpdateViewingRoomSubsections
input UpdateViewingRoomSubsectionsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  subsections: [ViewingRoomSubsectionInput!]!
  viewingRoomID: ID!
}

# Autogenerated return type of UpdateViewingRoomSubsections
type UpdateViewingRoomSubsectionsPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  subsections: [ViewingRoomSubsection!]!
}

# User saved address
type UserAddress {
  # Address line 1
  addressLine1: String!

  # Address line 2
  addressLine2: String

  # Address line 3
  addressLine3: String

  # City
  city: String!

  # Country
  country: String!

  # Unique ID for this address
  internalID: ID!

  # Is default address
  isDefault: Boolean!

  # Name on addreess
  name: String

  # Phone number
  phoneNumber: String

  # Postal Code
  postalCode: String

  # Region
  region: String
}

# Shipping address input attributes
input UserAddressAttributes {
  # Address line 1
  addressLine1: String!

  # Address line 2
  addressLine2: String

  # Address line 3
  addressLine3: String

  # City
  city: String!

  # Country
  country: String!

  # Name
  name: String!

  # Phone number
  phoneNumber: String

  # Postal code
  postalCode: String

  # Region
  region: String
}

# The connection type for UserAddress.
type UserAddressConnection {
  # A list of edges.
  edges: [UserAddressEdge]

  # A list of nodes.
  nodes: [UserAddress]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Total count of matching nodes, before pagination
  totalCount: Int!
}

# An edge in a connection.
type UserAddressEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: UserAddress
}

# An address or errors object
union UserAddressOrErrorsUnion = Errors | UserAddress

# An artwork viewing room
type ViewingRoom {
  artworkIDs: [String!]!

  # Body copy
  body: String

  # Datetime after which the viewing room is no longer viewable
  endAt: ISO8601DateTime
  heroImageURL: String @deprecated(reason: \\"Use image field instead\\")
  href: String
  image: ARImage

  # Unique ID for this room
  internalID: ID!

  # Introductory paragraph
  introStatement: String

  # ID of the partner associated with this viewing room
  partnerID: String!
  published: Boolean!
  pullQuote: String
  slug: String!

  # Datetime when the viewing room is viewable
  startAt: ISO8601DateTime

  # Calculated field to reflect visibility and state of this viewing room
  status: String!
  subsections: [ViewingRoomSubsection!]!
  timeZone: String

  # Viewing room name
  title: String!
  viewingRoomArtworks: [ViewingRoomArtwork!]!
}

# Relationship between a Viewing Room and an Artwork
type ViewingRoomArtwork {
  artworkID: ID!
  internalID: ID!
  published: Boolean!
}

# An input type for a Viewing Room artwork
input ViewingRoomArtworkInput {
  artworkID: ID!
  delete: Boolean = false
  internalID: ID
  position: Int
}

# Basic viewing room attributes
input ViewingRoomAttributes {
  body: String

  # Datetime (in UTC) when Viewing Room closes
  endAt: ISO8601DateTime
  introStatement: String
  pullQuote: String

  # Datetime (in UTC) when Viewing Room opens
  startAt: ISO8601DateTime

  # Time zone (tz database format, e.g. America/New_York) in which start_at/end_at attributes were input
  timeZone: String

  # Title
  title: String
}

# The connection type for ViewingRoom.
type ViewingRoomConnection {
  # A list of edges.
  edges: [ViewingRoomEdge]

  # A list of nodes.
  nodes: [ViewingRoom]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Total count of matching nodes, before pagination
  totalCount: Int!
}

# An edge in a connection.
type ViewingRoomEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ViewingRoom
}

# A viewing room or errors object
union ViewingRoomOrErrorsUnion = Errors | ViewingRoom

# The connection type for ViewingRoom.
type ViewingRoomsConnection {
  # A list of edges.
  edges: [ViewingRoomsEdge]

  # A list of nodes.
  nodes: [ViewingRoom]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

# An edge in a connection.
type ViewingRoomsEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ViewingRoom
}

enum ViewingRoomStatusEnum {
  closed
  draft
  live
  scheduled
}

# Title, image, text, and caption for a viewing room section
type ViewingRoomSubsection {
  # Body copy
  body: String

  # Image caption
  caption: String
  image: ARImage

  # Image URL
  imageURL: String

  # Unique ID for this subsection
  internalID: ID!

  # Section header
  title: String
}

# Attributes for creating or updating a viewing room subsection
input ViewingRoomSubsectionAttributes {
  body: String
  caption: String
  title: String
}

# An input type for the creation of viewing room subsections
input ViewingRoomSubsectionInput {
  attributes: ViewingRoomSubsectionAttributes

  # If true, delete this subsection from the database
  delete: Boolean = false
  image: ARImageInput
  internalID: ID
}
"
`;
