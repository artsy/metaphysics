// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates an SDL 1`] = `
"# Autogenerated input type of AddInitialOfferToOrder
input EcommerceAddInitialOfferToOrderInput {
  amountCents: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  orderId: ID!
}

# Autogenerated return type of AddInitialOfferToOrder
type EcommerceAddInitialOfferToOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# An generic error type for mutations
type EcommerceApplicationError {
  # Code of this error
  code: String!

  # What caused the error
  data: String

  # Type of this error
  type: String!
}

# Autogenerated input type of ApproveOrder
input EcommerceApproveOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ApproveOrder
type EcommerceApproveOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of BuyerAcceptOffer
input EcommerceBuyerAcceptOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of BuyerAcceptOffer
type EcommerceBuyerAcceptOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of BuyerCounterOffer
input EcommerceBuyerCounterOfferInput {
  amountCents: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of BuyerCounterOffer
type EcommerceBuyerCounterOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of BuyerRejectOffer
input EcommerceBuyerRejectOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
  rejectReason: EcommerceCancelReasonTypeEnum
}

# Autogenerated return type of BuyerRejectOffer
type EcommerceBuyerRejectOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

type EcommerceBuyOrder implements EcommerceOrder {
  buyer: EcommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  commissionRate: Float
  createdAt: EcommerceDateTime!
  creditCardId: String
  currencyCode: String!
  displayCommissionRate: String
  id: ID!

  # Item total in cents, for Offer Orders this field reflects current offer
  itemsTotalCents: Int
  lastApprovedAt: EcommerceDateTime
  lastSubmittedAt: EcommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceLineItemConnection
  mode: EcommerceOrderModeEnum
  requestedFulfillment: EcommerceRequestedFulfillmentUnion
  seller: EcommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: EcommerceOrderStateEnum!
  stateExpiresAt: EcommerceDateTime
  stateReason: String
  stateUpdatedAt: EcommerceDateTime
  taxTotalCents: Int
  totalListPriceCents: Int!
  transactionFeeCents: Int
  updatedAt: EcommerceDateTime!
}

enum EcommerceCancelReasonTypeEnum {
  # cancelation reason is: buyer_lapsed
  BUYER_LAPSED

  # cancelation reason is: buyer_rejected
  BUYER_REJECTED

  # cancelation reason is: seller_lapsed
  SELLER_LAPSED

  # cancelation reason is: seller_rejected
  SELLER_REJECTED

  # cancelation reason is: seller_rejected_artwork_unavailable
  SELLER_REJECTED_ARTWORK_UNAVAILABLE

  # cancelation reason is: seller_rejected_offer_too_low
  SELLER_REJECTED_OFFER_TOO_LOW

  # cancelation reason is: seller_rejected_other
  SELLER_REJECTED_OTHER

  # cancelation reason is: seller_rejected_shipping_unavailable
  SELLER_REJECTED_SHIPPING_UNAVAILABLE
}

# Autogenerated input type of ConfirmPickup
input EcommerceConfirmPickupInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of ConfirmPickup
type EcommerceConfirmPickupPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of CreateOfferOrderWithArtwork
input EcommerceCreateOfferOrderWithArtworkInput {
  # Artwork Id
  artworkId: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # EditionSet Id
  editionSetId: String

  # When set to false, we will create a new order. Otherwise if current user has
  # pending/submitted orders on same artwork/edition with same quantity, we will return that
  findActiveOrCreate: Boolean = true

  # Number of items in the line item, default is 1
  quantity: Int
}

# Autogenerated return type of CreateOfferOrderWithArtwork
type EcommerceCreateOfferOrderWithArtworkPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure. If find_active_or_create is not false, it will
  # return existing pending/submitted order for current user if exists, otherwise
  # it will return newly created order
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of CreateOrderWithArtwork
input EcommerceCreateOrderWithArtworkInput {
  # Artwork Id
  artworkId: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # EditionSet Id
  editionSetId: String

  # Number of items in the line item
  quantity: Int
}

# Autogenerated return type of CreateOrderWithArtwork
type EcommerceCreateOrderWithArtworkPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

scalar EcommerceDate

scalar EcommerceDateTime

# Autogenerated input type of FulfillAtOnce
input EcommerceFulfillAtOnceInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillment: EcommerceFulfillmentAttributes!
  id: ID!
}

# Autogenerated return type of FulfillAtOnce
type EcommerceFulfillAtOncePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# A Fulfillment for an order
type EcommerceFulfillment {
  courier: String!
  createdAt: EcommerceDateTime!
  estimatedDelivery: EcommerceDate
  id: ID!
  notes: String
  trackingId: String
  updatedAt: EcommerceDateTime!
}

# Attributes of a Fulfillment
input EcommerceFulfillmentAttributes {
  courier: String!
  estimatedDelivery: EcommerceDate
  notes: String
  trackingId: String
}

# The connection type for Fulfillment.
type EcommerceFulfillmentConnection {
  # A list of edges.
  edges: [EcommerceFulfillmentEdge]

  # A list of nodes.
  nodes: [EcommerceFulfillment]

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
}

# An edge in a connection.
type EcommerceFulfillmentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceFulfillment
}

# A Line Item
type EcommerceLineItem {
  artworkId: String!
  artworkVersionId: String!
  commissionFeeCents: Int
  createdAt: EcommerceDateTime!
  editionSetId: String
  fulfillments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceFulfillmentConnection
  id: ID!
  listPriceCents: Int!
  order: EcommerceOrder!
  priceCents: Int! @deprecated(reason: \\"switch to use listPriceCents\\")
  quantity: Int!
  shippingTotalCents: Int
  updatedAt: EcommerceDateTime!
}

# The connection type for LineItem.
type EcommerceLineItemConnection {
  # A list of edges.
  edges: [EcommerceLineItemEdge]

  # A list of nodes.
  nodes: [EcommerceLineItem]

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
}

# An edge in a connection.
type EcommerceLineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceLineItem
}

# An Offer
type EcommerceOffer {
  amountCents: Int!
  buyerTotalCents: Int
  createdAt: EcommerceDateTime!
  creatorId: String!
  from: EcommerceOrderPartyUnion!
  fromParticipant: EcommerceOrderParticipantEnum
  id: ID!
  order: EcommerceOrder!
  respondsTo: EcommerceOffer
  shippingTotalCents: Int
  submittedAt: EcommerceDateTime
  taxTotalCents: Int
}

# The connection type for Offer.
type EcommerceOfferConnection {
  # A list of edges.
  edges: [EcommerceOfferEdge]

  # A list of nodes.
  nodes: [EcommerceOffer]

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
}

# An edge in a connection.
type EcommerceOfferEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceOffer
}

type EcommerceOfferOrder implements EcommerceOrder {
  awaitingResponseFrom: EcommerceOrderParticipantEnum
  buyer: EcommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  commissionRate: Float
  createdAt: EcommerceDateTime!
  creditCardId: String
  currencyCode: String!
  displayCommissionRate: String
  id: ID!

  # Item total in cents, for Offer Orders this field reflects current offer
  itemsTotalCents: Int
  lastApprovedAt: EcommerceDateTime

  # Last submitted offer
  lastOffer: EcommerceOffer
  lastSubmittedAt: EcommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceLineItemConnection
  mode: EcommerceOrderModeEnum
  myLastOffer: EcommerceOffer
  offers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int
    fromId: String
    fromType: String

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceOfferConnection
  requestedFulfillment: EcommerceRequestedFulfillmentUnion
  seller: EcommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: EcommerceOrderStateEnum!
  stateExpiresAt: EcommerceDateTime
  stateReason: String
  stateUpdatedAt: EcommerceDateTime
  taxTotalCents: Int
  totalListPriceCents: Int!
  transactionFeeCents: Int
  updatedAt: EcommerceDateTime!
}

# Order
interface EcommerceOrder {
  buyer: EcommerceOrderPartyUnion!
  buyerPhoneNumber: String
  buyerTotalCents: Int
  code: String!
  commissionFeeCents: Int
  commissionRate: Float
  createdAt: EcommerceDateTime!
  creditCardId: String
  currencyCode: String!
  displayCommissionRate: String
  id: ID!

  # Item total in cents, for Offer Orders this field reflects current offer
  itemsTotalCents: Int
  lastApprovedAt: EcommerceDateTime
  lastSubmittedAt: EcommerceDateTime
  lineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): EcommerceLineItemConnection
  mode: EcommerceOrderModeEnum
  requestedFulfillment: EcommerceRequestedFulfillmentUnion
  seller: EcommerceOrderPartyUnion!
  sellerTotalCents: Int
  shippingTotalCents: Int
  state: EcommerceOrderStateEnum!
  stateExpiresAt: EcommerceDateTime
  stateReason: String
  stateUpdatedAt: EcommerceDateTime
  taxTotalCents: Int
  totalListPriceCents: Int!
  transactionFeeCents: Int
  updatedAt: EcommerceDateTime!
}

# Fields to sort by
enum EcommerceOrderConnectionSortEnum {
  # Sort by the timestamp the state of the order expires at in ascending order
  STATE_EXPIRES_AT_ASC

  # Sort by the timestamp the state of the order expires at in descending order
  STATE_EXPIRES_AT_DESC

  # Sort by the timestamp the state of order was last updated in ascending order
  STATE_UPDATED_AT_ASC

  # Sort by the timestamp the state of order was last updated in descending order
  STATE_UPDATED_AT_DESC

  # Sort by the timestamp the order was last updated in ascending order
  UPDATED_AT_ASC

  # Sort by the timestamp the order was last updated in descending order
  UPDATED_AT_DESC
}

# The connection type for Order.
type EcommerceOrderConnectionWithTotalCount {
  # A list of edges.
  edges: [EcommerceOrderEdge]

  # A list of nodes.
  nodes: [EcommerceOrder]
  pageCursors: EcommercePageCursors

  # Information to aid in pagination.
  pageInfo: EcommercePageInfo!
  totalCount: Int
  totalPages: Int
}

# An edge in a connection.
type EcommerceOrderEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: EcommerceOrder
}

enum EcommerceOrderFulfillmentTypeEnum {
  # fulfillment type is: pickup
  PICKUP

  # fulfillment type is: ship
  SHIP
}

enum EcommerceOrderModeEnum {
  # Buy Order
  BUY

  # Offer Order
  OFFER
}

# Represents either a resolved Order or a potential failure
union EcommerceOrderOrFailureUnion = EcommerceOrderWithMutationFailure | EcommerceOrderWithMutationSuccess

enum EcommerceOrderParticipantEnum {
  # Participant on the buyer side
  BUYER

  # Participant on the seller side
  SELLER
}

# Represents either a partner or a user
union EcommerceOrderPartyUnion = EcommercePartner | EcommerceUser

enum EcommerceOrderStateEnum {
  # order is abandoned by buyer and never submitted
  ABANDONED

  # order is approved by seller
  APPROVED

  # order is canceled
  CANCELED

  # order is fulfilled by seller
  FULFILLED

  # order is still pending submission by buyer
  PENDING

  # order is refunded after being approved or fulfilled
  REFUNDED

  # order is submitted by buyer
  SUBMITTED
}

# An error response for changes to an order
type EcommerceOrderWithMutationFailure {
  error: EcommerceApplicationError!
}

# A successfully returned order type
type EcommerceOrderWithMutationSuccess {
  order: EcommerceOrder!
}

type EcommercePageCursor {
  # first cursor on the page
  cursor: String!

  # is this the current page?
  isCurrent: Boolean!

  # page number out of totalPages
  page: Int!
}

type EcommercePageCursors {
  around: [EcommercePageCursor!]!

  # optional, may be included in field around
  first: EcommercePageCursor

  # optional, may be included in field around
  last: EcommercePageCursor
  previous: EcommercePageCursor
}

# Information about pagination in a connection.
type EcommercePageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type EcommercePartner {
  id: String!
  type: String!
}

type EcommercePickup {
  fulfillmentType: String!
}

# Autogenerated input type of RejectOrder
input EcommerceRejectOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of RejectOrder
type EcommerceRejectOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Represents either a shipping information or pickup
union EcommerceRequestedFulfillmentUnion = EcommercePickup | EcommerceShip

# Autogenerated input type of SellerAcceptOffer
input EcommerceSellerAcceptOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SellerAcceptOffer
type EcommerceSellerAcceptOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SellerCounterOffer
input EcommerceSellerCounterOfferInput {
  amountCents: Int!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SellerCounterOffer
type EcommerceSellerCounterOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SellerRejectOffer
input EcommerceSellerRejectOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
  rejectReason: EcommerceCancelReasonTypeEnum
}

# Autogenerated return type of SellerRejectOffer
type EcommerceSellerRejectOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SetPayment
input EcommerceSetPaymentInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  creditCardId: String!
  id: ID!
}

# Autogenerated return type of SetPayment
type EcommerceSetPaymentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SetShipping
input EcommerceSetShippingInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  fulfillmentType: EcommerceOrderFulfillmentTypeEnum!
  id: ID!
  shipping: EcommerceShippingAttributes
}

# Autogenerated return type of SetShipping
type EcommerceSetShippingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

type EcommerceShip {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

# Shipping information
input EcommerceShippingAttributes {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String!
  postalCode: String
  region: String
}

# Autogenerated input type of SubmitOrder
input EcommerceSubmitOrderInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of SubmitOrder
type EcommerceSubmitOrderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SubmitOrderWithOffer
input EcommerceSubmitOrderWithOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SubmitOrderWithOffer
type EcommerceSubmitOrderWithOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

# Autogenerated input type of SubmitPendingOffer
input EcommerceSubmitPendingOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  offerId: ID!
}

# Autogenerated return type of SubmitPendingOffer
type EcommerceSubmitPendingOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A union of success/failure
  orderOrError: EcommerceOrderOrFailureUnion!
}

type EcommerceUser {
  id: String!
}

type Mutation {
  ecommerceAddInitialOfferToOrder(input: EcommerceAddInitialOfferToOrderInput!): EcommerceAddInitialOfferToOrderPayload
  ecommerceApproveOrder(input: EcommerceApproveOrderInput!): EcommerceApproveOrderPayload
  ecommerceBuyerAcceptOffer(input: EcommerceBuyerAcceptOfferInput!): EcommerceBuyerAcceptOfferPayload
  ecommerceBuyerCounterOffer(input: EcommerceBuyerCounterOfferInput!): EcommerceBuyerCounterOfferPayload
  ecommerceBuyerRejectOffer(input: EcommerceBuyerRejectOfferInput!): EcommerceBuyerRejectOfferPayload
  ecommerceConfirmPickup(input: EcommerceConfirmPickupInput!): EcommerceConfirmPickupPayload
  ecommerceCreateOfferOrderWithArtwork(input: EcommerceCreateOfferOrderWithArtworkInput!): EcommerceCreateOfferOrderWithArtworkPayload
  ecommerceCreateOrderWithArtwork(input: EcommerceCreateOrderWithArtworkInput!): EcommerceCreateOrderWithArtworkPayload

  # Fulfill an order with one Fulfillment, it sets this fulfillment to each line item in order
  ecommerceFulfillAtOnce(input: EcommerceFulfillAtOnceInput!): EcommerceFulfillAtOncePayload
  ecommerceRejectOrder(input: EcommerceRejectOrderInput!): EcommerceRejectOrderPayload
  ecommerceSellerAcceptOffer(input: EcommerceSellerAcceptOfferInput!): EcommerceSellerAcceptOfferPayload
  ecommerceSellerCounterOffer(input: EcommerceSellerCounterOfferInput!): EcommerceSellerCounterOfferPayload
  ecommerceSellerRejectOffer(input: EcommerceSellerRejectOfferInput!): EcommerceSellerRejectOfferPayload
  ecommerceSetPayment(input: EcommerceSetPaymentInput!): EcommerceSetPaymentPayload
  ecommerceSetShipping(input: EcommerceSetShippingInput!): EcommerceSetShippingPayload
  ecommerceSubmitOrder(input: EcommerceSubmitOrderInput!): EcommerceSubmitOrderPayload
  ecommerceSubmitOrderWithOffer(input: EcommerceSubmitOrderWithOfferInput!): EcommerceSubmitOrderWithOfferPayload
  ecommerceSubmitPendingOffer(input: EcommerceSubmitPendingOfferInput!): EcommerceSubmitPendingOfferPayload
}

type Query {
  ecommerceLineItems(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    artworkId: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    editionSetId: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderStates: [EcommerceOrderStateEnum!]
  ): EcommerceLineItemConnection

  # Find an order by ID
  ecommerceOrder(code: String, id: ID): EcommerceOrder

  # Find list of orders
  ecommerceOrders(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String
    buyerId: String
    buyerType: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    mode: EcommerceOrderModeEnum
    sellerId: String
    sellerType: String
    sort: EcommerceOrderConnectionSortEnum
    state: EcommerceOrderStateEnum
  ): EcommerceOrderConnectionWithTotalCount
}
"
`;
