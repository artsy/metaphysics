import { GraphQLString, GraphQLFloat, GraphQLNonNull } from "graphql"
import { mutationWithClientMutationId } from "graphql-relay"

import { BidderPositionResultType } from "../types/bidder_position_result"
import { bidderPositionMessages } from "./bidder_position_messages"
import config from "config"
import { ResolverContext } from "types/graphql"
import { last } from "lodash"

const { PREDICTION_ENDPOINT } = config

// @ts-ignore
export const BidderPositionMutation = mutationWithClientMutationId<
  any,
  any,
  ResolverContext
>({
  name: "BidderPosition",
  description: "Creates a bidder position",
  inputFields: {
    saleID: {
      type: new GraphQLNonNull(GraphQLString),
    },
    artworkID: {
      type: new GraphQLNonNull(GraphQLString),
    },
    maxBidAmountCents: {
      type: new GraphQLNonNull(GraphQLFloat),
    },
  } /*
  FIXME: Generated by the snake_case to camelCase codemod.
         Either use this to fix inputs and/or remove this comment.
  {
    const {
      saleID,
      artworkID,
      maxBidAmountCents
    } = newFields;
    const oldFields = {
      saleID: sale_id,
      artworkID: artwork_id,
      maxBidAmountCents: max_bid_amount_cents
    };
  }
  */,
  outputFields: {
    result: {
      type: BidderPositionResultType,
      resolve: (result) => result,
    },
  },
  mutateAndGetPayload: (
    {
      saleID: sale_id,
      artworkID: artwork_id,
      maxBidAmountCents: max_bid_amount_cents,
    },
    { createBidderPositionLoader }
  ) => {
    if (!createBidderPositionLoader) {
      return new Error("You need to be signed in to perform this action")
    }
    return createBidderPositionLoader({
      sale_id,
      artwork_id,
      max_bid_amount_cents,
    })
      .then((position) => {
        return {
          status: "SUCCESS",
          position,
        }
      })
      .catch((error) => {
        const rawError = error?.body?.message ?? error?.body?.error

        try {
          const message = bidderPositionMessages.find(
            (bidderPositionMessage) => {
              return rawError.startsWith(bidderPositionMessage.message)
            }
          )

          if (!message) {
            return last(bidderPositionMessages)
          }

          const formattedError = {
            status: message.status,
            messageHeader: message.header,
            messageDescriptionMD: message.getDescription({
              liveAuctionUrl: `${PREDICTION_ENDPOINT}/${sale_id}`,
            }),
            rawError,
          }

          return formattedError
        } catch (error) {
          console.error(error)

          return {
            ...last(bidderPositionMessages),
            rawError,
          }
        }
      })
  },
})
