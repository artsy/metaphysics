/**
 * FIXME: Deprecated. Remove once Convection stitching settles for a bit
 */

import { mutationWithClientMutationId, MutationConfig } from "graphql-relay"
import {
  SubmissionType,
  SubmissionCategoryAggregation,
  SubmissionDimensionAggregation,
  SubmissionStateAggregation,
} from "./submission"
import { ResolverContext } from "types/graphql"
import {
  GraphQLNonNull,
  GraphQLString,
  GraphQLBoolean,
  GraphQLInt,
  GraphQLID,
} from "graphql"

export const config: MutationConfig<any, any, ResolverContext> = {
  name: "UpdateSubmissionMutation",
  description: "Update a consignment using Convection",
  inputFields: {
    id: {
      description: "The GUID for the submission",
      type: new GraphQLNonNull(GraphQLString),
    },
    artistID: {
      description: "The gravity ID for an Artist",
      type: new GraphQLNonNull(GraphQLString),
    },
    authenticityCertificate: {
      description: "Does the artwork come with an certificate of authenticity?",
      type: GraphQLBoolean,
    },
    category: {
      description: "The set in which to put the work",
      type: SubmissionCategoryAggregation,
    },
    depth: {
      description: "The depth of the work",
      type: GraphQLString,
    },
    dimensionsMetric: {
      description: "A string, either CM or IN",
      type: SubmissionDimensionAggregation,
    },
    edition: {
      description: "Is the work a part of an edition",
      type: GraphQLBoolean,
    },
    editionNumber: {
      description: "The number of the individual work if in a set",
      type: GraphQLString,
    },
    editionSize: {
      description: "The whole size of the set of works",
      type: GraphQLInt,
    },
    height: {
      description: "The height of the work",
      type: GraphQLString,
    },
    locationCity: {
      description: "The city where the work currently resides",
      type: GraphQLString,
    },
    locationCountry: {
      description: "The country where the work currently resides",
      type: GraphQLString,
    },
    locationState: {
      description: "The state where the work currently resides",
      type: GraphQLString,
    },
    medium: {
      description: "The materials in which the work is created",
      type: GraphQLString,
    },
    provenance: {
      description: "The history of an work",
      type: GraphQLString,
    },
    signature: {
      description: "Is this work signed?",
      type: GraphQLBoolean,
    },
    title: {
      description: "The name of the work",
      type: GraphQLString,
    },
    state: {
      description: "The internal state of the work, e.g. draft/submitted",
      type: SubmissionStateAggregation,
    },
    width: {
      description: "The width of the work",
      type: GraphQLString,
    },
    year: {
      description: "The year the work was created",
      type: GraphQLString,
    },
    userID: {
      description: "The user who submitted the work",
      type: GraphQLID,
    },
  } /*
  FIXME: Generated by the snake_case to camelCase codemod.
         Either use this to fix inputs and/or remove this comment.
  {
    const {
      artistID,
      authenticityCertificate,
      dimensionsMetric,
      editionNumber,
      editionSize,
      locationCity,
      locationCountry,
      locationState,
      userID,
      ..._newFields
    } = newFields;
    const oldFields = {
      artistID: artist_id,
      authenticityCertificate: authenticity_certificate,
      dimensionsMetric: dimensions_metric,
      editionNumber: edition_number,
      editionSize: edition_size,
      locationCity: location_city,
      locationCountry: location_country,
      locationState: location_state,
      userID: user_id,
      ..._newFields
    };
  }
  */,
  outputFields: {
    consignmentSubmission: {
      type: SubmissionType,
      resolve: submission => submission,
    },
  },
  mutateAndGetPayload: (
    {
      artistID,
      authenticityCertificate,
      dimensionsMetric,
      editionNumber,
      editionSize,
      locationCity,
      locationCountry,
      locationState,
      userID,
      ..._submission
    },
    { submissionUpdateLoader }
  ) => {
    const submission: any = {
      artist_id: artistID,
      authenticity_certificate: authenticityCertificate,
      dimensions_metric: dimensionsMetric,
      edition_number: editionNumber,
      edition_size: editionSize,
      location_city: locationCity,
      location_country: locationCountry,
      location_state: locationState,
      user_id: userID,
      ..._submission,
    }
    if (!submissionUpdateLoader) return null
    return submissionUpdateLoader(submission.id, submission)
  },
}

export default mutationWithClientMutationId(config)
