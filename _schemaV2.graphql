directive @optionalField on FIELD

directive @principalField on FIELD

type AccountMutationFailure {
  mutationError: GravityMutationError
}

type AccountMutationSuccess {
  success: Boolean
}

union AccountMutationType = AccountMutationFailure | AccountMutationSuccess

type AccountRequest {
  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  notes: String
}

type addOrderedSetItemFailure {
  mutationError: GravityMutationError
}

input addOrderedSetItemMutationInput {
  clientMutationId: String
  geminiToken: String
  id: String!
  itemId: String!
  position: Int
}

type addOrderedSetItemMutationPayload {
  # On success: the updated parent set or the set item added.
  addOrderedSetItemResponseOrError: addOrderedSetItemResponseOrError
  clientMutationId: String
}

union addOrderedSetItemResponseOrError =
    addOrderedSetItemFailure
  | addOrderedSetItemSuccess

type addOrderedSetItemSuccess {
  set: OrderedSet
  setItem: OrderedSetItem
}

type addUserRoleFailure {
  mutationError: GravityMutationError
}

input addUserRoleMutationInput {
  clientMutationId: String
  id: String!
  role_type: String!
}

type addUserRoleMutationPayload {
  clientMutationId: String

  # On success: the user
  userOrError: addUserRoleResponseOrError
}

union addUserRoleResponseOrError = addUserRoleFailure | addUserRoleSuccess

type addUserRoleSuccess {
  user: User
}

type Admin {
  # A list of feature flags
  featureFlags(
    # The sort order of the results
    sortBy: FeatureFlagsSortBy = NAME
  ): [FeatureFlag]
}

input AdminCreateFeatureFlagInput {
  clientMutationId: String
  description: String = ""
  impressionData: Boolean = false
  name: String
  strategy: FeatureFlagStrategyInput!
  type: FeatureFlagToggleType!
  variants: [FeatureFlagVariantInputName]
}

type AdminCreateFeatureFlagPayload {
  clientMutationId: String

  # A list of feature flags
  featureFlags(
    # The sort order of the results
    sortBy: FeatureFlagsSortBy = NAME
  ): [FeatureFlag]
}

input AdminDeleteFeatureFlagInput {
  clientMutationId: String
  name: String
}

type AdminDeleteFeatureFlagPayload {
  clientMutationId: String

  # A list of feature flags
  featureFlags(
    # The sort order of the results
    sortBy: FeatureFlagsSortBy = NAME
  ): [FeatureFlag]
  success: Boolean
}

enum AdminToggleFeatureFlagEnvironment {
  DEVELOPMENT
  PRODUCTION
}

input AdminToggleFeatureFlagInput {
  clientMutationId: String
  enabled: Boolean!
  environment: AdminToggleFeatureFlagEnvironment!
  name: String!
}

type AdminToggleFeatureFlagPayload {
  clientMutationId: String

  # A list of feature flags
  featureFlags(
    # The sort order of the results
    sortBy: FeatureFlagsSortBy = NAME
  ): [FeatureFlag]
  success: Boolean
}

input AdminUpdateFeatureFlagInput {
  clientMutationId: String
  description: String
  impressionData: Boolean = false
  name: String!
  type: String = "release"
}

type AdminUpdateFeatureFlagPayload {
  clientMutationId: String

  # A list of feature flags
  featureFlags(
    # The sort order of the results
    sortBy: FeatureFlagsSortBy = NAME
  ): [FeatureFlag]
}

type AdvisoryOpportunity {
  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  message: String
}

# One item in an aggregation
type AggregationCount {
  count: Int!
  name: String!
  value: String!
}

type Algolia {
  apiKey: String! @deprecated(reason: "Algolia search is no longer supported")
  appID: String! @deprecated(reason: "Algolia search is no longer supported")
  indices: [AlgoliaIndex!]!
    @deprecated(reason: "Algolia search is no longer supported")
}

type AlgoliaIndex {
  displayName: String!
    @deprecated(reason: "Algolia search is no longer supported")
  key: String! @deprecated(reason: "Algolia search is no longer supported")
  name: String! @deprecated(reason: "Algolia search is no longer supported")
}

type Article implements Node {
  # Maps to the "Primary Author" field in Positron. Ultimately this is only supposed to control the article slug
  author: Author @deprecated(reason: "Use `byline` or `authors` instead")
  authors: [Author!]!

  # The byline for the article. Defaults to "Artsy Editors" if no authors are present.
  byline: String
  cached: Int
  channel: Channel
  channelArticles(
    # Number of articles to return
    size: Int = 12
  ): [Article!]!
  channelID: String @deprecated(reason: "Use `channel` instead")
  contributingAuthors: [Author]
    @deprecated(reason: "Use `byline` or `authors` instead")
  description: String
  hero: ArticleHero
  href: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  keywords: [String!]!
  layout: ArticleLayout!

  # Classic layout articles may have a lead paragraph. Returns HTML.
  leadParagraph: String
  media: ArticleMedia
  newsSource: ArticleNewsSource
  postscript: String
  publishedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  relatedArticles(
    # Enables configuration for loading the type of articles that sit in between full-page articles
    inVertical: Boolean = false

    # Number of articles to return
    size: Int = 3
  ): [Article!]!

  # Description to favor for meta description
  searchDescription: String

  # Title to favor for document titles
  searchTitle: String
  sections: [ArticleSections!]!
  series: ArticleSeries
  seriesArticle: Article
  slug: String
  sponsor: ArticleSponsor
  thumbnailImage: Image
  thumbnailTeaser: String

  # Title to favor for links to article
  thumbnailTitle: String
  tier: Int
  title: String
  updatedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  vertical: String
}

# A connection to a list of items.
type ArticleConnection {
  # A list of edges.
  edges: [ArticleEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type ArticleEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Article
}

type ArticleFeatureSection {
  # Only YouTube and Vimeo are supported
  embed(autoPlay: Boolean = false): String
  image: Image
  layout: ArticleFeatureSectionType!
  media: String
  title: String
}

enum ArticleFeatureSectionType {
  BASIC
  FULLSCREEN
  SPLIT
  TEXT
}

union ArticleHero = ArticleFeatureSection

type ArticleImageSection {
  caption: String
  id: ID!
  image: Image
  layout: String
}

enum ArticleLayout {
  CLASSIC
  FEATURE
  NEWS
  SERIES
  STANDARD
  VIDEO
}

type ArticleMedia {
  coverImage: Image
  credits: String
  description: String
  duration: String
  releaseDate(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  url: String
}

type ArticleNewsSource {
  title: String
  url: String
}

type ArticleSectionCallout {
  article: String
  hideImage: String
  text: String
  thumbnailUrl: String
  topStories: String
  type: String
}

type ArticleSectionEmbed {
  height: Int
  layout: ArticleSectionEmbedLayout
  mobileHeight: Int
  url: String
}

enum ArticleSectionEmbedLayout {
  COLUMN_WIDTH
  FILLWIDTH
  OVERFLOW
  OVERFLOW_FILLWIDTH
}

type ArticleSectionImageCollection {
  figures: [ArticleSectionImageCollectionFigure!]!
  layout: ArticleSectionImageCollectionLayout!
}

union ArticleSectionImageCollectionFigure =
    ArticleImageSection
  | ArticleUnpublishedArtwork
  | Artwork

enum ArticleSectionImageCollectionLayout {
  COLUMN_WIDTH
  FILLWIDTH
  OVERFLOW_FILLWIDTH
}

type ArticleSectionImageSet {
  counts: ArticleSectionImageSetCounts!
  cover: ArticleSectionImageSetFigure
  figures: [ArticleSectionImageSetFigure!]!
  layout: ArticleSectionImageSetLayout!
  title: String
}

type ArticleSectionImageSetCounts {
  figures: Int!
}

union ArticleSectionImageSetFigure = ArticleImageSection | Artwork

enum ArticleSectionImageSetLayout {
  FULL
  MINI
}

union ArticleSections =
    ArticleSectionCallout
  | ArticleSectionEmbed
  | ArticleSectionImageCollection
  | ArticleSectionImageSet
  | ArticleSectionSocialEmbed
  | ArticleSectionText
  | ArticleSectionVideo

type ArticleSectionSocialEmbed {
  # oEmbed HTML response. Only Twitter is currently supported.
  embed: String
  url: String
}

type ArticleSectionText {
  body: String
  layout: String
}

type ArticleSectionVideo {
  backgroundColor: String
  caption: String

  # Only YouTube and Vimeo are supported
  embed(autoPlay: Boolean = false): String
  image: Image
  layout: ArticleSectionVideoLayout
  url: String!
}

enum ArticleSectionVideoLayout {
  COLUMN_WIDTH
  FILLWIDTH
  OVERFLOW_FILLWIDTH
}

type ArticleSeries {
  # HTML string describing the series
  description: String
}

enum ArticleSorts {
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
}

type ArticleSponsor {
  description: String
  partnerCondensedLogo: String
  partnerDarkLogo: String
  partnerLightLogo: String
  partnerLogoLink: String
  pixelTrackingCode: String
  subTitle: String
}

type ArticleUnpublishedArtwork {
  artist: ArticleUnpublishedArtworkArtist
  artists: [ArticleUnpublishedArtworkArtist!]!
  credit: String
  date: String

  # A globally unique ID.
  id: ID!
  image: Image

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  partner: ArticleUnpublishedArtworkPartner

  # A slug ID.
  slug: ID!
  title: String
}

type ArticleUnpublishedArtworkArtist {
  name: String
  slug: String
}

type ArticleUnpublishedArtworkPartner {
  name: String
  slug: String
}

type Artist implements EntityWithFilterArtworksConnectionInterface & Node & Searchable {
  alternateNames: [String]
  articlesConnection(
    after: String
    before: String
    first: Int

    # Get only articles with 'standard', 'feature', 'series' or 'video' layouts.
    inEditorialFeed: Boolean = false
    last: Int

    # DEPRECATION REASON: Use `size` instead
    limit: Int
    page: Int
    size: Int
    sort: ArticleSorts
  ): ArticleConnection
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response.
    exclude: [String]
    filter: [ArtistArtworksFilters]
    first: Int
    last: Int
    published: Boolean = true
    sort: ArtworkSorts
  ): ArtworkConnection
  auctionResultsConnection(
    after: String

    # List of aggregations for auction results
    aggregations: [AuctionResultsAggregation]

    # Allow auction results with empty created date values
    allowEmptyCreatedDates: Boolean = true

    # Include auction results with unspecified created dates
    allowUnspecifiedSaleDates: Boolean = true
    before: String

    # Filter auction results by category (medium)
    categories: [String]

    # Currency code
    currency: String

    # Filter auction results by earliest created at year
    earliestCreatedYear: Int
    first: Int

    # Includes auction results with suitable estimate ranges
    includeEstimateRange: Boolean = false

    # Includes auction results without price
    includeUnknownPrices: Boolean = true

    # Filter by artwork title or description keyword search
    keyword: String
    last: Int

    # Filter auction results by latest created at year
    latestCreatedYear: Int

    # Filter auction results by organizations
    organizations: [String]
    page: Int

    # Filter auction results by price
    priceRange: String

    # When true, will only return records for allowed artists.
    recordsTrusted: Boolean = false

    # Filter auction results by end sale date year
    saleEndYear: Int

    # Filter auction results by start sale end date
    saleStartYear: Int
    size: Int

    # Filter auction results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: AuctionResultSorts

    # State of the returned auction results (can be past, upcoming, or all)
    state: AuctionResultsState = ALL
  ): AuctionResultConnection

  # In applicable contexts, this is what the artist (as a suggestion) is based on.
  basedOn: Artist
  bio: String

  # The Artist biography article written by Artsy
  biography: Article
  biographyBlurb(
    format: Format

    # If true, will return featured bio over Artsy one.
    partnerBio: Boolean = true
  ): ArtistBlurb
  birthday: String
  blurb(format: Format): String
  cached: Int
  carousel: ArtistCarousel
  collections: [String]
  contemporary(
    excludeArtistsWithoutArtworks: Boolean = true

    # The number of Artists to return
    size: Int
  ): [Artist]
  counts: ArtistCounts
  coverArtwork: Artwork
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  criticallyAcclaimed: Boolean
  currentEvent: CurrentEvent
  deathday: String
  disablePriceContext: Boolean
  displayLabel: String
  displayName: String
  duplicates: [Artist]

  # Custom-sorted list of shows for an artist, in order of significance.
  exhibitionHighlights(
    # The number of Shows to return
    size: Int = 5
  ): [Show]

  # Artworks Elastic Search results
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection
  first: String

  # A string showing the total number of works and those for sale
  formattedArtworksCount: String

  # A string of the form "Nationality, Birthday (or Birthday-Deathday)"
  formattedNationalityAndBirthday: String
  gender: String

  # A list of genes associated with an artist
  genes: [Gene]
  groupIndicator: ArtistGroupIndicator
  hasMetadata: Boolean
  highlights: ArtistHighlights
  hometown: String
  href: String

  # A globally unique ID.
  id: ID!
  image: Image
  imageUrl: String
  initials(length: Int = 3): String
  insights(
    # The specific insights to return.
    kind: [ArtistInsightKind] = [
      HIGH_AUCTION_RECORD
      ACTIVE_SECONDARY_MARKET
      CRITICALLY_ACCLAIMED
      RECENT_CAREER_EVENT
      ARTSY_VANGUARD_YEAR
      CURATORS_PICK_EMERGING
      TRENDING_NOW
      GAINING_FOLLOWERS
      SOLO_SHOW
      GROUP_SHOW
      BIENNIAL
      PRIVATE_COLLECTIONS
      COLLECTED
      REVIEWED
      AWARDS
      RESIDENCIES
    ]
  ): [ArtistInsight!]!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isConsignable: Boolean

  # Only specific Artists should show a link to auction results.
  isDisplayAuctionLink: Boolean
  isFollowed: Boolean

  # Whether the artist has been created by a user.
  isPersonalArtist: Boolean
  isPublic: Boolean!
  isShareable: Boolean
  last: String
  location: String
  meta(page: ArtistPage = ABOUT): ArtistMeta!
  middle: String
  name: String
  nationality: String
  partnerArtists(
    # The number of PartnerArtists to return
    size: Int
  ): [PartnerArtist]
  partnersConnection(
    after: String
    before: String
    first: Int
    last: Int
    partnerCategory: [String]
    representedBy: Boolean
  ): PartnerArtistConnection
  related: ArtistRelatedData
  sales(
    isAuction: Boolean
    live: Boolean

    # The number of Sales to return
    size: Int
    sort: SaleSorts
  ): [Sale]
  showsConnection(
    active: Boolean
    after: String
    atAFair: Boolean
    before: String
    first: Int
    isReference: Boolean
    last: Int
    page: Int

    # The number of PartnerShows to return
    size: Int
    soloShow: Boolean
    sort: ShowSorts
    status: String
    topTier: Boolean
    visibleToPublic: Boolean
  ): ShowConnection

  # A slug ID.
  slug: ID!

  # Use this attribute to sort by when sorting a collection of Artists
  sortableID: String
  statuses: ArtistStatuses
  targetSupply: ArtistTargetSupply!
  vanguardYear: String
  verifiedRepresentatives: [VerifiedRepresentative!]!
  years: String
}

type ArtistArtworkGrid implements ArtworkContextGrid {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

enum ArtistArtworksFilters {
  IS_FOR_SALE
  IS_NOT_FOR_SALE
}

type ArtistBlurb {
  credit: String
  partner: Partner

  # The partner id of the partner who submitted the featured bio.
  partnerID: String
    @deprecated(
      reason: "No longer used as the partner field contains the partner.id"
    )
  text: String
}

type ArtistCarousel {
  images: [Image]
}

# A connection to a list of items.
type ArtistConnection {
  # A list of edges.
  edges: [ArtistEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtistCounts {
  articles: Int
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  auctionArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  auctionResults: Int @deprecated(reason: "Favor `statuses#auctionLots`")
  duplicates: Int
  ecommerceArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  follows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  forSaleArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  hasMakeOfferArtworks: Boolean
  partnerShows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  relatedArtists: Int
}

# An edge in a connection.
type ArtistEdge {
  # When a relevant `artworksCount` field exists to augment a connection
  artworksCount: Int

  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artist
}

type ArtistGroup {
  # Artists sorted by last name
  items: [Artist]

  # Letter artists group belongs to
  letter: String
}

enum ArtistGroupIndicator {
  DUO
  GROUP
  INDIVIDUAL
  N_A
}

type ArtistHighlights {
  partnersConnection(
    after: String
    before: String
    displayOnPartnerProfile: Boolean
    first: Int
    last: Int
    partnerCategory: [String]
    representedBy: Boolean
  ): PartnerArtistConnection
}

type ArtistInsight {
  artist: Artist

  # Number of entities relevant to the insight.
  count: Int!
  description(format: Format = PLAIN): String

  # List of entities relevant to the insight.
  entities: [String!]!

  # The type of insight.
  kind: ArtistInsightKind

  # Label to use when displaying the insight.
  label: String!

  # The type of insight.
  type: String! @deprecated(reason: "Use `kind` instead.")
}

enum ArtistInsightKind {
  ACTIVE_SECONDARY_MARKET
  ARTSY_VANGUARD_YEAR
  AWARDS
  BIENNIAL
  COLLECTED
  CRITICALLY_ACCLAIMED
  CURATORS_PICK_EMERGING
  GAINING_FOLLOWERS
  GROUP_SHOW
  HIGH_AUCTION_RECORD
  PRIVATE_COLLECTIONS
  RECENT_CAREER_EVENT
  RESIDENCIES
  REVIEWED
  SOLO_SHOW
  TRENDING_NOW
}

type ArtistInsightsCount {
  activeSecondaryMarketCount: Int!
  biennialCount: Int!
  collectedCount: Int!
  groupShowCount: Int!
  reviewedCount: Int!
  soloShowCount: Int!
}

type ArtistMeta {
  description: String!
  title: String!
}

enum ArtistPage {
  ABOUT
  ARTIST_SERIES
  ARTWORKS
  AUCTION_RESULTS
}

# A connection to a list of items.
type ArtistPartnerConnection {
  # A list of edges.
  edges: [ArtistPartnerEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type ArtistPartnerEdge {
  artist: Artist
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: PartnerArtistArtworksSort
  ): ArtworkConnection
  biography: String
  biographyBlurb(format: Format): PartnerArtistBlurb
  counts: PartnerArtistCounts

  # A cursor for use in pagination
  cursor: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  isDisplayOnPartnerProfile: Boolean
  isUseDefaultBiography: Boolean

  # The item at the end of the edge
  node: Artist
  partner: Partner
  representedBy: Boolean
  sortableID: String
}

type ArtistRelatedData {
  artistsConnection(
    after: String
    before: String
    excludeArtistsWithoutArtworks: Boolean = true
    first: Int
    kind: RelatedArtistsKind
    last: Int
    minForsaleArtworks: Int
  ): ArtistConnection
  genes(after: String, before: String, first: Int, last: Int): GeneConnection

  # A list of the current user’s suggested artists, based on a single artist
  suggestedConnection(
    after: String
    before: String

    # Exclude these ids from results, may result in all artists being excluded.
    excludeArtistIDs: [String]

    # Exclude artists without any artworks
    excludeArtistsWithoutArtworks: Boolean

    # Exclude artists without for sale works
    excludeArtistsWithoutForsaleArtworks: Boolean

    # Exclude artists the user already follows
    excludeFollowedArtists: Boolean
    first: Int

    # Include featured artists if no results are found
    includeFallbackArtists: Boolean
    last: Int
  ): ArtistConnection
}

enum ArtistSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
  TRENDING_DESC
}

type ArtistStatuses {
  articles: Boolean
  artists: Boolean
  artworks: Boolean
  auctionLots: Boolean
  biography: Boolean
  contemporary: Boolean
  cv(
    # Suppress the cv tab when artist show count is less than this.
    minShowCount: Int = 15
  ): Boolean
  shows: Boolean
}

type ArtistTargetSupply {
  # True if an artist is in the microfunnel list.
  isInMicrofunnel: Boolean

  # True if an artist is a P1 artist.
  isP1: Boolean @deprecated(reason: "Use \"priority\" field instead.")

  # True if artist is in target supply list.
  isTargetSupply: Boolean
  microfunnel: ArtistTargetSupplyMicrofunnel
  priority: ArtistTargetSupplyPriority
  type: ArtistTargetSupplyType
}

type ArtistTargetSupplyMicrofunnel {
  # A list of recently sold artworks.
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int

    # Randomize the order of artworks for display purposes.
    randomize: Boolean
  ): ArtworkConnection
  metadata: TargetSupplyMicrofunnelMetadata
}

enum ArtistTargetSupplyPriority {
  P1
  P2
}

enum ArtistTargetSupplyType {
  BLUE_CHIP
  CRITICALLY_ACCLAIMED
  NEW_AND_NOTEWORTHY
  STREET_AND_URBAN
  TRENDING_EMERGING
  ULTRA_HIGH_DEMAND
}

type Artwork implements Node & Searchable & Sellable {
  additionalInformation(format: Format): String
  artaShippingEnabled: Boolean
    @deprecated(
      reason: "Prefer to use `processWithArtsyShippingDomestic`. [Will be removed in v2]"
    )
  articles(size: Int): [Article]
  artist(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): Artist
  artistNames: String
  artists(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): [Artist]
  artsyShippingDomestic: Boolean
  artsyShippingInternational: Boolean

  # Represents the location of the artwork for "My Collection" artworks
  artworkLocation: String
    @deprecated(reason: "Please use `collectorLocation` instead")

  # Represents the "**classification**" of an artwork, such as _limited edition_
  attributionClass: AttributionClass
  availability: String
  cached: Int

  # Can a user request a lot conditions report for this artwork?
  canRequestLotConditionsReport: Boolean

  # Represents the "**medium type**", such as _Painting_. (This field is also
  # commonly referred to as just "medium", but should not be confused with the
  # artwork attribute called `medium`.)
  category: String @deprecated(reason: "Prefer to use `mediumType`.")

  # Returns the display label and detail when artwork has a certificate of authenticity
  certificateOfAuthenticity: ArtworkInfoRow
  collectingInstitution: String
  collectionsConnection(
    after: String
    before: String
    default: Boolean
    first: Int
    last: Int
    page: Int
    saves: Boolean
    size: Int
    sort: CollectionSorts
  ): CollectionsConnection

  # The location of the artwork in My Collection
  collectorLocation: MyLocation

  # Comparable auction results
  comparableAuctionResults(
    after: String
    before: String
    first: Int
    last: Int
  ): AuctionResultConnection
  conditionDescription: ArtworkInfoRow

  # Notes by a partner or MyCollection user on the artwork, can only be accessed by partner or the user that owns the artwork
  confidentialNotes: String
  consignmentSubmission: ArtworkConsignmentSubmission
  contactLabel: String

  # Pre-filled inquiry text
  contactMessage: String

  # Returns the associated Fair/Sale/Show
  context: ArtworkContext
  contextGrids(
    # Whether to include the `RelatedArtworksGrid` module. Defaults to `true`; preferred behavior is to opt out with `false`.
    includeRelatedArtworks: Boolean! = true
  ): [ArtworkContextGrid]

  # The currency code used to pay for the artwork
  costCurrencyCode: String

  # The amount paid for the artwork, in cents
  costMinor: Int
  culturalMaker: String
  date: String

  # The depth as expressed by the original input metric
  depth: String
  description(format: Format): String
  dimensions: dimensions
  displayLabel: String
  displayPriceRange: Boolean

  # Domestic shipping fee.
  domesticShippingFee: Money
  dominantColors: [String!]!
  downloadableImageUrl: String
  editionNumber: String
  editionOf: String
  editionSet(id: String!): EditionSet
  editionSets(sort: EditionSetSorts): [EditionSet]
  editionSize: String

  # Returns an HTML string representing the embedded content (video)
  embed(autoplay: Boolean = false, height: Int = 450, width: Int = 853): String

  # Flags if artwork located in one of EU local shipping countries.
  euShippingOrigin: Boolean
  exhibitionHistory(format: Format): String
  fair: Fair

  # A list of images and videos for the artwork
  figures(
    # Include all images, even if they are not ready or processing failed.
    includeAll: Boolean
  ): [ArtworkFigures!]!

  # Formatted artwork metadata, including artist, title, date and partner; e.g., 'Andy Warhol, Truck, 1980, Westward Gallery'.
  formattedMetadata: String
  framed: ArtworkInfoRow

  # Returns true when artwork has a certificate of authenticity
  hasCertificateOfAuthenticity: Boolean
  hasMarketPriceInsights: Boolean

  # Whether a request for price estimate has been submitted for this artwork
  hasPriceEstimateRequest: Boolean

  # The height as expressed by the original input metric
  height: String

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  heightCm: Float

  # Returns the highlighted shows and articles
  highlights: [ArtworkHighlight]
  href: String

  # A globally unique ID.
  id: ID!
  image(
    # Show all images, even if they are not ready or processing failed.
    includeAll: Boolean
    size: Int
  ): Image
  imageRights: String
  images(
    # Show all images, even if they are not ready or processing failed.
    includeAll: Boolean
    size: Int
  ): [Image]
  imageTitle: String
  imageUrl: String

  # Represents the import source of the artwork
  importSource: ArtworkImportSource

  # Structured questions a collector can inquire on about this work
  inquiryQuestions: [InquiryQuestion]

  # Price for internal partner display, requires partner access
  internalDisplayPrice: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # International shipping fee.
  internationalShippingFee: Money

  # Private text field for partner use
  inventoryId: String

  # Whether a work can be purchased through e-commerce
  isAcquireable: Boolean

  # Is this artwork part of an auction that is currently running?
  isBiddable: Boolean

  # When in an auction, can the work be bought immediately
  isBuyNowable: Boolean
  isComparableWithAuctionResults: Boolean
  isDisliked: Boolean!
  isDownloadable: Boolean
  isEdition: Boolean

  # Artwork is eligible for the Artsy Guarantee
  isEligibleForArtsyGuarantee: Boolean!

  # Artwork is eligible for on-platform transaction
  isEligibleForOnPlatformTransaction: Boolean!

  # Artwork meets minimum metadata criteria to have an alert created from it
  isEligibleToCreateAlert: Boolean!
  isEmbeddableVideo: Boolean
  isForSale: Boolean
  isHangable: Boolean

  # Is this artwork part of an auction?
  isInAuction: Boolean

  # Do we want to encourage inquiries on this work?
  isInquireable: Boolean

  # Is this artwork part of a current show
  isInShow: Boolean
  isNotForSale: String

  # Whether a user can make an offer on a work
  isOfferable: Boolean

  # Whether a user can make an offer on the work through inquiry
  isOfferableFromInquiry: Boolean
  isOnHold: String
  isPriceEstimateRequestable: Boolean
  isPriceHidden: Boolean
  isPriceRange: Boolean
  isSaved: Boolean

  # Checks if artwork is saved to user's lists
  isSavedToList(default: Boolean = false, saves: Boolean = true): Boolean!

  # Should the video be used as the cover image
  isSetVideoAsCover: Boolean
  isShareable: Boolean
  isSold: Boolean
  isUnique: Boolean
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
  listPrice: ListPrice
  literature(format: Format): String

  # Represents partner's location
  location: Location
  manufacturer(format: Format): String
  marketPriceInsights: ArtworkPriceInsights

  # Represents the **materials** used in this work, such as _oil and acrylic on
  # canvas_. (This should not be confused with the artwork attribute called
  # `category`, which is commonly referred to as "medium" or "medium type")
  medium: String

  # Represents the "**medium type**", such as _Painting_. (This field is also
  # commonly referred to as just "medium", but should not be confused with the
  # artwork attribute called `medium`.)
  mediumType: ArtworkMedium
  meta: ArtworkMeta

  # The unit of length of the artwork, expressed in `in` or `cm`
  metric: String
  myLotStanding(live: Boolean = null): [LotStanding!]

  # Is this work only available for shipping domestically?
  onlyShipsDomestically: Boolean
  partner(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): Partner
  pickupAvailable: Boolean
  price: String
  priceCurrency: String
  priceIncludesTax: Boolean
  priceIncludesTaxDisplay: String

  # The price paid for the artwork in a user's 'my collection'
  pricePaid: Money

  # Returns true if this work is eligible to be automatically opted into Artsy Domestic Shipping
  processWithArtsyShippingDomestic: Boolean
  provenance(format: Format): String

  # Whether this artwork is published or not
  published: Boolean!
  publisher(format: Format): String

  # Price which an artwork was sold for. This generally only applies to artworks
  # in the target supply microfunnel and (currently) queries against hardcoded
  # spreadsheet data.
  realizedPrice: String
  realizedToEstimate: String
  related(size: Int): [Artwork]
  sale: Sale
  saleArtwork(saleID: String = null): SaleArtwork
  saleMessage: String

  # Schema related to saved searches based on this artwork
  savedSearch: ArtworkSavedSearch
  series(format: Format): String

  # The country an artwork will be shipped from.
  shippingCountry: String

  # The string that describes domestic and international shipping.
  shippingInfo: String

  # Minimal location information describing from where artwork will be shipped.
  shippingOrigin: String

  # Is this work available for shipping only within the Continental US?
  shipsToContinentalUSOnly: Boolean
    @deprecated(
      reason: "Prefer to use `onlyShipsDomestically`. [Will be removed in v2]"
    )
  show(active: Boolean, atAFair: Boolean, sort: ShowSorts): Show
  shows(active: Boolean, atAFair: Boolean, size: Int, sort: ShowSorts): [Show]
  signature(format: Format): String
  signatureInfo: ArtworkInfoRow

  # size bucket assigned to an artwork based on its dimensions
  sizeBucket: String

  # score assigned to an artwork based on its dimensions
  sizeScore: Float

  # A slug ID.
  slug: ID!
  submissionId: String
  taxInfo: TaxInfo
  title: String

  # Based on artwork location and status, verify that partner needs VAT exemption approval from Artsy.
  vatExemptApprovalRequired: Boolean

  # Based on artwork location verify that VAT info for the partner is complete.
  vatRequirementComplete: Boolean

  # The visibility level of the artwork
  visibilityLevel: Visibility

  # If the category is video, then it returns the href for the (youtube/vimeo) video, otherwise returns the website from CMS
  website: String

  # The width as expressed by the original input metric
  width: String

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  widthCm: Float
}

enum ArtworkAggregation {
  ARTIST
  ARTIST_NATIONALITY
  ARTIST_SERIES
  ATTRIBUTION_CLASS
  COLOR
  DIMENSION_RANGE
  FOLLOWED_ARTISTS
  GALLERY
  INSTITUTION
  LOCATION_CITY
  MAJOR_PERIOD
  MATERIALS_TERMS
  MEDIUM
  MERCHANDISABLE_ARTISTS
  PARTNER
  PARTNER_CITY
  PERIOD
  PRICE_RANGE
  SIMPLE_PRICE_HISTOGRAM
  TOTAL
}

enum ArtworkAttributionClassType {
  LIMITED_EDITION
  OPEN_EDITION
  UNIQUE
  UNKNOWN_EDITION
}

# A connection to a list of items.
type ArtworkConnection implements ArtworkConnectionInterface {
  # A list of edges.
  edges: [ArtworkEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

interface ArtworkConnectionInterface {
  edges: [ArtworkEdgeInterface]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
}

type ArtworkConsignmentSubmission {
  displayText: String
  inProgress: Boolean
  internalID: String
  isSold: Boolean
}

union ArtworkContext = Fair | Sale | Show

# A specific grid.
interface ArtworkContextGrid {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

# An edge in a connection.
type ArtworkEdge implements ArtworkEdgeInterface {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artwork
}

interface ArtworkEdgeInterface {
  cursor: String
  node: Artwork
}

union ArtworkFigures = Image | Video

union ArtworkFilterFacet = Gene | Tag

union ArtworkHighlight = Article | Show

enum ArtworkImportSource {
  CONVECTION
  MY_COLLECTION
}

type ArtworkInfoRow {
  # Additional details about given attribute
  details: String

  # Label for information row
  label: String
}

# An inquiry on an Artwork
type ArtworkInquiry {
  artwork: Artwork!

  # A globally unique ID.
  id: ID!
  impulseConversationID: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
}

# A connection to a list of items.
type ArtworkInquiryConnection {
  # A list of edges.
  edges: [ArtworkInquiryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ArtworkInquiryEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: ArtworkInquiry
}

type ArtworkLayer {
  # A connection of artworks from a Layer.
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  cached: Int
  description: String
  href: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  name: String
  type: String
}

# Collection of fields that describe medium type, such as _Painting_. (This field
# is also commonly referred to as just "medium", but should not be confused with
# the artwork attribute called `medium`.)
type ArtworkMedium {
  # The medium gene that corresponds to this medium type. Used for filtering purposes on our frontend, e.g. in artwork grids.
  filterGene: Gene

  # Long descriptive phrase
  longDescription: String

  # Shortest form of medium type display
  name: String
}

type ArtworkMeta {
  description(limit: Int = 155): String
  image: String
  share: String
  title: String
}

type ArtworkMutationDeleteSuccess {
  success: Boolean
}

type ArtworkMutationFailure {
  mutationError: GravityMutationError
}

union ArtworkMutationType =
    ArtworkMutationDeleteSuccess
  | ArtworkMutationFailure

union ArtworkOrEditionSetType = Artwork | EditionSet

# Insights may not be available for all Artwork Connections due to potential performance issues
type ArtworkPriceInsights {
  annualLotsSold: Int
  annualValueSoldCents: FormattedNumber

  # The annual value of the work sold "in USD "
  annualValueSoldDisplayText: String
  artistId: String
  averageSalePriceDisplayText(
    # Passes in to numeral, such as `'0.00'`
    format: String = ""
  ): String
  demandRank: Float

  # The demand rank display text of the artist and medium
  demandRankDisplayText: String

  # Return weather the artist medium is in high demand
  isHighDemand: Boolean
  lastAuctionResultDate: String
  liquidityRankDisplayText(
    # Return the liquidity rank in a formatted way (Low, medium, high or very high)
    format: String = ""
  ): String
  medianSaleOverEstimatePercentage: Float
  medianSalePriceDisplayText(
    # Passes in to numeral, such as `'0.00'`
    format: String = ""
  ): String
  medium: String
  sellThroughRate: Float
}

# The results for one of the requested aggregations
type ArtworksAggregationResults {
  counts: [AggregationCount]
  slice: ArtworkAggregation
}

type ArtworkSavedSearch {
  # Based on the artworks attributes (usually considered for saved searches).
  suggestedArtworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
}

type ArtworksCollectionsBatchUpdateCounts {
  addedToCollections: Int
  artworks: Int
  removedFromCollections: Int
}

type ArtworksCollectionsBatchUpdateFailure {
  mutationError: GravityMutationError
}

input ArtworksCollectionsBatchUpdateInput {
  # Collection ids. To which collections to add artworks.
  addToCollectionIDs: [String!]

  # Artwork ids or slugs.
  artworkIDs: [String!]!
  clientMutationId: String

  # Collection ids. From which collections to remove artworks.
  removeFromCollectionIDs: [String!]
}

type ArtworksCollectionsBatchUpdatePayload {
  clientMutationId: String
  responseOrError: ArtworksCollectionsBatchUpdateResponseOrError
}

union ArtworksCollectionsBatchUpdateResponseOrError =
    ArtworksCollectionsBatchUpdateFailure
  | ArtworksCollectionsBatchUpdateSuccess

type ArtworksCollectionsBatchUpdateSuccess {
  addedToCollections: [Collection]
  counts: ArtworksCollectionsBatchUpdateCounts
  removedFromCollections: [Collection]
}

enum ArtworkSizes {
  LARGE
  MEDIUM
  SMALL
}

enum ArtworkSorts {
  AVAILABILITY_ASC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  ICONICITY_DESC
  MERCHANDISABILITY_DESC
  PARTNER_UPDATED_AT_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  TITLE_ASC
  TITLE_DESC
}

type ArtworkVersion implements Node {
  # The names for the artists related to this Artwork Version
  artistNames: String

  # The artists related to this Artwork Version
  artists: [Artist]

  # The Artwork Version attribution class
  attributionClass: AttributionClass

  # Artwork condition description
  condition_description: String

  # The Artwork Version formatted date
  date: String

  # The Image id
  defaultImageID: String

  # The Artwork Version dimensions formatted for different units
  dimensions: dimensions

  # A globally unique ID.
  id: ID!

  # The image representing the Artwork Version
  image: Image

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # The Artwork Version medium
  medium: String

  # Artwork provenance
  provenance: String

  # Artwork title
  title: String
}

# Fields of an attachment (currently from Radiation)
type Attachment {
  # Content type of file.
  contentType: String!

  # URL of attachment.
  downloadURL: String!

  # File name.
  fileName: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
}

# Collection of fields that describe attribution class
type AttributionClass {
  # A globally unique ID.
  id: ID!
  info: String @deprecated(reason: "Prefer `shortDescription`")

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Long description (can include multiple sentences) for attribution class
  longDescription: String

  # Shortest form of attribution class display
  name: String

  # Short descriptive phrase for attribution class without punctuation as array of strings
  shortArrayDescription: [String]

  # Short descriptive phrase for attribution class without punctuation
  shortDescription: String
}

type AuctionArtworkGrid implements ArtworkContextGrid {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

# In centimeters.
type AuctionLotDimensions {
  depth: Float
  height: Float
  width: Float
}

type AuctionLotEstimate {
  display: String
  high: Float
  low: Float
}

type AuctionLotImages {
  larger: Image
  thumbnail: Image
}

type AuctionLotPerformance {
  # Percentage performance over mid-estimate
  mid: String
}

type AuctionResult implements Node {
  # Be careful when querying for artist data within a connection as it can lead to performance issues.
  artist: Artist
  artistID: String!
  boughtIn: Boolean
  categoryText: String

  # Comparable auction results
  comparableAuctionResults(
    after: String
    before: String
    first: Int
    last: Int
  ): AuctionResultConnection
  currency: String
  date(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  dateText: String
  description: String
  dimensions: AuctionLotDimensions
  dimensionText: String
  estimate: AuctionLotEstimate
  externalURL: String

  # A globally unique ID.
  id: ID!
  images: AuctionLotImages

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isInArtsyAuction: Boolean!
  isUpcoming: Boolean
  location: String
  lotNumber: String
  mediumText: String
  organization: String
  performance: AuctionLotPerformance
  priceRealized: AuctionResultPriceRealized
  saleDate(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  saleDateText: String
  saleTitle: String
  slug: String
  title: String
}

# A connection to a list of items.
type AuctionResultConnection {
  aggregations: [AuctionResultsAggregationType]
  createdYearRange: YearRange

  # A list of edges.
  edges: [AuctionResultEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type AuctionResultEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: AuctionResult
}

type AuctionResultPriceRealized {
  cents: Float
  centsUSD: Float
  display(
    # Passes in to numeral, such as `'0.00'`
    format: String = ""
  ): String
  displayUSD(
    # Passes in to numeral, such as `'0.00'`
    format: String = ""
  ): String
}

enum AuctionResultsAggregation {
  CURRENCIES_COUNT
  LOTS_BY_CREATED_YEAR
  LOTS_BY_SALE_YEAR
  SIMPLE_PRICE_HISTOGRAM
}

# The results for one of the requested aggregations
type AuctionResultsAggregationType {
  counts: [AggregationCount]
  slice: AuctionResultsAggregation
}

enum AuctionResultSorts {
  DATE_ASC
  DATE_DESC
  ESTIMATE_AND_DATE_DESC
  PRICE_AND_DATE_DESC
}

enum AuctionResultsState {
  ALL
  PAST
  UPCOMING
}

enum AuctionState {
  CLOSED
  OPEN
  UPCOMING
}

enum AuthenticationProvider {
  APPLE
  FACEBOOK
  GOOGLE
}

enum AuthenticationStatus {
  INVALID
  LOGGED_IN
  LOGGED_OUT
}

type AuthenticationType {
  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  provider: AuthenticationProvider!
  uid: String!
}

type Author {
  bio(format: Format): String

  # A globally unique ID.
  id: ID!
  image: Image
  initials(length: Int = 3): String

  # A type-specific ID.
  internalID: ID!
  name: String
  twitterHandle: String
}

type BankAccount {
  # Name on the bank account
  accountHolderName: String

  # Bank name
  bankName: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Last four characters of the account identifier
  last4: String!

  # Bank account type
  type: BankAccountTypes!
}

# A connection to a list of items.
type BankAccountConnection {
  # A list of edges.
  edges: [BankAccountEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BankAccountEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: BankAccount
}

type BankAccountMutationFailure {
  mutationError: GravityMutationError
}

type BankAccountMutationSuccess {
  bankAccount: BankAccount
  bankAccountEdge: BankAccountEdge
}

union BankAccountMutationType =
    BankAccountMutationFailure
  | BankAccountMutationSuccess

enum BankAccountTypes {
  SEPA_DEBIT
  US_BANK_ACCOUNT
}

type Bidder implements Node {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  pin: String
  qualifiedForBidding: Boolean
  sale: Sale
  user: User
}

type BidderPosition {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  highestBid: HighestBid

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isActive: Boolean
  isRetracted: Boolean
  isWinning: Boolean
  isWithBidMax: Boolean
  maxBid: BidderPositionMaxBid
  processedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  saleArtwork: SaleArtwork
  suggestedNextBid: BidderPositionSuggestedNextBid
  updatedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
}

input BidderPositionInput {
  artworkID: String!
  clientMutationId: String
  maxBidAmountCents: Float!
  saleID: String!
}

type BidderPositionMaxBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type BidderPositionPayload {
  clientMutationId: String
  result: BidderPositionResult
}

type BidderPositionResult {
  messageDescriptionMD: String
  messageHeader: String
  position: BidderPosition
  rawError: String
  status: String!
}

type BidderPositionSuggestedNextBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type BidIncrement {
  amount: Int
  from: Int
  to: Int
}

type BidIncrementsFormatted {
  cents: Float
  display: String
}

type BulkUpdatePartnerArtworksMutationFailure {
  mutationError: GravityMutationError
}

input BulkUpdatePartnerArtworksMutationInput {
  # Whether Artsy domestic shipping should be enabled
  artsyShippingDomestic: Boolean

  # Whether Artsy international shipping should be enabled
  artsyShippingInternational: Boolean
  clientMutationId: String

  # ID of the partner
  id: String!

  # The partner location ID to assign
  location: String
}

type BulkUpdatePartnerArtworksMutationPayload {
  bulkUpdatePartnerArtworksOrError: BulkUpdatePartnerArtworksMutationType
  clientMutationId: String
}

type BulkUpdatePartnerArtworksMutationSuccess {
  skippedPartnerArtworks: BulkUpdatePartnerArtworksResponse
  updatedPartnerArtworks: BulkUpdatePartnerArtworksResponse
}

union BulkUpdatePartnerArtworksMutationType =
    BulkUpdatePartnerArtworksMutationFailure
  | BulkUpdatePartnerArtworksMutationSuccess

type BulkUpdatePartnerArtworksResponse {
  count: Int
  ids: [String]
}

type BuyersPremium {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int
  percent: Float
}

type CalculatedCost {
  bidAmount: Money
  buyersPremium: Money
  subtotal: Money
}

type CausalityLotState {
  bidCount: Int
  floorSellingPrice: Money
  floorSellingPriceCents: Int
  internalID: String
  onlineAskingPrice: Money
  onlineAskingPriceCents: Int
  reserveStatus: String
  saleId: String
  sellingPrice: Money
  sellingPriceCents: Int
  soldStatus: String
}

type Channel {
  # A connection of articles related to a partner.
  articlesConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: ArticleSorts
  ): ArticleConnection

  # A globally unique ID.
  id: ID!
  image: Image

  # A type-specific ID.
  internalID: ID!
  links: [ChannelLink!]!
  name: String!
  slug: String
  tagline: String
  type: ChannelType!
}

type ChannelLink {
  text: String!
  url: String!
}

enum ChannelType {
  Editorial
  Support
  Team
}

type City {
  coordinates: LatLng
  fairsConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: FairSorts
    status: EventStatus
  ): FairConnection
  fullName: String!
  name: String!
  showsConnection(
    after: String
    before: String

    # Only used when status is CLOSING_SOON or UPCOMING. Number of days used to filter upcoming and closing soon shows
    dayThreshold: Int
    first: Int

    # Whether to include local discovery stubs
    includeStubShows: Boolean
    last: Int
    page: Int

    # Filter shows by partner type
    partnerType: PartnerShowPartnerType
    size: Int
    sort: ShowSorts

    # Filter shows by chronological event status
    status: EventStatus
  ): ShowConnection
  slug: String!
  sponsoredContent: CitySponsoredContent
}

type CitySponsoredContent {
  artGuideUrl: String
  featuredShows: [Show]
  introText: String
  showsConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: ShowSorts
    status: EventStatus
  ): ShowConnection
}

# A collection of artworks
type Collection {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    sort: CollectionArtworkSorts = SAVED_AT_DESC
  ): ArtworkConnection

  # Number of artworks associated with this collection.
  artworksCount(
    # Only count visible artworks
    onlyVisible: Boolean = false
  ): Int!

  # True if this is the default collection for this user, i.e. the default Saved Artwork collection.
  default: Boolean!

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Checking whether artwork is included in collection
  isSavedArtwork(artworkID: String!): Boolean!

  # Name of the collection. Has a predictable value for 'standard' collections
  # such as Saved Artwork, My Collection, etc. Can be provided by user otherwise.
  name: String!

  # True if this collection represents artworks explicitly saved by the user, false otherwise.
  saves: Boolean!
}

enum CollectionArtworkSorts {
  POSITION_ASC
  POSITION_DESC
  SAVED_AT_ASC
  SAVED_AT_DESC
}

# A connection to a list of items.
type CollectionsConnection {
  # A list of edges.
  edges: [CollectionsEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type CollectionsEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Collection
}

enum CollectionSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CollectorProfileArtists {
  name: String
}

type CollectorProfileType {
  artsyUserSince(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  bio: String
  collectorLevel: Int

  # List of artists the Collector is interested in.
  collectorProfileArtists: [CollectorProfileArtists]
  companyName: String
  companyWebsite: String
  confirmedBuyerAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  email: String
  emailConfirmed: Boolean
    @deprecated(
      reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead"
    )
  icon: Image

  # A globally unique ID.
  id: ID!
  identityVerified: Boolean
    @deprecated(
      reason: "identityVerified is going to be removed, use isIdentityVerified instead"
    )
  initials(length: Int = 3): String
  institutionalAffiliations: String
  intents: [String]

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isActiveBidder: Boolean
  isActiveInquirer: Boolean
  isEmailConfirmed: Boolean
  isIdentityVerified: Boolean
  isProfileComplete: Boolean
  location: MyLocation
  loyaltyApplicantAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  name: String

  # Collector's position with relevant institutions
  otherRelevantPositions: String

  # User ID of the collector profile's owner
  ownerID: ID!
  privacy: String
  profession: String
  professionalBuyerAppliedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  professionalBuyerAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  selfReportedPurchases: String
  userInterests: [UserInterest]!
}

# A connection to a list of items.
type CollectorProfileTypeConnection {
  # A list of edges.
  edges: [CollectorProfileTypeEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type CollectorProfileTypeEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: CollectorProfileType
}

type ConsignmentInquiry {
  # Email of inquirer
  email: String!

  # id of the ConsignmentInquiry
  internalID: Int!

  # Message of the inquirer
  message: String!

  # Name of the inquirer
  name: String!

  # Phone number of the inquirer
  phoneNumber: String

  # An optional email from a member of the Collector Services team to whom the request was sent
  recipientEmail: String

  # gravity user id if user is logged in
  userId: String
}

type ConsignmentInquiryMutationError {
  error: String
  message: String!
  statusCode: Int
  type: String
}

type ConsignmentInquiryMutationFailure {
  mutationError: ConsignmentInquiryMutationError
}

type ConsignmentInquiryMutationSuccess {
  consignmentInquiry: ConsignmentInquiry
}

type ConvectionService {
  geminiTemplateKey: String!
}

# A conversation.
type Conversation implements Node {
  # Only the artworks discussed in the conversation.
  artworks: [Artwork]
  buyerOutcome: String
  buyerOutcomeAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  deletedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # The participant who initiated the conversation
  from: ConversationInitiator!
  fromLastViewedMessageID: String

  # The collector profile of the user who initiated the conversation
  fromProfile: CollectorProfileType

  # The user who initiated the conversation
  fromUser: User
    @deprecated(
      reason: "Will be inaccessible to partners in future versions. Prefer fromProfile."
    )

  # A globally unique ID.
  id: ID!
  initialMessage: String!
    @deprecated(
      reason: "This field is no longer required. Prefer the first message from the MessageConnection."
    )

  # Gravity inquiry id.
  inquiryID: String

  # The inquiry request associated with the conversation.
  inquiryRequest: PartnerInquiryRequest

  # An optional type-specific ID.
  internalID: ID

  # True if user/conversation initiator is a recipient.
  isLastMessageToUser: Boolean

  # The artworks and/or partner shows discussed in the conversation.
  items: [ConversationItem]

  # This is a snippet of text from the last message.
  lastMessage: String
  lastMessageAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Impulse id of the last message.
  lastMessageID: String
    @deprecated(
      reason: "Prefer querying `messagesConnection(last:1) { edges { node { internalID } } }`"
    )

  # A connection for all messages in a single conversation
  messages(
    after: String
    before: String
    first: Int
    last: Int
    sort: sort
  ): MessageConnection @deprecated(reason: "Prefer messagesConnection")

  # A connection for all messages and events in a single conversation
  messagesAndConversationEventsConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    size: Int
  ): MessageOrConversationEventTypeConnection

  # A connection for all messages in a single conversation
  messagesConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: sort
  ): MessageConnection

  # The participant(s) responding to the conversation
  to: ConversationResponder!
  toLastViewedMessageID: String

  # True if there is an unread message by the Collector(from).
  unread: Boolean @deprecated(reason: "Use `unreadByCollector` instead")

  # True if there is an unread message by the Collector(from).
  unreadByCollector: Boolean

  # True if there is an unread message by the Partner(to).
  unreadByPartner: Boolean
}

# A connection to a list of items.
type ConversationConnection {
  # A list of edges.
  edges: [ConversationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalUnreadCount: Int
}

# An edge in a connection.
type ConversationEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Conversation
}

# An event (such as a submitted offer) in a conversation.
type ConversationEvent implements Node {
  # Text for this event, formatted for the buyer.
  buyerBody: String
  eventKey: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Text for this event, formatted for the seller.
  sellerBody: String
}

# The participant who started the conversation, currently always a User
type ConversationInitiator {
  email: String!

  # A globally unique ID.
  id: ID!
  initials(length: Int = 3): String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String!

  # The type of participant, e.g. Partner or User
  type: String!
}

type ConversationItem {
  item: ConversationItemType

  # The actual, non-snapshotted artwork
  liveArtwork: ConversationItemType
  permalink: String
  title: String
}

union ConversationItemType = Artwork | Show

input ConversationMessageAttachmentInput {
  id: String
  name: String!
  size: String
  type: String!
  url: String!
}

# The participant responding to the conversation, currently always a Partner
type ConversationResponder {
  # A globally unique ID.
  id: ID!
  initials(length: Int = 3): String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String!

  # An array of Impulse IDs that correspond to all email addresses that messages should be sent to
  replyToImpulseIDs: [String]!

  # The type of participant, e.g. Partner or User
  type: String!
}

enum ConversationsInputMode {
  PARTNER
  USER
}

type CreateAccountRequestMutationFailure {
  mutationError: GravityMutationError
}

input CreateAccountRequestMutationInput {
  # Type of account request.
  action: String
  clientMutationId: String

  # Email to associate with message.
  email: String

  # Name to associate with message.
  name: String

  # Message to be sent.
  notes: String!

  # Used when logged in.
  userID: String
}

type CreateAccountRequestMutationPayload {
  accountRequestOrError: CreateAccountRequestMutationType
  clientMutationId: String
}

type CreateAccountRequestMutationSuccess {
  accountRequest: AccountRequest
}

union CreateAccountRequestMutationType =
    CreateAccountRequestMutationFailure
  | CreateAccountRequestMutationSuccess

type createAdvisoryOpportunityFailure {
  mutationError: GravityMutationError
}

input createAdvisoryOpportunityMutationInput {
  clientMutationId: String
  message: String
  phoneCountryCode: String
  phoneNumber: String
  searchCriteriaID: String!
}

type createAdvisoryOpportunityMutationPayload {
  # On success: the advisory opportunity
  advisoryOpportunityOrError: createAdvisoryOpportunityResponseOrError
  clientMutationId: String
}

union createAdvisoryOpportunityResponseOrError =
    createAdvisoryOpportunityFailure
  | createAdvisoryOpportunitySuccess

type createAdvisoryOpportunitySuccess {
  advisoryOpportunity: AdvisoryOpportunity!
}

type CreateArtistFailure {
  mutationError: GravityMutationError
}

input CreateArtistMutationInput {
  birthday: String
  clientMutationId: String
  deathday: String
  displayName: String!
  firstName: String
  isPersonalArtist: Boolean
  lastName: String
  middleName: String
  nationality: String
}

type CreateArtistMutationPayload {
  # Success or Error, where on success Artist is returned
  artistOrError: CreateArtistSuccessOrErrorType
  clientMutationId: String
}

type CreateArtistSuccess {
  artist: Artist
}

union CreateArtistSuccessOrErrorType = CreateArtistFailure | CreateArtistSuccess

input CreateBidderInput {
  clientMutationId: String
  saleID: String!
}

type CreateBidderPayload {
  bidder: Bidder
  clientMutationId: String
}

type CreateCollectionFailure {
  mutationError: GravityMutationError
}

input createCollectionInput {
  clientMutationId: String
  name: String!
}

type createCollectionPayload {
  clientMutationId: String
  responseOrError: CreateCollectionResponseOrError
}

union CreateCollectionResponseOrError =
    CreateCollectionFailure
  | CreateCollectionSuccess

type CreateCollectionSuccess {
  collection: Collection
}

input CreateConsignmentInquiryMutationInput {
  clientMutationId: String
  email: String!
  message: String!
  name: String!
  phoneNumber: String
  recipientEmail: String
  userId: String
}

type CreateConsignmentInquiryMutationPayload {
  clientMutationId: String
  consignmentInquiryOrError: CreateConsignmentInquiryMutationType
}

union CreateConsignmentInquiryMutationType =
    ConsignmentInquiryMutationFailure
  | ConsignmentInquiryMutationSuccess

type CreateFeaturedLinkFailure {
  mutationError: GravityMutationError
}

input CreateFeaturedLinkMutationInput {
  clientMutationId: String
  description: String
  href: String!
  sourceBucket: String
  sourceKey: String
  subtitle: String
  title: String!
}

type CreateFeaturedLinkMutationPayload {
  clientMutationId: String
  featuredLinkOrError: CreateFeaturedLinkResponseOrError
}

union CreateFeaturedLinkResponseOrError =
    CreateFeaturedLinkFailure
  | CreateFeaturedLinkSuccess

type CreateFeaturedLinkSuccess {
  featuredLink: FeaturedLink
}

type CreateFeatureFailure {
  mutationError: GravityMutationError
}

input CreateFeatureMutationInput {
  active: Boolean!
  callout: String
  clientMutationId: String
  description: String
  layout: FeatureLayouts
  name: String!
  sourceBucket: String
  sourceKey: String
  subheadline: String
}

type CreateFeatureMutationPayload {
  clientMutationId: String
  featureOrError: createFeatureResponseOrError
}

union createFeatureResponseOrError = CreateFeatureFailure | CreateFeatureSuccess

type CreateFeatureSuccess {
  feature: Feature
}

input CreateGeminiEntryForAssetInput {
  clientMutationId: String

  # Additional JSON data to pass through gemini, should definitely contain an `id` and a `_type`
  metadata: JSON!

  # The S3 bucket where the file was uploaded
  sourceBucket: String!

  # The path to the file
  sourceKey: String!

  # The template key, this is `name` in the asset request
  templateKey: String!
}

type CreateGeminiEntryForAssetPayload {
  asset: GeminiEntry
  clientMutationId: String
}

type createHeroUnitFailure {
  mutationError: GravityMutationError
}

input CreateHeroUnitLinkInput {
  text: String!
  url: String!
}

input CreateHeroUnitMutationInput {
  body: String!
  clientMutationId: String
  credit: String
  endAt: String
  imageUrl: String
  label: String
  link: CreateHeroUnitLinkInput!
  position: Int
  startAt: String
  title: String!
}

type CreateHeroUnitMutationPayload {
  clientMutationId: String

  # On success: the hero unit created.
  heroUnitOrError: createHeroUnitResponseOrError
}

union createHeroUnitResponseOrError =
    createHeroUnitFailure
  | createHeroUnitSuccess

type createHeroUnitSuccess {
  heroUnit: HeroUnit
}

input CreateIdentityVerificationOverrideMutationInput {
  clientMutationId: String

  # The identity verification ID
  identityVerificationID: String!

  # The reason for the identity verification override
  reason: String!

  # The state of the identity verification override
  state: String!
}

type CreateIdentityVerificationOverrideMutationPayload {
  clientMutationId: String

  # On success: an identity verification with overrides
  createIdentityVerificationOverrideResponseOrError: CreateIdentityVerificationOverrideResponseOrError
}

union CreateIdentityVerificationOverrideResponseOrError =
    IdentityVerificationOverrideMutationFailure
  | IdentityVerificationOverrideMutationSuccess

type createOrderedSetFailure {
  mutationError: GravityMutationError
}

input CreateOrderedSetMutationInput {
  clientMutationId: String
  description: String
  internalName: String
  itemId: String
  itemIds: [String]
  itemType: String!
  key: String!
  layout: OrderedSetLayouts
  name: String
  ownerType: String
  published: Boolean
}

type CreateOrderedSetMutationPayload {
  clientMutationId: String

  # On success: the ordered set created.
  orderedSetOrError: createOrderedSetResponseOrError
}

union createOrderedSetResponseOrError =
    createOrderedSetFailure
  | createOrderedSetSuccess

type createOrderedSetSuccess {
  set: OrderedSet
}

type CreatePageFailure {
  mutationError: GravityMutationError
}

input CreatePageMutationInput {
  clientMutationId: String
  content: String!
  name: String!
  published: Boolean!
}

type CreatePageMutationPayload {
  clientMutationId: String
  pageOrError: CreatePageResponseOrError
}

union CreatePageResponseOrError = CreatePageFailure | CreatePageSuccess

type CreatePageSuccess {
  page: Page
}

type createUserAdminNoteFailure {
  mutationError: GravityMutationError
}

input createUserAdminNoteMutationInput {
  body: String!
  clientMutationId: String
  id: String!
}

type createUserAdminNoteMutationPayload {
  # On success: the admin note created.
  adminNoteOrError: createUserAdminNoteResponseOrError
  clientMutationId: String
}

union createUserAdminNoteResponseOrError =
    createUserAdminNoteFailure
  | createUserAdminNoteSuccess

type createUserAdminNoteSuccess {
  adminNote: UserAdminNotes
}

type CreateUserInterestFailure {
  mutationError: GravityMutationError
}

type createUserInterestForUserFailure {
  mutationError: GravityMutationError
}

input CreateUserInterestForUserInput {
  # Optional body for a note.
  body: String
  category: UserInterestCategory!
  clientMutationId: String
  interestId: String!
  interestType: UserInterestInterestType!
  ownerType: UserInterestOwnerType!
  userId: String!
}

type CreateUserInterestForUserPayload {
  clientMutationId: String

  # On success: UserInterest, User. On failure: MutationError.
  userInterestOrError: createUserInterestForUserResponseOrError
}

union createUserInterestForUserResponseOrError =
    createUserInterestForUserFailure
  | createUserInterestForUserSuccess

type createUserInterestForUserSuccess {
  user: User
  userInterest: UserInterest
}

input CreateUserInterestMutationInput {
  anonymousSessionId: String

  # Optional body for note
  body: String
  category: UserInterestCategory!
  clientMutationId: String
  interestId: String!
  interestType: UserInterestInterestType!
  private: Boolean
  sessionID: String
}

type CreateUserInterestMutationPayload {
  clientMutationId: String
  me: Me!
  userInterest: UserInterest!
}

input CreateUserInterestsMutationInput {
  clientMutationId: String
  userInterests: [UserInterestInput!]!
}

type CreateUserInterestsMutationPayload {
  clientMutationId: String
  me: Me!
  userInterestsOrErrors: [UserInterestOrError!]!
}

type CreateUserSaleProfileFailure {
  mutationError: GravityMutationError
}

input CreateUserSaleProfileMutationInput {
  addressLine1: String
  addressLine2: String
  city: String
  clientMutationId: String
  country: String
  requireBidderApproval: Boolean
  state: String
  userId: String!
  zip: String
}

type CreateUserSaleProfileMutationPayload {
  clientMutationId: String

  # On success: the user sale profile created.
  userSaleProfileOrError: CreateUserSaleProfileResponseOrError
}

union CreateUserSaleProfileResponseOrError =
    CreateUserSaleProfileFailure
  | CreateUserSaleProfileSuccess

type CreateUserSaleProfileSuccess {
  userSaleProfile: UserSaleProfile
}

type CreateVerifiedRepresentativeFailure {
  mutationError: GravityMutationError
}

input CreateVerifiedRepresentativeInput {
  artistId: String!
  clientMutationId: String
  partnerId: String!
}

type CreateVerifiedRepresentativePayload {
  clientMutationId: String

  # On success: the created Verified Representative.
  verifiedRepresentativeOrError: CreateVerifiedRepresentativeResponseOrError
}

union CreateVerifiedRepresentativeResponseOrError =
    CreateVerifiedRepresentativeFailure
  | CreateVerifiedRepresentativeSuccess

type CreateVerifiedRepresentativeSuccess {
  verifiedRepresentative: VerifiedRepresentative
}

# An asset which is assigned to a consignment submission
type Credentials {
  # The key to use with S3.
  credentials: String!

  # The s3 policy document for your request
  policyDocument: S3PolicyDocumentType!

  # A base64 encoded version of the S3 policy
  policyEncoded: String!

  # The signature for your asset.
  signature: String!
}

type CreditCard {
  # Brand of credit card
  brand: String!

  # Billing address city
  city: String

  # Billing address country code
  country: String

  # Credit card's expiration month
  expirationMonth: Int!

  # Credit card's expiration year
  expirationYear: Int!

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Last four digits on the credit card
  lastDigits: String!

  # Name on the credit card
  name: String

  # Billing address postal code
  postalCode: String

  # Billing address state
  state: String

  # Billing address street1
  street1: String

  # Billing address street2
  street2: String
}

# A connection to a list of items.
type CreditCardConnection {
  # A list of edges.
  edges: [CreditCardEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CreditCardEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: CreditCard
}

input CreditCardInput {
  clientMutationId: String
  oneTimeUse: Boolean = false
  token: String!
}

type CreditCardMutationFailure {
  mutationError: GravityMutationError
}

type CreditCardMutationSuccess {
  creditCard: CreditCard
  creditCardEdge: CreditCardEdge
}

union CreditCardMutationType =
    CreditCardMutationFailure
  | CreditCardMutationSuccess

type CreditCardPayload {
  clientMutationId: String
  creditCardOrError: CreditCardMutationType
  me: Me
}

type CroppedImageUrl {
  height: Int!
  src: String!
  srcSet: String!
  url: String!
  width: Int!
}

enum CurrencyPreference {
  EUR
  GBP
  USD
}

type CurrentEvent {
  # Location and date of the event if available
  details: String
  event: UnderlyingCurrentEvent!

  # Link to the event
  href: String
  image: Image

  # Name of the event
  name: String

  # Name of the partner associated to the event
  partner: String

  # The state of the event
  status: String
}

type DaySchedule {
  dayOfWeek: String
  endTime: Int
  startTime: Int
}

type DeepZoom {
  Image: DeepZoomImage
}

type DeepZoomImage {
  Format: String
  Overlap: Int
  Size: DeepZoomImageSize
  TileSize: Int
  Url: String
  xmlns: String
}

type DeepZoomImageSize {
  Height: Int
  Width: Int
}

input DeleteAccountInput {
  clientMutationId: String

  # Reason for deleting the account.
  explanation: String

  # Password.
  password: String

  # Referrer location
  url: String
}

type DeleteAccountPayload {
  clientMutationId: String
  userAccountOrError: AccountMutationType
}

type DeleteArtistFailure {
  mutationError: GravityMutationError
}

input DeleteArtistInput {
  clientMutationId: String
  id: String!
}

type DeleteArtistPayload {
  # Success or Error, on success the deleted Artist is returned
  artistOrError: DeleteArtistSuccessOrErrorType
  clientMutationId: String
}

type DeleteArtistSuccess {
  artist: Artist
}

union DeleteArtistSuccessOrErrorType = DeleteArtistFailure | DeleteArtistSuccess

input DeleteArtworkImageInput {
  artworkID: String!
  clientMutationId: String
  imageID: String!
}

type DeleteArtworkImagePayload {
  artworkOrError: ArtworkMutationType
  clientMutationId: String
}

input DeleteBankAccountInput {
  clientMutationId: String
  id: String!
}

type DeleteBankAccountPayload {
  bankAccountOrError: BankAccountMutationType
  clientMutationId: String
  me: Me
}

type DeleteCollectionFailure {
  mutationError: GravityMutationError
}

input deleteCollectionInput {
  clientMutationId: String
  id: String!
}

type deleteCollectionPayload {
  clientMutationId: String

  # On success: the deleted collection
  responseOrError: DeleteCollectionResponseOrError
}

union DeleteCollectionResponseOrError =
    DeleteCollectionFailure
  | DeleteCollectionSuccess

type DeleteCollectionSuccess {
  collection: Collection
}

type DeleteConversationFailure {
  mutationError: GravityMutationError
}

input DeleteConversationMutationInput {
  clientMutationId: String

  # The id of the conversation to be deleted.
  id: String!
}

type DeleteConversationMutationPayload {
  clientMutationId: String

  # On success: the conversation that was soft deleted.
  conversationOrError: DeleteConversationResponseOrError
}

union DeleteConversationResponseOrError =
    DeleteConversationFailure
  | DeleteConversationSuccess

type DeleteConversationSuccess {
  conversation: Conversation
}

input DeleteCreditCardInput {
  clientMutationId: String
  id: String!
}

type DeleteCreditCardPayload {
  clientMutationId: String
  creditCardOrError: CreditCardMutationType
  me: Me
}

type DeleteFeaturedLinkFailure {
  mutationError: GravityMutationError
}

input DeleteFeaturedLinkMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteFeaturedLinkMutationPayload {
  clientMutationId: String
  featuredLinkOrError: DeleteFeaturedLinkResponseOrError
}

union DeleteFeaturedLinkResponseOrError =
    DeleteFeaturedLinkFailure
  | DeleteFeaturedLinkSuccess

type DeleteFeaturedLinkSuccess {
  featuredLink: FeaturedLink
}

type DeleteFeatureFailure {
  mutationError: GravityMutationError
}

input DeleteFeatureMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteFeatureMutationPayload {
  clientMutationId: String
  featureOrError: DeleteFeatureResponseOrError
}

union DeleteFeatureResponseOrError = DeleteFeatureFailure | DeleteFeatureSuccess

type DeleteFeatureSuccess {
  feature: Feature
}

type deleteHeroUnitFailure {
  mutationError: GravityMutationError
}

input deleteHeroUnitMutationInput {
  clientMutationId: String
  id: String!
}

type deleteHeroUnitMutationPayload {
  clientMutationId: String

  # On success: the deleted hero unit.
  heroUnitOrError: deleteHeroUnitResponseOrError
}

union deleteHeroUnitResponseOrError =
    deleteHeroUnitFailure
  | deleteHeroUnitSuccess

type deleteHeroUnitSuccess {
  heroUnit: HeroUnit
}

type deleteOrderedSetFailure {
  mutationError: GravityMutationError
}

type deleteOrderedSetItemFailure {
  mutationError: GravityMutationError
}

input deleteOrderedSetItemMutationInput {
  clientMutationId: String
  id: String!
  itemId: String!
}

type deleteOrderedSetItemMutationPayload {
  clientMutationId: String

  # On success: the updated parent set or the set item deleted.
  deleteOrderedSetItemResponseOrError: deleteOrderedSetItemResponseOrError
}

union deleteOrderedSetItemResponseOrError =
    deleteOrderedSetItemFailure
  | deleteOrderedSetItemSuccess

type deleteOrderedSetItemSuccess {
  set: OrderedSet
  setItem: OrderedSetItem
}

input deleteOrderedSetMutationInput {
  clientMutationId: String
  id: String!
}

type deleteOrderedSetMutationPayload {
  clientMutationId: String

  # On success: the deleted ordered set.
  orderedSetOrError: deleteOrderedSetResponseOrError
}

union deleteOrderedSetResponseOrError =
    deleteOrderedSetFailure
  | deleteOrderedSetSuccess

type deleteOrderedSetSuccess {
  set: OrderedSet
}

type DeletePageFailure {
  mutationError: GravityMutationError
}

input DeletePageMutationInput {
  clientMutationId: String
  id: String!
}

type DeletePageMutationPayload {
  clientMutationId: String
  pageOrError: DeletePageResponseOrError
}

union DeletePageResponseOrError = DeletePageFailure | DeletePageSuccess

type DeletePageSuccess {
  page: Page
}

type deleteUserAdminNoteFailure {
  mutationError: GravityMutationError
}

input deleteUserAdminNoteMutationInput {
  adminNoteId: String!
  clientMutationId: String
  id: String!
}

type deleteUserAdminNoteMutationPayload {
  # On success: the admin note deleted.
  adminNoteOrError: deleteUserAdminNoteResponseOrError
  clientMutationId: String
}

union deleteUserAdminNoteResponseOrError =
    deleteUserAdminNoteFailure
  | deleteUserAdminNoteSuccess

type deleteUserAdminNoteSuccess {
  adminNote: UserAdminNotes
}

type DeleteUserFailure {
  mutationError: GravityMutationError
}

input DeleteUserIconInput {
  clientMutationId: String
}

type DeleteUserIconPayload {
  clientMutationId: String
  iconOrError: UserIconDeletionMutationType
}

input DeleteUserInput {
  clientMutationId: String
  id: String!
}

type DeleteUserInterestFailure {
  mutationError: GravityMutationError
}

type deleteUserInterestForUserFailure {
  mutationError: GravityMutationError
}

input DeleteUserInterestForUserInput {
  clientMutationId: String

  # The ID of the UserInterest to delete.
  id: String!

  # An optional ID of a User.
  userId: String
}

type DeleteUserInterestForUserPayload {
  clientMutationId: String

  # On success: UserInterest and optionally a User. On failure: MutationError.
  userInterestOrError: deleteUserInterestForUserResponseOrError
}

union deleteUserInterestForUserResponseOrError =
    deleteUserInterestForUserFailure
  | deleteUserInterestForUserSuccess

type deleteUserInterestForUserSuccess {
  user: User
  userInterest: UserInterest
}

input DeleteUserInterestMutationInput {
  anonymousSessionId: String
  clientMutationId: String

  # Either the `id` or the `interest_id` of a user interest
  id: String!
  sessionID: String
}

type DeleteUserInterestMutationPayload {
  clientMutationId: String
  me: Me!
  userInterest: UserInterest!
}

union DeleteUserInterestOrErrorType = DeleteUserInterestFailure | UserInterest

input DeleteUserInterestsMutationInput {
  clientMutationId: String
  ids: [String!]!
}

type DeleteUserInterestsMutationPayload {
  clientMutationId: String
  me: Me!
  userInterestsOrErrors: [DeleteUserInterestOrErrorType!]!
}

type DeleteUserPayload {
  clientMutationId: String

  # On success: a deleted User
  userOrError: DeleteUserResponseOrError
}

union DeleteUserResponseOrError = DeleteUserFailure | DeleteUserSuccess

type deleteUserRoleFailure {
  mutationError: GravityMutationError
}

input deleteUserRoleMutationInput {
  clientMutationId: String
  id: String!
  role_type: String!
}

type deleteUserRoleMutationPayload {
  clientMutationId: String

  # On success: the user.
  userOrError: deleteUserRoleResponseOrError
}

union deleteUserRoleResponseOrError =
    deleteUserRoleFailure
  | deleteUserRoleSuccess

type deleteUserRoleSuccess {
  user: User
}

type DeleteUserSuccess {
  user: User
}

type DeleteVerifiedRepresentativeFailure {
  mutationError: GravityMutationError
}

input DeleteVerifiedRepresentativeMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteVerifiedRepresentativeMutationPayload {
  clientMutationId: String

  # On success: the deleted Verified Representative.
  verifiedRepresentativeOrError: DeleteVerifiedRepresentativeResponseOrError
}

union DeleteVerifiedRepresentativeResponseOrError =
    DeleteVerifiedRepresentativeFailure
  | DeleteVerifiedRepresentativeSuccess

type DeleteVerifiedRepresentativeSuccess {
  verifiedRepresentative: VerifiedRepresentative
}

# Fields of a delivery (currently from Radiation)
type Delivery {
  bouncedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  clickedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  deliveredAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Masked email w/ display name.
  fullTransformedEmail: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  openedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
}

type Department {
  id: ID!
  jobs: [Job!]!
  name: String!
}

type dimensions {
  cm: String
  in: String
}

input DislikeArtworkInput {
  artworkID: String!
  clientMutationId: String
  remove: Boolean!
}

type DislikeArtworkPayload {
  artwork: Artwork
  clientMutationId: String
  me: Me!
}

input EditableLocation {
  # First line of an address
  address: String

  # Second line of an address
  address2: String

  # The city the location is based in
  city: String

  # The optional location coordinates. [lat, lng]
  coordinates: [Float!]

  # The county the location is based in
  country: String

  # The county code of the location is based in
  countryCode: String

  # Postal code for a string
  postalCode: String

  # The (optional) name of the state for location
  state: String

  # The (optional) state code of the state for location
  stateCode: String

  # An optional display string for the location
  summary: String
}

type EditionSet implements Sellable {
  dimensions: dimensions
  displayPriceRange: Boolean
  editionOf: String

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  heightCm: Float

  # A globally unique ID.
  id: ID!

  # Price for internal partner display, requires partner access
  internalDisplayPrice: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isAcquireable: Boolean
  isForSale: Boolean
  isOfferable: Boolean
  isOfferableFromInquiry: Boolean
  isSold: Boolean
  listPrice: ListPrice
  price: String
  saleMessage: String

  # size bucket assigned to an artwork based on its dimensions
  sizeBucket: String

  # score assigned to an artwork based on its dimensions
  sizeScore: Float

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  widthCm: Float
}

enum EditionSetSorts {
  PRICE_ASC
}

input EndSaleInput {
  clientMutationId: String
  saleID: String
}

type EndSalePayload {
  clientMutationId: String
  sale: Sale
}

interface EntityWithFilterArtworksConnectionInterface {
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection

  # A globally unique ID.
  id: ID!
}

enum EventStatus {
  # Load all shows
  ALL

  # End date is in the past
  CLOSED

  # End date is in near future
  CLOSING_SOON

  # Start date or end date is in the future
  CURRENT

  # Start date is in the past and end date is in the future
  RUNNING

  # Special filtering option which is used to show running and upcoming shows
  RUNNING_AND_UPCOMING

  # Start date is in the future
  UPCOMING
}

enum ExhibitionPeriodFormat {
  # Long formatted period e.g. February 25 – May 24, 2015
  LONG

  # Short formatted period e.g. Feb 25 - May 24, 2015
  SHORT
}

type External {
  auctionHouses(size: Int, term: String): [ExternalAuctionHouse!]!
  fairs(size: Int, term: String): [ExternalFair!]!
  galleries(
    # Limit results to only galleries on Artsy
    artsyOnly: Boolean = true
    size: Int
    term: String
  ): [ExternalGallery!]!
}

type ExternalAuctionHouse {
  city: String
  country: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  name: String!
}

type ExternalFair {
  city: String
  country: String
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  name: String!
  startAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
}

type ExternalGallery {
  city: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  name: String!
  partner: Partner
  region: String
}

type ExternalPartner {
  city: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  name: String
}

type Fair implements EntityWithFilterArtworksConnectionInterface & Node {
  about(format: Format): String
  activeStartAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  articlesConnection(
    after: String
    before: String
    first: Int

    # Get only articles with 'standard', 'feature', 'series' or 'video' layouts.
    inEditorialFeed: Boolean
    last: Int
    page: Int
    size: Int
    sort: ArticleSorts
  ): ArticleConnection
  artistsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # Sorts for artists in a fair
    sort: FairArtistSorts
  ): ArtistConnection
  bannerSize: String
  cached: Int
  contact(format: Format): String
  counts: FairCounts
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A formatted description of the start to end dates
  exhibitionPeriod(
    # Formatting option to apply to exhibition period
    format: ExhibitionPeriodFormat
  ): String

  # The exhibitors with booths in this fair with letter.
  exhibitorsGroupedByName: [FairExhibitorsGroup]

  # Artworks Elastic Search results
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection
  followedContent: FollowedContent

  # A formatted description of when the fair starts or closes or if it is closed
  formattedOpeningHours: String
  hasFullFeature: Boolean
  hasHomepageSection: Boolean
  hasLargeBanner: Boolean
  hasListing: Boolean
  hours(format: Format): String
  href: String

  # A globally unique ID.
  id: ID!
  image: Image

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Are we currently in the fair's active period?
  isActive: Boolean
  isPublished: Boolean

  # Have we indexed this fair's artworks to tineye?
  isReverseImageSearchEnabled: Boolean!
  links(format: Format): String
  location: Location
  marketingCollectionSlugs: [String]!
  mobileImage: Image
  name: String
  organizer: FairOrganizer
  profile: Profile

  # This connection only supports forward pagination. We're replacing Relay's default cursor with one from Gravity.
  showsConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int

    # Number of artworks to return
    section: String

    # Sorts for shows in a fair
    sort: ShowSorts
    totalCount: Boolean = false
  ): ShowConnection

  # A slug ID.
  slug: ID!
  sponsoredContent: FairSponsoredContent
  startAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  summary(format: Format): String
  tagline: String
  tickets(format: Format): String
  ticketsLink: String
}

enum FairArtistSorts {
  NAME_ASC
  NAME_DESC
}

# A connection to a list of items.
type FairConnection {
  # A list of edges.
  edges: [FairEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type FairCounts {
  artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partners(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partnerShows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type FairEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Fair
}

type FairExhibitor {
  # Exhibitor name
  name: String
  partner: Partner

  # Exhibitors _id
  partnerID: String

  # Partner default profile id
  profileID: String

  # A slug ID.
  slug: ID!
}

type FairExhibitorsGroup {
  # The exhibitor data.
  exhibitors: [FairExhibitor]

  # Letter exhibitors group belongs to
  letter: String
}

type FairOrganizer {
  about(format: Format): String

  # A connection of articles related to a partner.
  articlesConnection(
    after: String
    before: String
    first: Int

    # Get only articles with with 'standard', 'feature', 'series' or 'video' layouts.
    inEditorialFeed: Boolean
    last: Int
    page: Int
    sort: ArticleSorts
  ): ArticleConnection
  fairsConnection(
    after: String
    before: String
    first: Int
    hasFullFeature: Boolean
    hasHomepageSection: Boolean
    hasListing: Boolean
    last: Int
    sort: FairSorts
    status: EventStatus
  ): FairConnection

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String
  profile: Profile
  profileID: ID

  # A slug ID.
  slug: ID!
  website: String
}

enum FairSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
}

type FairSponsoredContent {
  activationText: String
  pressReleaseUrl: String
}

# A Feature
type Feature {
  callout(format: Format): String
  description(format: Format): String

  # A globally unique ID.
  id: ID!
  image: Image

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isActive: Boolean!
  layout: FeatureLayouts!
  meta: FeatureMeta!
  name: String!

  # Features are composed of sets, which are themselves composed of items of various types
  setsConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: OrderedSetSorts = KEY_ASC
  ): OrderedSetConnection

  # A slug ID.
  slug: ID!
  subheadline(format: Format): String
}

# A connection to a list of items.
type FeatureConnection {
  # A list of edges.
  edges: [FeatureEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An illustrated link chosen to highlight a Gene from a given GeneFamily
type FeaturedGeneLink {
  href: String!
  image: Image
  internalID: String!
  title: String!
}

type FeaturedLink {
  description(format: Format): String

  # Parses the `href` to get the underlying entity
  entity: FeaturedLinkEntity
  href: String

  # A globally unique ID.
  id: ID!
  image: Image
  initials(length: Int = 3): String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  subtitle(format: Format): String
  title: String
}

# A connection to a list of items.
type FeaturedLinkConnection {
  # A list of edges.
  edges: [FeaturedLinkEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type FeaturedLinkEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FeaturedLink
}

union FeaturedLinkEntity = Artist | Gene | Partner

# An edge in a connection.
type FeatureEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Feature
}

type FeatureFlag {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  description: String
  enabled: Boolean!
  environments: [FeatureFlagEnvironments]

  # A globally unique ID.
  id: ID!
  impressionData: Boolean!
  lastSeenAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  name: String!
  project: String!
  stale: Boolean!
  type: String!
  variants: [FeatureFlagVariantType!]!
}

type FeatureFlagEnvironments {
  enabled: Boolean!
  name: String!
}

enum FeatureFlagsSortBy {
  CREATED_AT
  NAME
}

input FeatureFlagStrategyInput {
  rollOut: Int = 100
  strategyType: FeatureFlagStrategyType
}

enum FeatureFlagStrategyType {
  # Simple on/off flag
  DEFAULT

  # For A/B tests, where you can specify a percentage of users to be served a variant
  FLEXIBLE_ROLLOUT
}

enum FeatureFlagToggleType {
  EXPERIMENT
  RELEASE
}

input FeatureFlagVariantInputName {
  name: String!
  stickiness: String = "sessionId"
  weight: Int!
  weightType: FeatureFlagVariantWeightType
}

type FeatureFlagVariantType {
  name: String!
  stickiness: String
  weight: Int!
  weightType: String
}

enum FeatureFlagVariantWeightType {
  VARIABLE
}

enum FeatureLayouts {
  DEFAULT
  FULL
}

# Meta-tag related fields for Features
type FeatureMeta {
  description: String!
  image: String
  name: String!
}

enum FeatureSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
}

type Feedback {
  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Feedback message
  message: String!
}

type FieldErrorResults {
  message: String!
  name: String!
}

# A connection to a list of items.
type FilterArtworksConnection implements ArtworkConnectionInterface & Node {
  # Returns aggregation counts for the given filter query.
  aggregations: [ArtworksAggregationResults]
  counts: FilterArtworksCounts

  # A list of edges.
  edges: [FilterArtworksEdge]
  facet: ArtworkFilterFacet

  # Artwork results.
  hits: [Artwork]
    @deprecated(reason: "Prefer to use `edges`. [Will be removed in v2]")

  # The ID of the object.
  id: ID!

  # Returns a list of merchandisable artists sorted by merch score.
  merchandisableArtists(
    # The number of artists to return
    size: Int = 12
  ): [Artist]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type FilterArtworksCounts {
  followedArtists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  total(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type FilterArtworksEdge implements ArtworkEdgeInterface {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artwork
}

input FilterArtworksInput {
  acquireable: Boolean
  additionalGeneIDs: [String]
  after: String
  aggregationPartnerCities: [String]
  aggregations: [ArtworkAggregation]
  artistID: String
  artistIDs: [String]
  artistNationalities: [String]
  artistSeriesID: String
  artistSeriesIDs: [String]
  atAuction: Boolean
  attributionClass: [String]
  before: String
  color: String
  colors: [String]
  dimensionRange: String
  excludeArtworkIDs: [String]
  extraAggregationGeneIDs: [String]
  first: Int
  forSale: Boolean
  geneID: String
  geneIDs: [String]
  height: String
  includeArtworksByFollowedArtists: Boolean
  includeMediumFilterInAggregation: Boolean
  inquireableOnly: Boolean
  keyword: String

  # When true, will only return exact keyword match
  keywordMatchExact: Boolean
  last: Int
  locationCities: [String]
  majorPeriods: [String]

  # When true, will only return `marketable` works (not nude or provocative).
  marketable: Boolean
  marketingCollectionID: String
  materialsTerms: [String]

  # A string from the list of allocations, or * to denote all mediums
  medium: String
  offerable: Boolean
  page: Int
  partnerCities: [String]
  partnerID: ID
  partnerIDs: [String]
  period: String
  periods: [String]
  priceRange: String
  saleID: ID
  size: Int

  # Filter results by Artwork sizes
  sizes: [ArtworkSizes]
  sort: String
  tagID: String
  width: String
}

type FilterPartners {
  aggregations: [PartnersAggregationResults]
  hits: [Partner]
  total: Int
}

type FilterSaleArtworksCounts {
  followedArtists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  total(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type FollowArtist {
  artist: Artist
  auto: Boolean

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
}

# A connection to a list of items.
type FollowArtistConnection {
  # A list of edges.
  edges: [FollowArtistEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type FollowArtistCounts {
  artists: Int
}

# An edge in a connection.
type FollowArtistEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowArtist
}

input FollowArtistInput {
  artistID: String!
  clientMutationId: String
  unfollow: Boolean = false
}

type FollowArtistPayload {
  artist: Artist
  clientMutationId: String
  me: Me!

  # Popular artists
  popularArtists(
    # Exclude these ids from results, may result in all artists being excluded.
    excludeArtistIDs: [String]

    # If true, will exclude followed artists for the user
    excludeFollowedArtists: Boolean

    # Number of results to return
    size: Int
  ): [Artist]
}

type FollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type FollowedArtistsArtworksGroup implements Node {
  artists: String
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  href: String

  # A globally unique ID.
  id: ID!
  image: Image
  publishedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  summary: String
}

# A connection to a list of items.
type FollowedArtistsArtworksGroupConnection {
  # A list of edges.
  edges: [FollowedArtistsArtworksGroupEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedArtistsArtworksGroupEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowedArtistsArtworksGroup
}

type FollowedContent {
  artists: [Artist]
  galleries: [Partner]
}

# A connection to a list of items.
type FollowedFairConnection {
  # A list of edges.
  edges: [FollowedFairEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedFairEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Fair
}

# A connection to a list of items.
type FollowedGalleryConnection {
  # A list of edges.
  edges: [FollowedGalleryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedGalleryEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Partner
}

type FollowedProfile {
  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  profile: Profile!
}

# A connection to a list of items.
type FollowedProfileConnection {
  # A list of edges.
  edges: [FollowedProfileEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type FollowedProfileEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowedProfile
}

# A connection to a list of items.
type FollowedShowConnection {
  # A list of edges.
  edges: [FollowedShowEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedShowEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Show
}

type FollowGene {
  gene: Gene

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
}

# A connection to a list of items.
type FollowGeneConnection {
  # A list of edges.
  edges: [FollowGeneEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type FollowGeneEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowGene
}

input FollowGeneInput {
  clientMutationId: String
  geneID: String
  unfollow: Boolean = false
}

type FollowGenePayload {
  clientMutationId: String
  gene: Gene
}

input FollowProfileInput {
  clientMutationId: String
  profileID: String
  unfollow: Boolean = false
}

type FollowProfilePayload {
  clientMutationId: String
  profile: Profile
}

type FollowsAndSaves {
  # A Connection of followed artists by current user
  artistsConnection(
    after: String
    before: String
    fairID: String
    first: Int
    last: Int
    page: Int
    size: Int
  ): FollowArtistConnection
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    private: Boolean = false
    size: Int
    sort: CollectionArtworkSorts = POSITION_DESC
  ): SavedArtworksConnection

  # A list of published artworks by followed artists (grouped by date and artists).
  bundledArtworksByArtistConnection(
    after: String
    before: String
    first: Int
    forSale: Boolean
    last: Int
    sort: ArtworkSorts
  ): FollowedArtistsArtworksGroupConnection

  # A list of the current user’s currently followed fair profiles
  fairsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): FollowedFairConnection

  # A list of the current user’s currently followed gallery profiles
  galleriesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): FollowedGalleryConnection

  # A list of the current user’s inquiry requests
  genesConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    size: Int
  ): FollowGeneConnection

  # A list of the current user’s currently followed partner profiles
  profilesConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    size: Int
  ): FollowedProfileConnection

  # A list of the current user’s currently followed shows
  showsConnection(
    after: String
    before: String

    # A string representing one of the supported cities
    city: String

    # Number of days which will be used to filter upcoming and closing soon shows
    dayThreshold: Int
    first: Int
    last: Int
    status: EventStatus
  ): FollowedShowConnection
}

input FollowShowInput {
  clientMutationId: String
  partnerShowID: String
  unfollow: Boolean = false
}

type FollowShowPayload {
  clientMutationId: String
  show: Show
}

enum Format {
  HTML
  MARKDOWN
  PLAIN
}

type FormattedDaySchedules {
  days: String
  hours: String
}

# The `FormattedNumber` type represents a number that can optionally be returnedas
# a formatted String. It does not try to coerce the type.
scalar FormattedNumber

# An entry from gemini
type GeminiEntry {
  # The token that represents the gemini entry.
  token: String!
}

type Gene implements Node & Searchable {
  artistsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  cached: Int
  description(format: Format): String
  displayLabel: String
  displayName: String

  # Artworks Elastic Search results
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection
  href: String

  # A globally unique ID.
  id: ID!
  image: Image
  imageUrl: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isFollowed: Boolean
  isPublished: Boolean
  meta: GeneMeta!
  mode: String
  name: String

  # A list of genes similar to the specified gene
  similar(
    after: String
    before: String

    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    excludeGeneIDs: [String]
    first: Int
    last: Int
  ): GeneConnection

  # A slug ID.
  slug: ID!
  trendingArtists(sample: Int): [Artist]
}

# A connection to a list of items.
type GeneConnection {
  # A list of edges.
  edges: [GeneEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type GeneEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Gene
}

# A user-facing thematic grouping of Genes
type GeneFamily {
  featuredGeneLinks: [FeaturedGeneLink]
  genes: [Gene]

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String!

  # A slug ID.
  slug: ID!
}

# A connection to a list of items.
type GeneFamilyConnection {
  # A list of edges.
  edges: [GeneFamilyEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type GeneFamilyEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: GeneFamily
}

# Meta tags for Gene pages
type GeneMeta {
  description: String!
}

type GravityMutationError {
  detail: String
  error: String
  fieldErrors: [FieldErrorResults]
  message: String!
  statusCode: Int
  type: String
}

# A Hero Unit
type HeroUnit {
  # Main Hero Unit content.
  body: String!
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Optional image credit line.
  credit: String
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A globally unique ID.
  id: ID!

  # The main image for the Hero Unit.
  image: Image

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Optional label for above the title.
  label: String
  link: HeroUnitLink!

  # Dictates the order of the Hero Units.
  position: Int
  startAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # The main headline for the Hero Unit.
  title: String!
}

# A connection to a list of items.
type HeroUnitConnection {
  # A list of edges.
  edges: [HeroUnitEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type HeroUnitEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: HeroUnit
}

type HeroUnitLink {
  # Text for the CTA of the Hero Unit.
  text: String!

  # URL for the CTA of the Hero Unit.
  url: String!
}

type HighestBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  display: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isCancelled: Boolean
  number: Int
}

type Highlights {
  # List of curated genes that are broad collecting. (Meant for e.g. suggestions in on-boarding.)
  broadCollectingGenes: [Gene]

  # Popular artists
  popularArtists(
    # Exclude these ids from results, may result in all artists being excluded.
    excludeArtistIDs: [String]

    # If true, will exclude followed artists for the user
    excludeFollowedArtists: Boolean

    # Number of results to return
    size: Int
  ): [Artist]
}

type HomePage {
  # Single artist module to show on the home screen.
  artistModule(
    # Module identifier.
    key: HomePageArtistModuleTypes
  ): HomePageArtistModule

  # Artist modules to show on the home screen
  artistModules: [HomePageArtistModule]

  # Single artwork module to show on the home screen
  artworkModule(
    # ID of followed artist to target for related artist rails
    followedArtistID: String

    # ID of generic gene rail to target
    id: String

    # Module key
    key: HomePageArtworkModuleTypes

    # ID of related artist to target for related artist rails
    relatedArtistID: String
  ): HomePageArtworkModule

  # Artwork modules to show on the home screen
  artworkModules(
    # Exclude certain modules
    exclude: [HomePageArtworkModuleTypes] = []

    # Include certain modules and return these modules only
    include: [HomePageArtworkModuleTypes]

    # Maximum number of followed genes to return, disable with a negative number
    maxFollowedGeneRails: Int = 1

    # Maximum number of modules to return, disable limit with a negative number
    maxRails: Int = 8

    # The preferred order of modules, defaults to order returned by Gravity
    order: [HomePageArtworkModuleTypes]
  ): [HomePageArtworkModule]
  fairsModule: HomePageFairsModule

  # A list of enabled hero units to show on the requested platform
  heroUnits(platform: HomePageHeroUnitPlatform!): [HomePageHeroUnit]
  onboardingModule: HomePageMyCollectionOnboardingModule
  salesModule: HomePageSalesModule
}

type HomePageArtistModule implements Node {
  # A globally unique ID.
  id: ID!

  # Module identifier.
  key: String
  results: [Artist]
}

enum HomePageArtistModuleTypes {
  # The curated trending artists.
  CURATED_TRENDING

  # The most searched for artists.
  POPULAR

  # Artists recommended for the specific user.
  SUGGESTED

  # The trending artists.
  TRENDING
}

type HomePageArtworkModule implements Node {
  context: HomePageArtworkModuleContext

  # A globally unique ID.
  id: ID!
  isDisplayable: Boolean
  key: String
  params: HomePageModulesParams
  results: [Artwork]
  title: String
}

union HomePageArtworkModuleContext =
    Fair
  | FollowArtists
  | Gene
  | HomePageFollowedArtistArtworkModule
  | HomePageRelatedArtistArtworkModule
  | Sale
  | TrendingArtists

enum HomePageArtworkModuleTypes {
  ACTIVE_BIDS
  CURRENT_FAIRS
  FOLLOWED_ARTIST
  FOLLOWED_ARTISTS
  FOLLOWED_GALLERIES
  FOLLOWED_GENES
  GENERIC_GENES
  LIVE_AUCTIONS
  POPULAR_ARTISTS
  RECENTLY_VIEWED_WORKS
  RECOMMENDED_WORKS
  RELATED_ARTISTS
  SAVED_WORKS
  SIMILAR_TO_RECENTLY_VIEWED
  SIMILAR_TO_SAVED_WORKS
}

type HomePageFairsModule {
  results: [Fair]!
}

type HomePageFollowedArtistArtworkModule {
  artist: Artist
}

type HomePageHeroUnit {
  # The image to show, on desktop this defaults to the wide version.
  backgroundImageURL(version: HomePageHeroUnitImageVersion): String
  cached: Int
  creditLine: String
  heading: String
  href: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  linkText: String
  mode: HomePageHeroUnitMode

  # A slug ID.
  slug: ID!
  subtitle: String
  title: String
  titleImageURL(retina: Boolean): String
}

enum HomePageHeroUnitImageVersion {
  NARROW
  WIDE
}

enum HomePageHeroUnitMode {
  CENTERED_DARK
  CENTERED_LIGHT
  LEFT_DARK
  LEFT_LIGHT
  RIGHT_DARK
  RIGHT_LIGHT
}

enum HomePageHeroUnitPlatform {
  DESKTOP
  MARTSY
  MOBILE
}

type HomePageModulesParams {
  followedArtistID: ID
  geneID: String

  # An optional type-specific ID.
  internalID: ID
  medium: String
  priceRange: String
  relatedArtistID: ID
}

type HomePageMyCollectionOnboardingModule {
  showMyCollectionCard: Boolean!
  showSWACard: Boolean!
}

type HomePageRelatedArtistArtworkModule {
  artist: Artist
  basedOn: Artist
}

type HomePageSalesModule {
  results: [Sale]!
}

type IdentityVerification {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Email of the identity verification's owner
  email: String

  # A globally unique ID.
  id: ID!

  # ID of the admin or user (self) that initiated this IDV request
  initiatorID: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  invitationExpiresAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Name of the identity verification's owner
  name: String

  # ID of the order the user was placing when this IDV request was created
  orderID: String

  # The overrides associated with an identity verification
  overrides: [IdentityVerificationOverride]

  # Page URL sent to the identify verification's owner
  pageURL: String

  # ID of the auction the user was registering for when this IDV request was created
  saleID: String

  # The scan references (i.e., results) associated with an identity verification
  scanReferences: [IdentityVerificationScanReference]

  # Where the identity verification is in its lifecycle
  state: String!

  # User ID of the identity verification's owner
  userID: String
}

# A connection to a list of items.
type IdentityVerificationConnection {
  # A list of edges.
  edges: [IdentityVerificationEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type IdentityVerificationEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: IdentityVerification
}

type IdentityVerificationEmail {
  created_at(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Email of the identity verification's owner
  email: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Name of the identity verification's owner
  name: String

  # Identity verification lifecycle state
  state: String!
  updated_at(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # User ID of the identity verification's owner
  userID: String
}

type IdentityVerificationEmailMutationFailureType {
  mutationError: GravityMutationError
}

type IdentityVerificationEmailMutationSuccessType {
  identityVerification: IdentityVerification
  identityVerificationEmail: IdentityVerificationEmail
    @deprecated(reason: "use identityVerification instead")
}

union IdentityVerificationEmailMutationType =
    IdentityVerificationEmailMutationFailureType
  | IdentityVerificationEmailMutationSuccessType

type IdentityVerificationOverride {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  creator: User

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Overridden state
  newState: String!

  # Un-overridden state
  oldState: String!
  reason: String!

  # User ID of the override's creator
  userID: String
}

type IdentityVerificationOverrideMutationFailure {
  mutationError: GravityMutationError
}

type IdentityVerificationOverrideMutationSuccess {
  identityVerification: IdentityVerification
}

type IdentityVerificationScanReference {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  extractedFirstName: String
  extractedIdFailReason: String
  extractedLastName: String
  extractedSimilarityFailReason: String
  finishedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  jumioID: String!
  result: String
}

type Image {
  aspectRatio: Float!
  caption: String
  cropped(
    height: Int!

    # Value from 0-100; [1x, 2x]
    quality: [Int!]

    # Version to utilize in order of preference
    version: [String]
    width: Int!
  ): CroppedImageUrl
  deepZoom: DeepZoom
  height: Int
  href: String
  imageURL: String
  imageVersions: [String]

  # An optional type-specific ID.
  internalID: ID
  isDefault: Boolean
  isZoomable: Boolean
  maxTiledHeight: Int
  maxTiledWidth: Int
  orientation: String
  originalHeight: Int
  originalWidth: Int

  # Value to use when `padding-bottom` for fluid image placeholders
  placeholder: String

  # Order position of the image, within the images array of the artwork. (1-indexed)
  position: Int
  resized(
    height: Int

    # Value from 0-100; [1x, 2x]
    quality: [Int!]

    # Version to utilize in order of preference
    version: [String]
    width: Int
  ): ResizedImageUrl
  tileBaseURL: String
  tileFormat: String
  tileSize: Int
  title: String
  url(version: [String]): String
  versions: [String]
  width: Int
}

type ImageSearch {
  # File stream transfer encoding
  encoding: String!

  # File name
  filename: String!

  # File MIME type. Provided by the client and can’t be trusted
  mimetype: String!
}

type InputAddress {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  postalCode: String!
  region: String
}

type InputAddressFields {
  address: InputAddress
  lines: [String]
}

type InquirerCollectorProfile {
  artsyUserSince(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  bio: String
  collectorLevel: Int

  # List of artists the Collector is interested in.
  collectorProfileArtists: [CollectorProfileArtists]
  companyName: String
  companyWebsite: String
  confirmedBuyerAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  email: String
  emailConfirmed: Boolean
    @deprecated(
      reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead"
    )
  icon: Image

  # A globally unique ID.
  id: ID!
  identityVerified: Boolean
    @deprecated(
      reason: "identityVerified is going to be removed, use isIdentityVerified instead"
    )
  initials(length: Int = 3): String
  institutionalAffiliations: String
  intents: [String]

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isActiveBidder: Boolean
  isActiveInquirer: Boolean
  isEmailConfirmed: Boolean
  isIdentityVerified: Boolean
  isProfileComplete: Boolean
  location: MyLocation
  loyaltyApplicantAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  name: String

  # Collector's position with relevant institutions
  otherRelevantPositions: String

  # User ID of the collector profile's owner
  ownerID: ID!
  privacy: String
  profession: String
  professionalBuyerAppliedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  professionalBuyerAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  selfReportedPurchases: String
  userInterests: [UserInterest]!
}

union InquiryItemType = Artwork | Show

type InquiryQuestion {
  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  question: String!
}

input InquiryQuestionInput {
  details: String
  questionID: String!
}

# A request to inquire on an artwork
type InquiryRequest {
  contactGallery: Boolean

  # A globally unique ID.
  id: ID!
  inquireable: InquiryItemType
  inquirer: User

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  questions: [String]
  shippingLocation: Location
}

enum Intents {
  BUY_ART_AND_DESIGN
  FIND_ART_EXHIBITS
  LEARN_ABOUT_ART
  READ_ART_MARKET_NEWS
  RESEARCH_ART_PRICES
  SELL_ART_AND_DESIGN
}

# Fields of an invoice (currently from Lewitt)
type Invoice implements Node {
  # A globally unique ID.
  id: ID!
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # A type-specific ID likely used as a database ID.
  internalID: ID!
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # Lewitt's invoice id.
  lewittInvoiceID: String!
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # Link to public checkout page.
  paymentURL: String
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # Current state of invoice.
  state: InvoiceState
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # A formatted price with various currency formatting options.
  total(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )
}

enum InvoiceState {
  PAID
  REFUNDED
  UNPAID
  VOID
}

type Job {
  # HTML of job listing
  content: String!

  # The url of the job listing on Greenhouse
  externalURL: String!
  id: ID!
  location: String!
  title: String!
  updatedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type LatLng {
  lat: Float
  lng: Float
}

enum LengthUnitPreference {
  CM
  IN
}

input LinkAuthenticationMutationInput {
  # Unique Apple user id. **Required** for Apple authentication.
  appleUid: String
  clientMutationId: String

  # User email, only used for Apple authentication.
  email: String

  # JWT used for Apple authentication.
  idToken: String

  # User name, only used for Apple authentication.
  name: String

  # An OAuth token.
  oauthToken: String!

  # A 3rd party account provider, such as facebook or apple.
  provider: AuthenticationProvider!
}

type LinkAuthenticationMutationPayload {
  clientMutationId: String
  me: Me!
}

union ListPrice = Money | PriceRange

enum LiveAuctionRole {
  OPERATOR
  PARTICIPANT
}

type Location {
  address: String
  address2: String
  cached: Int
  city: String
  coordinates: LatLng
  country: String
  daySchedules: [DaySchedule]

  # Alternate Markdown-supporting free text representation of a location's opening hours
  dayScheduleText: String
  display: String
  displayCountry: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!

  # Union returning opening hours in formatted structure or a string
  openingHours: OpeningHoursUnion
  phone: String
  postalCode: String
  state: String
  summary: String
}

# A connection to a list of items.
type LocationConnection {
  # A list of edges.
  edges: [LocationEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type LocationEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Location
}

# The `Long` scalar type represents 52-bit signed integers
scalar Long

# A lot in an auction containing merged SaleArtwork and LotState data, stitched from causality.
type Lot implements Node {
  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # The watched saleArtwork object.
  saleArtwork: SaleArtwork

  # A slug ID.
  slug: ID!
}

# A connection to a list of items.
type LotConnection {
  # A list of edges.
  edges: [LotEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type LotEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Lot
}

type LotStanding {
  # Your bid if it is currently winning
  activeBid: BidderPosition
  bidder: Bidder

  # You are winning and reserve is met
  isHighestBidder: Boolean

  # You are the leading bidder without regard to reserve
  isLeadingBidder: Boolean

  # Your most recent bid—which is not necessarily winning (may be higher or lower)
  mostRecentBid: BidderPosition
  sale: Sale
  saleArtwork: SaleArtwork
}

type MarkAllNotificationsAsReadFailure {
  mutationError: GravityMutationError
}

input MarkAllNotificationsAsReadInput {
  clientMutationId: String
}

type MarkAllNotificationsAsReadPayload {
  clientMutationId: String
  responseOrError: MarkAllNotificationsAsReadResponseOrError
}

union MarkAllNotificationsAsReadResponseOrError =
    MarkAllNotificationsAsReadFailure
  | MarkAllNotificationsAsReadSuccess

type MarkAllNotificationsAsReadSuccess {
  success: Boolean
}

type MarkdownContent {
  content(format: Format): String
}

type MarkNotificationAsReadFailure {
  mutationError: GravityMutationError
}

input MarkNotificationAsReadInput {
  clientMutationId: String
  id: String!
}

type MarkNotificationAsReadPayload {
  clientMutationId: String
  responseOrError: MarkNotificationAsReadResponseOrError
}

union MarkNotificationAsReadResponseOrError =
    MarkNotificationAsReadFailure
  | MarkNotificationAsReadSuccess

type MarkNotificationAsReadSuccess {
  success: Boolean
}

type MarkNotificationsAsSeenFailure {
  mutationError: GravityMutationError
}

input MarkNotificationsAsSeenInput {
  clientMutationId: String

  # Until what point of time notifications were seen. ISO8601 standard-formatted string.
  until: String!
}

type MarkNotificationsAsSeenPayload {
  clientMutationId: String
  responseOrError: MarkNotificationsAsSeenResponseOrError
}

union MarkNotificationsAsSeenResponseOrError =
    MarkNotificationsAsSeenFailure
  | MarkNotificationsAsSeenSuccess

type MarkNotificationsAsSeenSuccess {
  success: Boolean
}

union Match =
    Article
  | Artist
  | Artwork
  | Fair
  | Feature
  | Gene
  | Page
  | Profile
  | Sale
  | Show
  | Tag

# A connection to a list of items.
type MatchConnection {
  # A list of edges.
  edges: [MatchEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type MatchEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Match
}

type Me implements Node {
  # A connection of artist recommendations for the current user.
  artistRecommendations(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
  ): ArtistConnection

  # A list of the current user’s inquiry requests
  artworkInquiriesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkInquiryConnection

  # A connection of artwork recommendations for the current user.
  artworkRecommendations(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
  ): ArtworkConnection

  # A list of the auction results by followed artists
  auctionResultsByFollowedArtists(
    after: String

    # Allow auction results with empty created date values
    allowEmptyCreatedDates: Boolean = true
    before: String

    # Filter auction results by category (medium)
    categories: [String]

    # Filter auction results by earliest created at year
    earliestCreatedYear: Int
    first: Int
    last: Int

    # Filter auction results by latest created at year
    latestCreatedYear: Int

    # Filter auction results by organizations
    organizations: [String]

    # When true, will only return records for allowed artists.
    recordsTrusted: Boolean = false

    # Filter auction results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: AuctionResultSorts

    # State of the returned auction results (can be past, upcoming, or all)
    state: AuctionResultsState = ALL
  ): AuctionResultConnection

  # A list of authenticated external services
  authentications: [AuthenticationType!]!

  # A list of the current user's bank accounts
  bankAccounts(
    after: String
    before: String
    first: Int
    last: Int
    type: BankAccountTypes
  ): BankAccountConnection

  # Returns a single bidder position
  bidderPosition(id: String!): BidderPositionResult

  # A list of the current user's bidder positions
  bidderPositions(
    # Only the bidder positions on a specific artwork
    artworkID: String

    # Only the most recent bidder positions per artwork.
    current: Boolean

    # Only the bidder positions for a specific auction
    saleID: String
  ): [BidderPosition]

  # A list of the current user’s bidder registrations
  bidders(
    # Limit results to bidders in active auctions
    active: Boolean

    # The slug or ID of a Sale
    saleID: String
  ): [Bidder]

  # The current user's status relating to bids on artworks
  bidderStatus(artworkID: String!, saleID: String!): LotStanding
  bio: String

  # Whether user is allowed to request email confirmation
  canRequestEmailConfirmation: Boolean!

  # A collection belonging to the current user
  collection(id: String!): Collection
  collectionsConnection(
    after: String
    before: String
    default: Boolean
    first: Int
    includesArtworkID: String
    last: Int
    page: Int
    saves: Boolean
    size: Int
    sort: CollectionSorts
  ): CollectionsConnection
  collectorLevel: Int

  # Current user's collector profile.
  collectorProfile: CollectorProfileType

  # A conversation, usually between a user and a partner
  conversation(
    # The ID of the Conversation
    id: String!
  ): Conversation

  # Conversations, usually between a user and partner.
  conversationsConnection(
    after: String
    artistId: String
    before: String
    dismissed: Boolean
    first: Int
    fromId: String
    hasMessage: Boolean
    hasReply: Boolean
    last: Int
    partnerId: String
    toBeReplied: Boolean
    type: ConversationsInputMode
  ): ConversationConnection
  counts: MeCounts
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A list of the current user’s credit cards
  creditCards(
    after: String
    before: String
    first: Int
    last: Int
  ): CreditCardConnection

  # Currency preference of the user
  currencyPreference: CurrencyPreference!
  email: String

  # User has confirmed their email address
  emailConfirmed: Boolean!
    @deprecated(
      reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead"
    )

  # Frequency of marketing emails.
  emailFrequency: String
  followsAndSaves: FollowsAndSaves
  hasCreditCards: Boolean
  hasPassword: Boolean!
  hasQualifiedCreditCards: Boolean
  hasSecondFactorEnabled: Boolean!
  icon: Image

  # A globally unique ID.
  id: ID!

  # An identity verification that the user has access to
  identityVerification(
    # ID of the IdentityVerification
    id: String!
  ): IdentityVerification
  identityVerified: Boolean
    @deprecated(
      reason: "identityVerified is going to be removed, use isIdentityVerified instead"
    )
  initials(length: Int = 3): String
  inquiryIntroduction: String

  # A type-specific ID.
  internalID: ID!

  # An invoice
  invoice(
    # The ID of the Conversation
    conversationId: String!

    # The ID of the invoice
    invoiceId: String!
  ): Invoice
    @deprecated(
      reason: "Payment Request was deprecated. The field was kept for legacy client support. [Will be removed in v2]"
    )
  isCollector: Boolean!

  # User has confirmed their email address
  isEmailConfirmed: Boolean!
  isIdentityVerified: Boolean

  # List of lab features for this user
  labFeatures: [String!]!

  # Length unit preference of the user
  lengthUnitPreference: LengthUnitPreference!
  location: MyLocation

  # Sale Artworks search results
  lotsByFollowedArtistsConnection(
    after: String

    # Please make sure to supply the TOTAL aggregation if you will be setting any aggregations
    aggregations: [SaleArtworkAggregation]
    artistIDs: [String]
    before: String
    biddableSale: Boolean
    estimateRange: String
    excludeClosedLots: Boolean
    first: Int
    geneIDs: [String]

    # When called under the Me field, this defaults to true. Otherwise it defaults to false
    includeArtworksByFollowedArtists: Boolean
    isAuction: Boolean
    last: Int
    liveSale: Boolean
    marketable: Boolean
    page: Int
    saleID: ID

    # Same as saleID argument, but matches the argument type of `sale(id: 'foo')` root field
    saleSlug: String
    size: Int
    sort: String
    userId: String
  ): SaleArtworksConnection

  # The current user's status relating to bids on artworks
  lotStanding(
    artworkID: String
    saleArtworkID: String
    saleID: String
  ): LotStanding

  # A list of the current user's auction standings for given lots
  lotStandings(
    # Only includes lots on which you have a leading bidder position.
    activePositions: Boolean

    # Only the lot standings on a specific artwork
    artworkID: String

    # Only the lot standings for currently open or closed auctions.
    live: Boolean
    saleArtworkID: String

    # Only the lot standings for a specific auction
    saleID: String
  ): [LotStanding]
  myBids: MyBids

  # A list of auction results from artists in My Collection
  myCollectionAuctionResults(
    after: String

    # Allow auction results with empty created date values
    allowEmptyCreatedDates: Boolean = true
    before: String

    # Filter auction results by category (medium)
    categories: [String]

    # Filter auction results by earliest created at year
    earliestCreatedYear: Int
    first: Int
    last: Int

    # Filter auction results by latest created at year
    latestCreatedYear: Int

    # Filter auction results by organizations
    organizations: [String]

    # When true, will only return records for allowed artists.
    recordsTrusted: Boolean = false

    # Filter auction results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: AuctionResultSorts

    # State of the returned auction results (can be past, upcoming, or all)
    state: AuctionResultsState = ALL
  ): AuctionResultConnection
  myCollectionConnection(
    after: String

    # Filter by artist IDs
    artistIDs: [String!]
    before: String

    # Exclude artworks that have been purchased on Artsy and automatically added to the collection.
    excludePurchasedArtworks: Boolean = false
    first: Int
    last: Int
    page: Int
    size: Int
    sort: MyCollectionArtworkSorts

    # Sort by most recent price insight updates, filter out artworks without
    # insights and return artworks uniq by artist & medium.
    sortByLastAuctionResultDate: Boolean = false
  ): MyCollectionConnection

  # Info about the current user's my-collection
  myCollectionInfo: MyCollectionInfo
  name: String

  # A connection of new works by artists the user interacted with (sorted by publication date).
  newWorksByInterestingArtists(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
  ): ArtworkConnection

  # A list of artworks from galleries the user follows.
  newWorksFromGalleriesYouFollowConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection

  # Retrieve one user's notification by notification ID
  notification(
    # The ID of the Notification
    id: String!
  ): Notification

  # Collector's position with relevant institutions
  otherRelevantPosition: String
    @deprecated(reason: "Use `otherRelevantPositions` instead")

  # Collector's position with relevant institutions
  otherRelevantPositions: String
  paddleNumber: String

  # A list of the current user’s managed partners
  partners(size: Int): [Partner]

  # The user's most current pending identity verification, if it exists
  pendingIdentityVerification: IdentityVerification
  phone: String
  phoneNumber: PhoneNumberType
  priceRange: String
  priceRangeMax: Float
  priceRangeMin: Float
  privacy: String
  profession: String

  # The art quiz of a logged-in user
  quiz: Quiz!

  # This user should receive lot opening notifications
  receiveLotOpeningSoonNotification: Boolean

  # This user should receive new sales notifications
  receiveNewSalesNotification: Boolean

  # This user should receive new works notifications
  receiveNewWorksNotification: Boolean

  # This user should receive order notifications
  receiveOrderNotification: Boolean

  # This user should receive outbid notifications
  receiveOutbidNotification: Boolean

  # This user should receive partner show notifications
  receivePartnerShowNotification: Boolean

  # This user should receive promotional notifications
  receivePromotionNotification: Boolean

  # This user should receive purchase notifications
  receivePurchaseNotification: Boolean

  # This user should receive sale opening/closing notifications
  receiveSaleOpeningClosingNotification: Boolean

  # This user should receive viewing room notifications
  receiveViewingRoomNotification: Boolean
  recentlyViewedArtworkIds: [String]!

  # A list of the current user’s recently viewed artworks.
  recentlyViewedArtworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  saleRegistrationsConnection(
    after: String
    auctionState: AuctionState
    before: String
    first: Int

    #
    #         Only return sales matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]

    # Limit by auction.
    isAuction: Boolean = true
    last: Int

    # Limit by live status.
    live: Boolean = true

    # Limit by published status.
    published: Boolean = true

    # Returns sales the user has registered for if true, returns sales the user has not registered for if false.
    registered: Boolean
    sort: SaleSorts

    # If present, will search by term
    term: String
  ): SaleRegistrationConnection
  shareFollows: Boolean!

  # A list of shows by followed artists
  showsByFollowedArtists(
    after: String
    before: String
    first: Int
    last: Int
    sort: ShowSorts

    # Filter shows by chronological event status
    status: EventStatus = CURRENT
  ): ShowConnection

  # A list of shows for the user (pagination logic might be broken)
  showsConnection(
    after: String
    before: String
    first: Int

    # Include shows near the user's location based on the IP address
    includeShowsNearIpBasedLocation: Boolean = false

    # When set, this IP address will be used to look up the location, instead of the request's IP address.
    ip: String
    last: Int

    # Include shows within a radius of the provided location
    near: Near
    sort: ShowSorts

    # Filter shows by chronological event status
    status: EventStatus = CURRENT
  ): ShowConnection

  # A list of artworks similar to recently viewed artworks.
  similarToRecentlyViewedConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  type: String

  # The count of conversations with unread messages.
  unreadConversationCount: Int!

  # A count of unread notifications.
  unreadNotificationsCount: Int!

  # A count of unseen notifications.
  unseenNotificationsCount: Int!

  # Get a user interest
  userInterest(
    # The ID of the UserInterest
    id: String
  ): UserInterest
  userInterestsConnection(
    after: String
    before: String

    # UserInterest category to select. 'collected_before' or 'interested_in_collecting' category
    category: UserInterestCategory
    first: Int

    # Id of the user interests to return if found. Can be an 'Artist' Id or a 'Gene' Id
    interestID: String

    # UserInterest InterestType to select. 'Artist' or 'Gene' type
    interestType: UserInterestInterestType
    last: Int
  ): UserInterestConnection

  # A list of lots a user is watching.
  watchedLotConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): LotConnection
}

type MeCounts {
  followedArtists: Int!
  savedArtworks: Int!
  savedSearches: Int!
}

type MergeArtistsFailure {
  mutationError: GravityMutationError
}

# A map describing the field-level overrides that should be part of this merge.
# - Each **key** is a field name such as `nationality`
# - Each **value** is a BSON ID that indicates the artist record from which we will _prefer_ the value for the given field
input MergeArtistsFieldOverrides {
  # ID of the artist record that contains the `birthday` value that we want to preserve.
  birthday: ID

  # ID of the artist record that contains the `deathday` value that we want to preserve.
  deathday: ID

  # ID of the artist record that contains the `gender` value that we want to preserve.
  gender: ID

  # ID of the artist record that contains the `hometown` value that we want to preserve.
  hometown: ID

  # ID of the artist record that contains the `location` value that we want to preserve.
  location: ID

  # ID of the artist record that contains the `nationality` value that we want to preserve.
  nationality: ID
}

input MergeArtistsMutationInput {
  # The database ID of the "bad" artist record(s), which will be **discarded** after the merge
  badIds: [String!]!
  clientMutationId: String

  # The database ID of the "good" artist record, which will be **kept** after the
  # merge. Relevant fields and associations from the bad records will be merged into this one.
  goodId: String!

  # A map describing the field-level overrides that should be part of this merge.
  overrides: MergeArtistsFieldOverrides
}

type MergeArtistsMutationPayload {
  clientMutationId: String

  # On success: the "good" artist record, which was kept after the merge. Upon a
  # successful merge this record may have been updated.
  mergeArtistsResponseOrError: MergeArtistsResponseOrError
}

union MergeArtistsResponseOrError = MergeArtistsFailure | MergeArtistsSuccess

type MergeArtistsSuccess {
  artist: Artist
}

# A message in a conversation.
type Message implements Node {
  attachments: [Attachment]

  # Unaltered text if possible, otherwise `body`: a parsed/sanitized version from Sendgrid.
  body: String

  # Masked emails w/ display name of the recipients in copy.
  cc: [String!]!
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  deliveries: [Delivery]
  from: MessageInitiator

  # A globally unique ID.
  id: ID!

  # Impulse message id.
  impulseID: String! @deprecated(reason: "Prefer internalID")

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  invoice: Invoice
    @deprecated(
      reason: "Payment Request was deprecated. The field was kept for legacy client support. [Will be removed in v2]"
    )

  # True if message is the first in the conversation.
  isFirstMessage: Boolean

  # True if message is from the user to the partner.
  isFromUser: Boolean

  # True if message is an invoice message
  isInvoice: Boolean
    @deprecated(
      reason: "Payment Request was deprecated. The field was kept for legacy client support. [Will be removed in v2]"
    )

  # Masked emails w/ display name of the recipients.
  to: [String!]!
}

# A connection to a list of items.
type MessageConnection {
  # A list of edges.
  edges: [MessageEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type MessageEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Message
}

# The participant who sent the message.
type MessageInitiator {
  email: String
  name: String
}

union MessageOrConversationEventType = ConversationEvent | Message

# A connection to a list of items.
type MessageOrConversationEventTypeConnection {
  # A list of edges.
  edges: [MessageOrConversationEventTypeEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type MessageOrConversationEventTypeEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: MessageOrConversationEventType
}

type MetaphysicsService {
  environment: String!
  queryTracing: Boolean!
  stitching: Boolean!
  stitchingConvection: Boolean!
  stitchingExchange: Boolean!
  stitchingGravity: Boolean!
}

type Money {
  # The ISO-4217 alphabetic currency code, as per https://en.wikipedia.org/wiki/ISO_4217
  currencyCode: String!

  # A pre-formatted price.
  display: String

  # An amount of money expressed in major units (like dollars).
  major(
    # ISO-4217 code of a destination currency for conversion
    convertTo: String
  ): Float!

  # An amount of money expressed in minor units (like cents).
  minor: Long!
}

type Mutation {
  # adds an item to an ordered set.
  addOrderedSetItem(
    input: addOrderedSetItemMutationInput!
  ): addOrderedSetItemMutationPayload

  # Add a role associated with a user
  addUserRole(input: addUserRoleMutationInput!): addUserRoleMutationPayload

  # Creates a new feature flag
  adminCreateFeatureFlag(
    input: AdminCreateFeatureFlagInput!
  ): AdminCreateFeatureFlagPayload

  # Deletes a feature flag
  adminDeleteFeatureFlag(
    input: AdminDeleteFeatureFlagInput!
  ): AdminDeleteFeatureFlagPayload

  # Toggles a feature flag on or off for a given environment
  adminToggleFeatureFlag(
    input: AdminToggleFeatureFlagInput!
  ): AdminToggleFeatureFlagPayload

  # Updates a feature flag
  adminUpdateFeatureFlag(
    input: AdminUpdateFeatureFlagInput!
  ): AdminUpdateFeatureFlagPayload

  # Add / remove artworks to / from collections
  artworksCollectionsBatchUpdate(
    input: ArtworksCollectionsBatchUpdateInput!
  ): ArtworksCollectionsBatchUpdatePayload

  # Update all artworks that belong to the partner
  bulkUpdatePartnerArtworks(
    input: BulkUpdatePartnerArtworksMutationInput!
  ): BulkUpdatePartnerArtworksMutationPayload

  # Create an account request
  createAccountRequest(
    input: CreateAccountRequestMutationInput!
  ): CreateAccountRequestMutationPayload

  # Create an advisory opportunity
  createAdvisoryOpportunity(
    input: createAdvisoryOpportunityMutationInput!
  ): createAdvisoryOpportunityMutationPayload

  # Create an artist
  createArtist(input: CreateArtistMutationInput!): CreateArtistMutationPayload

  # Create a bidder
  createBidder(input: CreateBidderInput!): CreateBidderPayload

  # Creates a bidder position
  createBidderPosition(input: BidderPositionInput!): BidderPositionPayload

  # Create a collection
  createCollection(input: createCollectionInput!): createCollectionPayload

  # Make inquiry about consignments
  createConsignmentInquiry(
    input: CreateConsignmentInquiryMutationInput!
  ): CreateConsignmentInquiryMutationPayload

  # Create a credit card
  createCreditCard(input: CreditCardInput!): CreditCardPayload

  # Creates a feature.
  createFeature(
    input: CreateFeatureMutationInput!
  ): CreateFeatureMutationPayload

  # Creates a featured link.
  createFeaturedLink(
    input: CreateFeaturedLinkMutationInput!
  ): CreateFeaturedLinkMutationPayload

  # Attach an gemini asset to a consignment submission
  createGeminiEntryForAsset(
    input: CreateGeminiEntryForAssetInput!
  ): CreateGeminiEntryForAssetPayload

  # Creates a hero unit.
  createHeroUnit(
    input: CreateHeroUnitMutationInput!
  ): CreateHeroUnitMutationPayload

  # Create an identity verification override
  createIdentityVerificationOverride(
    input: CreateIdentityVerificationOverrideMutationInput!
  ): CreateIdentityVerificationOverrideMutationPayload

  # Creates an ordered set.
  createOrderedSet(
    input: CreateOrderedSetMutationInput!
  ): CreateOrderedSetMutationPayload

  # Creates a static Markdown-backed page.
  createPage(input: CreatePageMutationInput!): CreatePageMutationPayload

  # Create a admin note for the user
  createUserAdminNote(
    input: createUserAdminNoteMutationInput!
  ): createUserAdminNoteMutationPayload

  # Creates a UserInterest on the logged in User's CollectorProfile.
  createUserInterest(
    input: CreateUserInterestMutationInput!
  ): CreateUserInterestMutationPayload

  # Creates a UserInterest for a user.
  createUserInterestForUser(
    input: CreateUserInterestForUserInput!
  ): CreateUserInterestForUserPayload

  # Collect Multiple Artists
  createUserInterests(
    input: CreateUserInterestsMutationInput!
  ): CreateUserInterestsMutationPayload

  # Create a sale profile for a user
  createUserSaleProfile(
    input: CreateUserSaleProfileMutationInput!
  ): CreateUserSaleProfileMutationPayload

  # Creates Verified Representative.
  createVerifiedRepresentative(
    input: CreateVerifiedRepresentativeInput!
  ): CreateVerifiedRepresentativePayload

  # Delete an artist
  deleteArtist(input: DeleteArtistInput!): DeleteArtistPayload

  # Deletes an image from an artwork in my collection
  deleteArtworkImage(input: DeleteArtworkImageInput!): DeleteArtworkImagePayload

  # Remove a bank account
  deleteBankAccount(input: DeleteBankAccountInput!): DeleteBankAccountPayload

  # Delete a collection
  deleteCollection(input: deleteCollectionInput!): deleteCollectionPayload

  # Soft-delete a conversation.
  deleteConversation(
    input: DeleteConversationMutationInput!
  ): DeleteConversationMutationPayload

  # Remove a credit card
  deleteCreditCard(input: DeleteCreditCardInput!): DeleteCreditCardPayload

  # deletes a feature.
  deleteFeature(
    input: DeleteFeatureMutationInput!
  ): DeleteFeatureMutationPayload

  # deletes a featured link.
  deleteFeaturedLink(
    input: DeleteFeaturedLinkMutationInput!
  ): DeleteFeaturedLinkMutationPayload

  # deletes a hero unit.
  deleteHeroUnit(
    input: deleteHeroUnitMutationInput!
  ): deleteHeroUnitMutationPayload

  # Delete User Artsy Account
  deleteMyAccountMutation(input: DeleteAccountInput!): DeleteAccountPayload

  # Remove the user icon
  deleteMyUserProfileIcon(input: DeleteUserIconInput!): DeleteUserIconPayload

  # deletes an ordered set.
  deleteOrderedSet(
    input: deleteOrderedSetMutationInput!
  ): deleteOrderedSetMutationPayload

  # deletes an item to an ordered set.
  deleteOrderedSetItem(
    input: deleteOrderedSetItemMutationInput!
  ): deleteOrderedSetItemMutationPayload

  # Deletes a page.
  deletePage(input: DeletePageMutationInput!): DeletePageMutationPayload

  # Delete a User
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  # delete an admin note for the user
  deleteUserAdminNote(
    input: deleteUserAdminNoteMutationInput!
  ): deleteUserAdminNoteMutationPayload

  # Deletes a UserInterest on the logged in User's CollectorProfile.
  deleteUserInterest(
    input: DeleteUserInterestMutationInput!
  ): DeleteUserInterestMutationPayload

  # Delete a UserInterest.
  deleteUserInterestForUser(
    input: DeleteUserInterestForUserInput!
  ): DeleteUserInterestForUserPayload

  # Deletes multiple UserInterests on the logged in User's CollectorProfile.
  deleteUserInterests(
    input: DeleteUserInterestsMutationInput!
  ): DeleteUserInterestsMutationPayload

  # Delete a role associated with a user
  deleteUserRole(
    input: deleteUserRoleMutationInput!
  ): deleteUserRoleMutationPayload

  # Deletes a Verified Representative.
  deleteVerifiedRepresentative(
    input: DeleteVerifiedRepresentativeMutationInput!
  ): DeleteVerifiedRepresentativeMutationPayload

  # Add (or remove) an artwork to (from) a users dislikes.
  dislikeArtwork(input: DislikeArtworkInput!): DislikeArtworkPayload

  # Mark sale as ended.
  endSale(input: EndSaleInput!): EndSalePayload

  # Follow (or unfollow) an artist
  followArtist(input: FollowArtistInput!): FollowArtistPayload

  # Follow (or unfollow) an gene
  followGene(input: FollowGeneInput!): FollowGenePayload

  # Follow (or unfollow) a profile
  followProfile(input: FollowProfileInput!): FollowProfilePayload

  # Follow (or unfollow) a show
  followShow(input: FollowShowInput!): FollowShowPayload

  # Links a 3rd party account
  linkAuthentication(
    input: LinkAuthenticationMutationInput!
  ): LinkAuthenticationMutationPayload

  # Mark all unread notifications as read
  markAllNotificationsAsRead(
    input: MarkAllNotificationsAsReadInput!
  ): MarkAllNotificationsAsReadPayload

  # Mark an unread notifications as read
  markNotificationAsRead(
    input: MarkNotificationAsReadInput!
  ): MarkNotificationAsReadPayload

  # Mark notifications as seen
  markNotificationsAsSeen(
    input: MarkNotificationsAsSeenInput!
  ): MarkNotificationsAsSeenPayload

  # Merge multiple artist records in order to deduplicate artists
  mergeArtists(input: MergeArtistsMutationInput!): MergeArtistsMutationPayload

  # Create an artwork in my collection
  myCollectionCreateArtwork(
    input: MyCollectionCreateArtworkInput!
  ): MyCollectionCreateArtworkPayload

  # Deletes an artwork from my collection
  myCollectionDeleteArtwork(
    input: MyCollectionDeleteArtworkInput!
  ): MyCollectionDeleteArtworkPayload

  # Update an artwork in my collection
  myCollectionUpdateArtwork(
    input: MyCollectionUpdateArtworkInput!
  ): MyCollectionUpdateArtworkPayload

  # Attach an gemini asset to a consignment submission
  requestCredentialsForAssetUpload(
    input: RequestCredentialsForAssetUploadInput!
  ): RequestCredentialsForAssetUploadPayload

  # Request price estimate of an artwork
  requestPriceEstimate(
    input: RequestPriceEstimateInput!
  ): RequestPriceEstimatePayload

  # Save (or remove) an artwork to (from) a users default collection.
  saveArtwork(input: SaveArtworkInput!): SaveArtworkPayload

  # Send a confirmation email
  sendConfirmationEmail(
    input: SendConfirmationEmailMutationInput!
  ): SendConfirmationEmailMutationPayload

  # Appending a message to a conversation thread
  sendConversationMessage(
    input: SendConversationMessageMutationInput!
  ): SendConversationMessageMutationPayload

  # Send a feedback message
  sendFeedback(input: SendFeedbackMutationInput!): SendFeedbackMutationPayload

  # Send a identity verification email
  sendIdentityVerificationEmail(
    input: SendIdentityVerificationEmailMutationInput!
  ): SendIdentityVerificationEmailMutationPayload

  # Start an identity verification flow for a pending identity verification
  startIdentityVerification(
    input: startIdentityVerificationMutationInput!
  ): startIdentityVerificationMutationPayload

  # Create an artwork inquiry request
  submitInquiryRequestMutation(
    input: SubmitInquiryRequestMutationInput!
  ): SubmitInquiryRequestMutationPayload

  # Triggers a campaign send.
  triggerCampaign(input: TriggerCampaignInput!): TriggerCampaignPayload

  # Unlinks a 3rd party account
  unlinkAuthentication(
    input: UnlinkAuthenticationMutationInput!
  ): UnlinkAuthenticationMutationPayload

  # Update the artist
  updateArtist(input: UpdateArtistMutationInput!): UpdateArtistMutationPayload

  # Updates an artwork.
  updateArtwork(
    input: UpdateArtworkMutationInput!
  ): UpdateArtworkMutationPayload

  # Updates the flags on a partner.
  updateCMSLastAccessTimestamp(
    input: UpdateCMSLastAccessTimestampMutationInput!
  ): UpdateCMSLastAccessTimestampMutationPayload

  # Update a collection
  updateCollection(input: updateCollectionInput!): updateCollectionPayload

  # Updating a collector profile (loyalty applicant status).
  updateCollectorProfile(
    input: UpdateCollectorProfileInput!
  ): UpdateCollectorProfilePayload

  # Updating a collector profile (loyalty applicant status).
  updateCollectorProfileWithID(
    input: UpdateCollectorProfileWithIDInput!
  ): UpdateCollectorProfileWithIDPayload

  # Update a conversation.
  updateConversation(
    input: UpdateConversationMutationInput!
  ): UpdateConversationMutationPayload

  # updates a feature.
  updateFeature(
    input: UpdateFeatureMutationInput!
  ): UpdateFeatureMutationPayload

  # updates a featured link.
  updateFeaturedLink(
    input: UpdateFeaturedLinkMutationInput!
  ): UpdateFeaturedLinkMutationPayload

  # updates a hero unit.
  updateHeroUnit(
    input: UpdateHeroUnitMutationInput!
  ): UpdateHeroUnitMutationPayload

  # Update a message.
  updateMessage(
    input: UpdateMessageMutationInput!
  ): UpdateMessageMutationPayload

  # Updates the logged in user's password
  updateMyPassword(
    input: UpdateMyPasswordMutationInput!
  ): UpdateMyPasswordMutationPayload

  # Update the current logged in user.
  updateMyUserProfile(input: UpdateMyProfileInput!): UpdateMyProfilePayload

  # Update notification preferences.
  updateNotificationPreferences(
    input: updateNotificationPreferencesMutationInput!
  ): updateNotificationPreferencesMutationPayload

  # updates an ordered set.
  updateOrderedSet(
    input: UpdateOrderedSetMutationInput!
  ): UpdateOrderedSetMutationPayload

  # Updates a page.
  updatePage(input: UpdatePageMutationInput!): UpdatePageMutationPayload

  # Update a quiz artwork interacted_with flag
  updateQuiz(input: updateQuizMutationInput!): updateQuizMutationPayload

  # Update the user
  updateUser(input: UpdateUserMutationInput!): UpdateUserMutationPayload

  # Updates a UserInterest on the logged in User's CollectorProfile.
  updateUserInterest(
    input: UpdateUserInterestMutationInput!
  ): UpdateUserInterestMutationPayload

  # Update user interests for multiple artists
  updateUserInterests(
    input: UpdateUserInterestsMutationInput!
  ): UpdateUserInterestsMutationPayload

  # Update the user sale profile
  updateUserSaleProfile(
    input: UpdateUserSaleProfileMutationInput!
  ): UpdateUserSaleProfileMutationPayload
}

type MyBid {
  sale: Sale
  saleArtworks: [SaleArtwork]
}

type MyBids {
  active: [MyBid]
  closed: [MyBid]
}

input MyCollectionArtistInput {
  # The artist's display name.
  displayName: String
}

type MyCollectionArtworkMutationDeleteSuccess {
  success: Boolean
}

type MyCollectionArtworkMutationFailure {
  mutationError: GravityMutationError
}

type MyCollectionArtworkMutationSuccess {
  artwork: Artwork
  artworkEdge: MyCollectionEdge
}

union MyCollectionArtworkMutationType =
    MyCollectionArtworkMutationDeleteSuccess
  | MyCollectionArtworkMutationFailure
  | MyCollectionArtworkMutationSuccess

enum MyCollectionArtworkSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  POSITION_ASC
  POSITION_DESC
}

# A connection to a list of items.
type MyCollectionConnection {
  # Insights for all collected artists
  artistInsights(
    # The type of insight.
    kind: ArtistInsightKind
  ): [ArtistInsight!]!
  artistInsightsCount: ArtistInsightsCount
  artistsCount: Int!
  artworksCount: Int!

  # A connection of artists in the users' collection
  collectedArtistsConnection(
    after: String
    before: String
    first: Int

    # Include artists that have been created by the user.
    includePersonalArtists: Boolean = false
    last: Int
    page: Int
    size: Int
    sort: ArtistSorts
  ): ArtistConnection
    @deprecated(reason: "Please use `me.userInterestsConnection` instead")
  default: Boolean!
  description: String!

  # A list of edges.
  edges: [MyCollectionEdge]
  includesPurchasedArtworks: Boolean!
  name: String!
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  private: Boolean!
  totalCount: Int
}

input MyCollectionCreateArtworkInput {
  artistIds: [String]
  artists: [MyCollectionArtistInput]
  artworkLocation: String
  attributionClass: ArtworkAttributionClassType
  category: String
  clientMutationId: String

  # The given location of the user as structured data
  collectorLocation: EditableLocation
  confidentialNotes: String
  costCurrencyCode: String
  costMajor: Int
  costMinor: Int
  date: String
  depth: String
  editionNumber: String
  editionSize: String
  externalImageUrls: [String]
  height: String
  importSource: ArtworkImportSource
  isEdition: Boolean
  medium: String
  metric: String

  # The price paid for the MyCollection artwork in cents for any given currency
  pricePaidCents: Long
  pricePaidCurrency: String
  provenance: String
  submissionId: String
  title: String!
  width: String
}

type MyCollectionCreateArtworkPayload {
  artworkOrError: MyCollectionArtworkMutationType
  clientMutationId: String
}

input MyCollectionDeleteArtworkInput {
  artworkId: String!
  clientMutationId: String
}

type MyCollectionDeleteArtworkPayload {
  artworkOrError: MyCollectionArtworkMutationType
  clientMutationId: String
}

# An edge in a connection.
type MyCollectionEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artwork
}

type MyCollectionInfo {
  # Insights for all collected artists
  artistInsights(
    # The type of insight.
    kind: ArtistInsightKind
  ): [ArtistInsight!]!
  artistInsightsCount: ArtistInsightsCount
  artistsCount: Int!
  artworksCount: Int!

  # A connection of artists in the users' collection
  collectedArtistsConnection(
    after: String
    before: String
    first: Int

    # Include artists that have been created by the user.
    includePersonalArtists: Boolean = false
    last: Int
    page: Int
    size: Int
    sort: ArtistSorts
  ): ArtistConnection
    @deprecated(reason: "Please use `me.userInterestsConnection` instead")
  default: Boolean!
  description: String!
  includesPurchasedArtworks: Boolean!
  name: String!
  private: Boolean!
}

input MyCollectionUpdateArtworkInput {
  artistIds: [String]
  artworkId: String!
  artworkLocation: String
  attributionClass: ArtworkAttributionClassType
  category: String
  clientMutationId: String

  # The given location of the user as structured data
  collectorLocation: EditableLocation
  confidentialNotes: String
  costCurrencyCode: String
  costMajor: Int
  costMinor: Int
  date: String
  depth: String
  editionNumber: String
  editionSize: String
  externalImageUrls: [String]
  height: String
  isEdition: Boolean
  medium: String
  metric: String
  pricePaidCents: Long
  pricePaidCurrency: String
  provenance: String
  submissionId: String
  title: String
  width: String
}

type MyCollectionUpdateArtworkPayload {
  artworkOrError: MyCollectionArtworkMutationType
  clientMutationId: String
}

type MyLocation {
  address: String
  address2: String
  city: String
  coordinates: LatLng!
  country: String
  countryCode: String
  display: String
  displayCountry: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  postalCode: String
  state: String
  summary: String
  timezone: String
}

input Near {
  lat: Float!
  lng: Float!
  maxDistance: Float
}

# An object with a Globally Unique ID
interface Node {
  # A globally unique ID.
  id: ID!
}

type Notification implements Node {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String @deprecated(reason: "Please use `publishedAt` instead")

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  isUnread: Boolean!
  message: String!
  notificationType: NotificationTypesEnum!
  objectsCount: Int!
  publishedAt(
    # pass `RELATIVE` to display the human-friendly date (e.g. "Today", "Yesterday", "5 days ago")
    format: String
  ): String!
  targetHref: String!
  title: String!
}

# A connection to a list of items.
type NotificationConnection {
  counts: NotificationCounts

  # A list of edges.
  edges: [NotificationEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type NotificationCounts {
  total(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  unread(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  unseen(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type NotificationEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Notification
}

type NotificationPreference {
  # email | push
  channel: String!
  id: String!
  name: String!
  status: SubGroupStatus!
}

input NotificationPreferenceInput {
  # email | push
  channel: String
  name: String!
  status: SubGroupInputStatus!
}

enum NotificationTypesEnum {
  ARTICLE_FEATURED_ARTIST
  ARTWORK_ALERT
  ARTWORK_PUBLISHED
  PARTNER_SHOW_OPENED
  VIEWING_ROOM_PUBLISHED
}

type OpeningHoursArray {
  schedules: [FormattedDaySchedules]
}

type OpeningHoursText {
  text: String
}

union OpeningHoursUnion = OpeningHoursArray | OpeningHoursText

type OrderedSet {
  cached: Int
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  createdBy: User
  description(format: Format): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  internalName: String
  items: [OrderedSetItem]

  # Returns a connection of the items. Only Artwork supported right now.
  itemsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
    @deprecated(reason: "Utilize `orderedItemsConnection` for union type")
  itemType: String
  key: String
  layout: OrderedSetLayouts!
  name: String
  orderedItemsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): OrderedSetItemConnection!
  ownerType: String
  published: Boolean!
}

# A connection to a list of items.
type OrderedSetConnection {
  # A list of edges.
  edges: [OrderedSetEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type OrderedSetEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: OrderedSet
}

union OrderedSetItem =
    Artist
  | Artwork
  | FeaturedLink
  | Gene
  | Profile
  | Sale
  | Show

# A connection to a list of items.
type OrderedSetItemConnection {
  # A list of edges.
  edges: [OrderedSetItemEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type OrderedSetItemEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: OrderedSetItem
}

enum OrderedSetLayouts {
  DEFAULT
  FULL
}

enum OrderedSetSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  INTERNAL_NAME_ASC
  INTERNAL_NAME_DESC
  ITEM_TYPE_ASC
  ITEM_TYPE_DESC
  KEY_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  OWNER_TYPE_ASC
  OWNER_TYPE_DESC
}

union OrderParty = Partner | User

type Page {
  content(format: Format): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  name: String!
  published: Boolean!
}

# A connection to a list of items.
type PageConnection {
  # A list of edges.
  edges: [PageEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type PageCursor {
  cursor: String!
  isCurrent: Boolean!
  page: Int!
}

type PageCursors {
  # Always includes current page
  around: [PageCursor!]!

  # Optional, may be included in `around` (if current page is near the beginning).
  first: PageCursor

  # Optional, may be included in `around` (if current page is near the end).
  last: PageCursor
  previous: PageCursor
}

# An edge in a connection.
type PageEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Page
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Partner implements Node {
  # A connection of all artists from a Partner.
  allArtistsConnection(
    displayOnPartnerProfile: Boolean
    hasNotRepresentedArtistWithPublishedArtworks: Boolean
    hasPublishedArtworks: Boolean

    # Include additional fields on artists, requires authentication
    includeAllFields: Boolean
    representedBy: Boolean
  ): ArtistPartnerConnection

  # A connection of articles related to a partner.
  articlesConnection(
    after: String
    before: String
    first: Int

    # Get only articles with 'standard', 'feature', 'series' or 'video' layouts.
    inEditorialFeed: Boolean
    last: Int
    page: Int
    sort: ArticleSorts
  ): ArticleConnection

  # A connection of artists at a partner.
  artistsConnection(
    after: String
    artistIDs: [String]
    before: String
    displayOnPartnerProfile: Boolean
    first: Int
    hasPublishedArtworks: Boolean
    last: Int
    representedBy: Boolean
    sort: ArtistSorts
  ): ArtistPartnerConnection
  artistsSearchConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int = 1
    query: String!
    size: Int = 10
  ): ArtistConnection

  # A connection of artworks from a Partner.
  artworksConnection(
    after: String

    # Return only artworks by this artist.
    artistID: String

    # Return only artwork(s) included in this list of IDs.
    artworkIDs: [String]
    before: String
    exclude: [String]
    first: Int
    forSale: Boolean

    # If true return both published and unpublished artworks, requires auth
    includeUnpublished: Boolean
    last: Int

    # Return artworks that are missing priority metadata
    missingPriorityMetadata: Boolean

    # Return artworks published less than x seconds ago.
    publishedWithin: Int

    # Only allowed for authorized admin/partner requests. When false fetch :all
    # properties on an artwork, when true or not present fetch artwork :short properties
    shallow: Boolean
    sort: ArtworkSorts
  ): ArtworkConnection
  artworksSearchConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int = 1
    query: String!
    size: Int = 10
  ): ArtworkConnection
  cached: Int
  categories: [PartnerCategory]

  # A list of the partners unique city locations
  cities(size: Int = 25): [String]
  claimed: Boolean
  collectingInstitution: String
  counts: PartnerCounts
  defaultProfileID: String
  displayArtistsSection: Boolean
  displayFullPartnerPage: Boolean
  displayWorksSection: Boolean
  distinguishRepresentedArtists: Boolean

  # Return partner documents if current user has CMS access.
  documentsConnection(
    after: String
    artistID: String
    before: String

    # Filter documents by ID.
    documentIDs: [String]
    first: Int
    last: Int
    showID: String
  ): PartnerDocumentConnection
  featuredShow: Show

  # Artworks Elastic Search results
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection
  fullProfileEligible: Boolean
    @deprecated(reason: "Prefer displayFullPartnerPage")
  hasFairPartnership: Boolean

  # The url for a partner. May be `null` if partner is not eligible for page.
  href: String

  # A globally unique ID.
  id: ID!
  initials(length: Int = 3): String

  # Inquiry Request details
  inquiryRequest(
    # The inquiry id
    inquiryId: String!
  ): PartnerInquiryRequest

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isDefaultProfilePublic: Boolean

  # If the partner supports inquiries
  isInquireable: Boolean!
  isLinkable: Boolean
  isPreQualify: Boolean

  # Indicates the partner is a trusted seller on Artsy
  isVerifiedSeller: Boolean

  # This field is deprecated and is being used in Eigen release predating the 6.0 release
  locations(size: Int = 25): [Location]
    @deprecated(
      reason: "Prefer to use `locationsConnection`. [Will be removed in v2]"
    )

  # A connection of locations from a Partner.
  locationsConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    size: Int
  ): LocationConnection
  meta: PartnerMeta
  name: String
  partnerPageEligible: Boolean
  partnerType: String
  profile: Profile
  profileArtistsLayout: String
  profileBannerDisplay: String
  showPromoted: Boolean

  # A connection of shows from a Partner.
  showsConnection(
    after: String

    # If present only return shows including the artist
    artistID: String

    # True for only shows that are part of a fair, false for only shows not part of a fair, blank for all shows
    atAFair: Boolean
    before: String

    # Only used when status is CLOSING_SOON or UPCOMING. Number of days used to filter upcoming and closing soon shows
    dayThreshold: Int
    first: Int

    # If True returns only displayable items
    isDisplayable: Boolean
    last: Int
    page: Int
    sort: ShowSorts

    # Filter shows by chronological event status
    status: EventStatus = CURRENT
  ): ShowConnection
  showsSearchConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int = 1
    query: String!
    size: Int = 10
  ): ShowConnection

  # A slug ID.
  slug: ID!
  type: String
  vatNumber: String

  # The gallery partner's web address
  website: String
}

type PartnerArtist {
  artist: Artist
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: PartnerArtistArtworksSort
  ): ArtworkConnection
  biography: String
  biographyBlurb(format: Format): PartnerArtistBlurb
  counts: PartnerArtistCounts

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  isDisplayOnPartnerProfile: Boolean
  isUseDefaultBiography: Boolean
  partner: Partner
  representedBy: Boolean
  sortableID: String
}

enum PartnerArtistArtworksSort {
  POSITION_ASC
  POSITION_DESC
}

type PartnerArtistBlurb {
  credit: String
  text: String
}

# A connection to a list of items.
type PartnerArtistConnection {
  # A list of edges.
  edges: [PartnerArtistEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type PartnerArtistCounts {
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  forSaleArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  managedArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# A connection to a list of items.
type PartnerArtistDocumentConnection {
  # A list of edges.
  edges: [PartnerArtistDocumentEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type PartnerArtistDocumentEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: PartnerDocument
}

# An edge in a connection.
type PartnerArtistEdge {
  artist: Artist
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: PartnerArtistArtworksSort
  ): ArtworkConnection
  biography: String
  biographyBlurb(format: Format): PartnerArtistBlurb
  counts: PartnerArtistCounts

  # A cursor for use in pagination
  cursor: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  isDisplayOnPartnerProfile: Boolean
  isUseDefaultBiography: Boolean

  # The item at the end of the edge
  node: Partner
  partner: Partner
  representedBy: Boolean
  sortableID: String
}

type PartnerArtworkGrid implements ArtworkContextGrid {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type PartnerCategory {
  cached: Int
  categoryType: PartnerCategoryType

  # A globally unique ID.
  id: ID!
  internal: Boolean

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String
  partners(
    defaultProfilePublic: Boolean
    eligibleForCarousel: Boolean

    # Indicates an active subscription
    eligibleForListing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligibleForPrimaryBucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligibleForSecondaryBucket: Boolean

    # Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true).
    excludeFollowedPartners: Boolean
    hasFullProfile: Boolean
    ids: [String]

    # If true, will only return partners that are located near the user's location based on the IP address.
    includePartnersNearIpBasedLocation: Boolean = false

    # If true, will only return partners that list artists that the user follows
    includePartnersWithFollowedArtists: Boolean

    # Max distance to use when geo-locating partners, defaults to 75km.
    maxDistance: Int

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partnerCategories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): [Partner]

  # A slug ID.
  slug: ID!
}

enum PartnerCategoryType {
  GALLERY
  INSTITUTION
}

enum PartnerClassification {
  AUCTION
  BRAND
  DEMO
  GALLERY
  INSTITUTION
  INSTITUTIONAL_SELLER
  PRIVATE_COLLECTOR
  PRIVATE_DEALER
}

# A connection to a list of items.
type PartnerConnection {
  # A list of edges.
  edges: [PartnerEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerCounts {
  artistDocuments(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  currentDisplayableShows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  displayableShows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  eligibleArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partnerArtists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partnerShowDocuments(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  publishedForSaleArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  publishedNotForSaleArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  shows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type PartnerDocument {
  filesize: Int!

  # A globally unique ID.
  id: ID!

  # A type-specific Gravity Mongo Document ID.
  internalID: ID!
  publicUrl: String! @deprecated(reason: "Prefer `publicURL`")
  publicURL: String!
  size: Int! @deprecated(reason: "Prefer `filesize`")
  title: String!
}

# A connection to a list of items.
type PartnerDocumentConnection {
  # A list of edges.
  edges: [PartnerDocumentEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type PartnerDocumentEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: PartnerDocument
}

# An edge in a connection.
type PartnerEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Partner
}

type PartnerInquiryRequest {
  collectorProfile: InquirerCollectorProfile

  # Returns the first message of an inquiry with the addition of any inquiry
  # questions submitted by the user, formatted and if present.
  formattedFirstMessage: String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  questions: [InquiryQuestion]
  shippingLocation: Location
}

type PartnerMeta {
  description: String
  image: String
  title: String
}

enum PartnersAggregation {
  CATEGORY
  LOCATION
  TOTAL
}

# The results for one of the requested aggregations
type PartnersAggregationResults {
  counts: [AggregationCount]
  slice: PartnersAggregation
}

# A connection to a list of items.
type PartnerShowDocumentConnection {
  # A list of edges.
  edges: [PartnerShowDocumentEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type PartnerShowDocumentEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: PartnerDocument
}

enum PartnerShowPartnerType {
  GALLERY
  MUSEUM
}

enum PartnersSortType {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DISTANCE
  PUBLISHED_AT_DESC
  RANDOM_SCORE_DESC
  RELATIVE_SIZE_ASC
  RELATIVE_SIZE_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
}

union PartnerTypes = ExternalPartner | Partner

union PaymentMethodUnion = BankAccount | CreditCard | WireTransfer

enum PhoneNumberErrors {
  INVALID_COUNTRY_CODE
  INVALID_NUMBER
  TOO_LONG
  TOO_SHORT
}

enum PhoneNumberFormats {
  E164
  INTERNATIONAL
  NATIONAL
  RFC3966
}

type PhoneNumberType {
  countryCode: String
  display(format: PhoneNumberFormats): String
  error: PhoneNumberErrors
  isValid: Boolean
  originalNumber: String
  regionCode: String
}

type PreviewSavedSearch {
  # A suggestion for a name that describes a set of saved search criteria in a conventional format
  displayName: String!

  # URL for a user to view the artwork grid with applied filters matching saved search criteria attributes
  href: String

  # Human-friendly labels that are added by Metaphysics to the upstream SearchCriteria type coming from Gravity
  labels: [SearchCriteriaLabel]!
}

input PreviewSavedSearchAttributes {
  acquireable: Boolean
  additionalGeneIDs: [String]
  artistIDs: [String]
  atAuction: Boolean
  attributionClass: [String]
  colors: [String]
  height: String
  inquireableOnly: Boolean
  locationCities: [String]
  majorPeriods: [String]
  materialsTerms: [String]
  offerable: Boolean
  partnerIDs: [String]
  priceRange: String

  # Filter results by Artwork sizes
  sizes: [ArtworkSizes]
  width: String
}

type PriceRange {
  display: String
  maxPrice: Money
  minPrice: Money
}

type Profile {
  bio: String
  cached: Int
  counts: ProfileCounts
  displayArtistsSection: Boolean
    @deprecated(reason: "Prefer displayArtistsSection in Partner type")
  fullBio: String
  href: String
  icon: Image

  # A globally unique ID.
  id: ID!
  image: Image
  initials(length: Int = 3): String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isFollowed: Boolean
  isPubliclyVisible: Boolean
  isPublished: Boolean
  location: String
  name: String
  owner: ProfileOwnerType!
  profileArtistsLayout: String
    @deprecated(reason: "Prefer profileArtistsLayout in Partner type")

  # A slug ID.
  slug: ID!
}

# A connection to a list of items.
type ProfileConnection {
  # A list of edges.
  edges: [ProfileEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type ProfileCounts {
  follows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type ProfileEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Profile
}

union ProfileOwnerType = Fair | FairOrganizer | Partner

type Query {
  # Do not use (only used internally for stitching)
  _do_not_use_conversation(
    # The ID of the Conversation
    id: String!
  ): Conversation

  # Do not use (only used internally for stitching)
  _do_not_use_image: Image
  admin: Admin

  # An Article
  article(
    # The ID of the Article
    id: String!
  ): Article

  # A list of Articles
  articles(
    auctionID: String
    channelID: String
    featured: Boolean

    #
    #         Only return articles matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    layout: ArticleLayout
    limit: Int
    offset: Int
    omit: [String!]
    published: Boolean = true
    showID: String
    sort: ArticleSorts
  ): [Article!]!

  # A connection of articles
  articlesConnection(
    after: String
    before: String
    channelId: String
    featured: Boolean
    first: Int

    # Get only articles with 'standard', 'feature', 'series' or 'video' layouts.
    inEditorialFeed: Boolean
    last: Int
    layout: ArticleLayout
    omit: [String!]
    page: Int
    sort: ArticleSorts
  ): ArticleConnection

  # An Artist
  artist(
    # The slug or ID of the Artist
    id: String!
  ): Artist

  # A list of Artists
  artists(
    #
    #         Only return artists matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    page: Int = 1
    size: Int

    #
    #         Only return artists matching specified slugs.
    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
    #
    slugs: [String]
    sort: ArtistSorts
  ): [Artist]

  # A list of artists
  artistsConnection(
    after: String
    before: String
    first: Int

    #
    #         Only return artists matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    last: Int
    letter: String
    page: Int
    size: Int

    #
    #         Only return artists matching specified slugs.
    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
    #
    slugs: [String]
    sort: ArtistSorts

    # If present, will search by term
    term: String
  ): ArtistConnection

  # An Artwork
  artwork(
    # The slug or ID of the Artwork
    id: String!
  ): Artwork

  # List of all artwork attribution classes
  artworkAttributionClasses: [AttributionClass]

  # List of all artwork mediums
  artworkMediums: [ArtworkMedium]

  # A list of Artworks
  artworks(
    after: String
    before: String
    first: Int
    ids: [String]
    last: Int
    respectParamsOrder: Boolean = false
  ): ArtworkConnection
    @deprecated(
      reason: "This is only for use in resolving stitched queries, not for first-class client use."
    )

  # Artworks Elastic Search results
  artworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection

  # A connection of artworks for a user.
  artworksForUser(
    after: String
    before: String
    first: Int
    includeBackfill: Boolean!
    last: Int
    marketable: Boolean
    maxWorksPerArtist: Int
    page: Int
    userId: String
    version: String
  ): ArtworkConnection

  # An auction result
  auctionResult(
    # The ID or slug of the auction result
    id: String!
  ): AuctionResult

  # If user is logged out; status is `LOGGED_OUT`. If user is logged in; status is
  # `LOGGED_IN`. If user is logged in with invalid authentication (401); 'Promise'
  # resolves to 'Status.Invalid'. All other status codes will resolve to
  # `LOGGED_IN` because we don't know whether or not the authentication is valid
  # (error could be something else).
  authenticationStatus: AuthenticationStatus!

  # A user's bank account
  bankAccount(
    # The ID of the bank account
    id: String!
  ): BankAccount
  channel(id: ID!): Channel!

  # A list of cities
  cities(featured: Boolean = false): [City!]!

  # A city-based entry point for local discovery
  city(
    # A point which will be used to locate the nearest local discovery city within a threshold
    near: Near

    # A slug for the city, conforming to Gravity's city slug naming conventions
    slug: String
  ): City

  # A collector profile.
  collectorProfile(userID: String): CollectorProfileType

  # A list of collector profiles that have sent an inquiry to a partner
  collectorProfilesConnection(
    after: String
    before: String
    first: Int
    last: Int
    partnerID: ID

    # Term used for searching collector profiles
    term: String
  ): CollectorProfileTypeConnection

  # A conversation, usually between a user and a partner
  conversation(
    # The ID of the Conversation
    id: String!
  ): Conversation

  # Conversations, usually between a user and partner.
  conversationsConnection(
    after: String
    artistId: String
    before: String
    dismissed: Boolean
    first: Int
    fromId: String
    hasMessage: Boolean
    hasReply: Boolean
    last: Int
    partnerId: String
    toBeReplied: Boolean
    type: ConversationsInputMode
  ): ConversationConnection

  # A user's credit card
  creditCard(
    # The ID of the Credit Card
    id: String!
  ): CreditCard

  # A list of trending artists. Inferred from a manually curated collection of trending artworks.
  curatedTrendingArtists(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  departments: [Department!]!

  # Get an image info
  doNotUseImageSearch(
    # Image file
    image: Upload!
  ): ImageSearch

  # A namespace external partners (provided by Galaxy)
  external: External!

  # A Fair
  fair(
    # The slug or ID of the Fair
    id: String!
  ): Fair

  # A fair organizer, e.g. The Armory Show
  fairOrganizer(
    # The slug or ID of the Fair organizer
    id: String!
  ): FairOrganizer

  # A list of Fairs
  fairs(
    fairOrganizerID: String
    hasFullFeature: Boolean
    hasHomepageSection: Boolean
    hasListing: Boolean

    #
    #         Only return fairs matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    page: Int
    size: Int
    sort: FairSorts
    status: EventStatus
  ): [Fair]

  # A list of fairs
  fairsConnection(
    after: String
    before: String
    fairOrganizerID: String
    first: Int
    hasFullFeature: Boolean
    hasHomepageSection: Boolean
    hasListing: Boolean

    # Only return fairs matching specified IDs. Accepts list of IDs.
    ids: [String]
    last: Int
    near: Near
    sort: FairSorts
    status: EventStatus
  ): FairConnection

  # A Feature
  feature(
    # The slug or ID of the Feature
    id: ID
  ): Feature
  featuredLinksConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If present, will search by term
    term: String
  ): FeaturedLinkConnection
  featuresConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: FeatureSorts

    # If present, will search by term
    term: String
  ): FeatureConnection

  # Partners Elastic Search results
  filterPartners(
    aggregations: [PartnersAggregation]!
    defaultProfilePublic: Boolean
    eligibleForCarousel: Boolean

    # Indicates an active subscription
    eligibleForListing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligibleForPrimaryBucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligibleForSecondaryBucket: Boolean

    # Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true).
    excludeFollowedPartners: Boolean
    hasFullProfile: Boolean
    ids: [String]

    # If true, will only return partners that are located near the user's location based on the IP address.
    includePartnersNearIpBasedLocation: Boolean = false

    # If true, will only return partners that list artists that the user follows
    includePartnersWithFollowedArtists: Boolean

    # Max distance to use when geo-locating partners, defaults to 75km.
    maxDistance: Int

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partnerCategories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): FilterPartners
  gene(
    # The slug or ID of the Gene
    id: String!
  ): Gene

  # A list of Gene Families
  geneFamiliesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): GeneFamilyConnection

  # A list of Genes
  genes(
    size: Int

    #
    #         Only return genes matching specified slugs.
    #         Accepts list of slugs.
    #
    slugs: [String]
  ): [Gene]

  # A Hero Unit.
  heroUnit(
    # The ID of the Hero Unit
    id: String!
  ): HeroUnit
  heroUnitsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If true will include inactive hero units.
    private: Boolean = false

    # If present will search by term.
    term: String
  ): HeroUnitConnection
  highlights: Highlights

  # Home screen content
  homePage: HomePage

  # An identity verification that the user has access to
  identityVerification(
    # ID of the IdentityVerification
    id: String!
  ): IdentityVerification

  # A connection of identity verifications.
  identityVerificationsConnection(
    after: String
    before: String
    email: String
    first: Int
    last: Int
    name: String
    page: Int
    size: Int
    userId: String
  ): IdentityVerificationConnection
  job(id: ID!): Job!
  jobs: [Job!]!
  markdown(content: String!): MarkdownContent

  # A Search for Artists
  matchArtist(
    # Exclude these MongoDB ids from results
    excludeIDs: [String]

    # Page to retrieve. Default: 1.
    page: Int

    # Maximum number of items to retrieve. Default: 5.
    size: Int

    # Your search term
    term: String!
  ): [Artist]
  matchConnection(
    after: String
    before: String

    # ARTIST_SERIES, CITY, COLLECTION, and VIEWING_ROOM are not yet supported
    entities: [SearchEntity!] = []
    first: Int
    last: Int

    # Mode of search to execute
    mode: SearchMode = SITE
    page: Int = 1
    size: Int = 10
    term: String!
  ): MatchConnection
  me: Me

  # Fetches an object given its globally unique ID.
  node(
    # The globally unique ID of the node.
    id: ID!
  ): Node

  # User's notification preferences
  notificationPreferences(
    authenticationToken: String
  ): [NotificationPreference!]!

  # A feed of notifications
  notificationsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # Notification types to return
    notificationTypes: [NotificationTypesEnum]
  ): NotificationConnection

  # An OrderedSet
  orderedSet(
    # The ID of the OrderedSet
    id: String!
  ): OrderedSet

  # A collection of OrderedSets
  orderedSets(
    # Key to the OrderedSet or group of OrderedSets
    key: String!
    public: Boolean = true
  ): [OrderedSet]

  # A connection of Ordered Sets
  orderedSetsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If present, will search by term
    term: String
  ): OrderedSetConnection
  page(id: ID!): Page!
  pagesConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If present, will search by term
    term: String
  ): PageConnection

  # A Partner
  partner(
    # The slug or ID of the Partner
    id: String!
  ): Partner

  # Retrieve all partner documents for a given partner
  partnerArtistDocumentsConnection(
    after: String

    # The slug or ID of the Artist
    artistID: String!
    before: String
    first: Int
    last: Int
    page: Int

    # The slug or ID of the Partner
    partnerID: String!
    size: Int
  ): PartnerArtistDocumentConnection
    @deprecated(reason: "Prefer `partner.documentsConnection`")

  # A list of Artworks for a partner
  partnerArtworks(
    after: String
    before: String
    first: Int
    last: Int
    partnerID: String!
    private: Boolean
    viewingRoomID: String
  ): ArtworkConnection
    @deprecated(
      reason: "This is only for use in resolving stitched queries, not for first-class client use."
    )

  # A list of PartnerCategories
  partnerCategories(
    categoryType: PartnerCategoryType

    # Filter by whether category is internal
    internal: Boolean = false
    size: Int
  ): [PartnerCategory]

  # A PartnerCategory
  partnerCategory(
    # The slug or ID of the PartnerCategory
    id: String!
  ): PartnerCategory

  # A list of Partners
  partnersConnection(
    after: String
    before: String
    defaultProfilePublic: Boolean

    # Indicates an active subscription
    eligibleForListing: Boolean

    # Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true).
    excludeFollowedPartners: Boolean
    first: Int
    ids: [String]

    # If true, will only return partners that are located near the user's location based on the IP address.
    includePartnersNearIpBasedLocation: Boolean = false

    # If true, will only return partners that list artists that the user follows
    includePartnersWithFollowedArtists: Boolean
    last: Int

    # Max distance to use when geo-locating partners, defaults to 75km.
    maxDistance: Int

    # Coordinates to find partners closest to
    near: String

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partnerCategories: [String]
    sort: PartnersSortType
    type: [PartnerClassification]
  ): PartnerConnection

  # Retrieve all partner show documents for a given partner and show
  partnerShowDocumentsConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int

    # The slug or ID of the Partner
    partnerID: String!

    # The slug or ID of the Show
    showID: String!
    size: Int
  ): PartnerShowDocumentConnection
    @deprecated(reason: "Prefer `partner.documentsConnection`")

  # Phone number information
  phoneNumber(phoneNumber: String!, regionCode: String): PhoneNumberType

  # A previewed saved search
  previewSavedSearch(
    attributes: PreviewSavedSearchAttributes
  ): PreviewSavedSearch

  # A Profile
  profile(
    # The slug or ID of the Profile
    id: String!
  ): Profile

  # A list of Profiles
  profilesConnection(
    after: String
    before: String
    first: Int
    ids: [String]
    last: Int

    # If present, will search by term
    term: String
  ): ProfileConnection

  # Static set of recently sold artworks for the SWA landing page
  recentlySoldArtworks(
    after: String
    before: String
    first: Int
    last: Int
  ): RecentlySoldArtworkTypeConnection

  # A requested location
  requestLocation(ip: String): RequestLocation

  # Search for matching artworks by image
  reverseImageSearch(
    # Image file
    image: Upload!
  ): ReverseImageSearchResults

  # A Sale
  sale(
    # The slug or ID of the Sale
    id: String!
  ): Sale

  # A Sale Artwork
  saleArtwork(
    # The slug or ID of the SaleArtwork
    id: String!
  ): SaleArtwork

  # Sale Artworks search results
  saleArtworksConnection(
    after: String

    # Please make sure to supply the TOTAL aggregation if you will be setting any aggregations
    aggregations: [SaleArtworkAggregation]
    artistIDs: [String]
    before: String
    biddableSale: Boolean
    estimateRange: String
    excludeClosedLots: Boolean
    first: Int
    geneIDs: [String]

    # When called under the Me field, this defaults to true. Otherwise it defaults to false
    includeArtworksByFollowedArtists: Boolean
    isAuction: Boolean
    last: Int
    liveSale: Boolean
    marketable: Boolean
    page: Int
    saleID: ID

    # Same as saleID argument, but matches the argument type of `sale(id: 'foo')` root field
    saleSlug: String
    size: Int
    sort: String
    userId: String
  ): SaleArtworksConnection

  # A list of Sales
  salesConnection(
    after: String
    auctionState: AuctionState
    before: String
    first: Int

    #
    #         Only return sales matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]

    # Limit by auction.
    isAuction: Boolean = true
    last: Int

    # Limit by live status.
    live: Boolean = true

    # Limit by published status.
    published: Boolean = true

    # Returns sales the user has registered for if true, returns sales the user has not registered for if false.
    registered: Boolean
    sort: SaleSorts

    # If present, will search by term
    term: String
  ): SaleConnection

  # Global search
  searchConnection(
    after: String
    aggregations: [SearchAggregation]
    before: String

    # Entities to include in search. Default: [ARTIST, ARTWORK].
    entities: [SearchEntity]
    first: Int
    last: Int

    # Mode of search to execute. Default: SITE.
    mode: SearchMode

    # If present, will be used for pagination instead of cursors.
    page: Int

    # Search query to perform. Required.
    query: String!
  ): SearchableConnection
  shortcut(id: ID!): Shortcut

  # A Show
  show(
    # The slug or ID of the Show
    id: String!
  ): Show

  # A list of Shows
  showsConnection(
    after: String
    atAFair: Boolean
    before: String
    displayable: Boolean = true
    first: Int
    hasLocation: Boolean
    ids: [String]
    last: Int
    sort: ShowSorts
    status: EventStatus

    # If present, will search by term
    term: String
  ): ShowConnection

  # Content for a specific page or view
  staticContent(
    # The slug or id for the view
    id: String!
  ): StaticContent

  # Fields related to internal systems.
  system: System
  tag(
    # The slug or ID of the Tag
    id: String!
  ): Tag
  targetSupply: TargetSupply
  user(
    # Email to search for user by
    email: String

    # ID of the user
    id: String
  ): User

  # A list of Users
  usersConnection(
    after: String
    before: String
    first: Int
    ids: [String]
    last: Int

    # If present, will search by term, cannot be combined with `ids`
    term: String
  ): UserConnection

  # A Partner or Fair
  vanityURLEntity(
    # The slug or ID of the Profile to get a partner or fair for
    id: String!
  ): VanityURLEntityType

  # Verify a given address.
  verifyAddress(input: VerifyAddressInput!): VerifyAddressPayload

  # A wildcard used to support complex root queries in Relay
  viewer: Viewer
}

type Quiz {
  completedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  quizArtworkConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int
    size: Int
  ): QuizArtworkConnection
  recommendedArtworks: [Artwork!]!
  savedArtworks: [Artwork!]!
}

# A connection to a list of items.
type QuizArtworkConnection {
  # A list of edges.
  edges: [QuizArtworkEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type QuizArtworkEdge {
  # A cursor for use in pagination
  cursor: String!
  interactedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # The item at the end of the edge
  node: Artwork
  position: Int!
}

type RecenltySoldArtworkPerformance {
  # Percentage performance over mid-estimate
  mid: String
}

type RecentlySoldArtworkType {
  artwork: Artwork
  highEstimate: Money
  lowEstimate: Money
  performance: RecenltySoldArtworkPerformance
  priceRealized: Money
}

# A connection to a list of items.
type RecentlySoldArtworkTypeConnection {
  # A list of edges.
  edges: [RecentlySoldArtworkTypeEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type RecentlySoldArtworkTypeEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: RecentlySoldArtworkType
}

enum RelatedArtistsKind {
  CONTEMPORARY
  MAIN
}

type RelatedArtworkGrid implements ArtworkContextGrid {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type Request {
  # IP Address of the current request, useful for debugging
  ipAddress: String!
}

input RequestCredentialsForAssetUploadInput {
  # The desired access control
  acl: String!
  clientMutationId: String

  # The gemini template you want to request
  name: String!
}

type RequestCredentialsForAssetUploadPayload {
  asset: Credentials
  clientMutationId: String
}

type RequestLocation {
  cached: Int
  city: String
  coordinates: LatLng
  country: String
  countryCode: String
  id: ID!
}

type RequestPriceEstimatedMutationFailure {
  mutationError: GravityMutationError
}

type RequestPriceEstimatedMutationSuccess {
  submittedPriceEstimateParams: SubmittedPriceEstimateParams
}

input RequestPriceEstimateInput {
  artworkId: String!
  clientMutationId: String
  requesterEmail: String
  requesterName: String
  requesterPhoneNumber: String
}

union RequestPriceEstimateMutationType =
    RequestPriceEstimatedMutationFailure
  | RequestPriceEstimatedMutationSuccess

type RequestPriceEstimatePayload {
  clientMutationId: String
  priceEstimateParamsOrError: RequestPriceEstimateMutationType
}

type ResizedImageUrl {
  factor: Float!
  height: Int
  src: String!
  srcSet: String!
  url: String!
  width: Int
}

type ReverseImageSearchResult {
  artwork: Artwork

  # The matching collection image’s file path
  filepath: String!

  # How much of the query image’s fingerprint overlaps the collection image’s fingerprint, as a percentage
  matchPercent: Float!

  # Location of the matching area in the first image
  queryMatchRect: ReverseImageSearchResultMatchRect!

  # How much of the query image overlaps the collection image, as a percentage
  queryOverlapPercent: Float!

  # How closely the query image matches the collection image
  score: Float!

  # Location of the matching area in the second image
  targetMatchRect: ReverseImageSearchResultMatchRect!

  # How much of the collection image overlaps the query image, as a percentage
  targetOverlapPercent: Float!
}

type ReverseImageSearchResultMatchRect {
  bottom: Float!
  left: Float!
  right: Float!
  top: Float!
}

type ReverseImageSearchResults {
  results: [ReverseImageSearchResult]!
}

# The conditions for uploading assets to media.artsy.net
type S3PolicyConditionsType {
  # The assigned access control
  acl: String!

  # The bucket to upload to.
  bucket: String!

  # A key which is prefixed on your file
  geminiKey: String!

  # The returned status code, currently always 201
  successActionStatus: String!
}

# An policy for uploading assets to media.artsy.net
type S3PolicyDocumentType {
  # The details for the upload
  conditions: S3PolicyConditionsType!

  # An expiration date string.
  expiration: String!
}

type Sale implements Node {
  # Returns a connection of artworks for a sale.
  artworksConnection(
    after: String
    before: String

    # When this is true and there is no access token present, allow a loader that caches to be used.
    cached: Boolean = true

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    last: Int
    status: SaleArtworkStatus
  ): ArtworkConnection
  associatedSale: Sale
  bidder: Bidder

  # A bid increment policy that explains minimum bids in ranges.
  bidIncrements: [BidIncrement]

  # Auction's buyer's premium policy.
  buyersPremium: [BuyersPremium]
  cached: Int
  cascadingEndTime: SaleCascadingEndTime

  # Amount of minutes in between each lot closing.
  cascadingEndTimeIntervalMinutes: Int
  collectPayments: Boolean!
  coverImage: Image
  currency: String
  description(format: Format): String
  displayTimelyAt: String
  eligibleSaleArtworksCount: Int
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  endedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  eventEndAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  eventStartAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Amount of time added when a late bid comes in.
  extendedBiddingIntervalMinutes: Int

  # Duration before lot closes that a late bid would extend the end time.
  extendedBiddingPeriodMinutes: Int

  # A formatted description of when the auction starts or ends or if it has ended
  formattedStartDateTime: String
  href: String

  # A globally unique ID.
  id: ID!
  initials(length: Int = 3): String

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isArtsyLicensed: Boolean!
  isAuction: Boolean
  isAuctionPromo: Boolean
  isBenefit: Boolean
  isClosed: Boolean
  isGalleryAuction: Boolean
  isLiveOpen: Boolean
  isLotConditionsReportEnabled: Boolean

  # True for a cascading-end-time enabled sale where lots have started closing
  isLotsClosing: Boolean!
  isOpen: Boolean
  isPreliminary: Boolean
  isPreview: Boolean
  isRegistrationClosed: Boolean
  isWithBuyersPremium: Boolean
  liveStartAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Returns a live auctions url if the sale is open and start time is after now
  liveURLIfOpen: String
  name: String
  partner: Partner
  profile: Profile
  promotedSale: Sale
  registrationEndsAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A registration for this sale or null
  registrationStatus: Bidder
  requireBidderApproval: Boolean
  requireIdentityVerification: Boolean
  saleArtwork(id: String!): SaleArtwork
  saleArtworksConnection(
    after: String
    all: Boolean = false
    before: String
    first: Int

    # List of sale artwork internal IDs to fetch
    internalIDs: [ID]
    last: Int
    status: SaleArtworkStatus
  ): SaleArtworkConnection
  saleType: String

  # A slug ID.
  slug: ID!
  startAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  status: String
  symbol: String
  timeZone: String

  # True if the current user needs to undergo identity verification for this sale, false otherwise
  userNeedsIdentityVerification: Boolean
}

type SaleArtwork implements ArtworkEdgeInterface & Node {
  artwork: Artwork
  cached: Int
  calculatedCost(
    # Max bid price for the sale artwork
    bidAmountMinor: Int!
  ): CalculatedCost
  counts: SaleArtworkCounts

  # Currency abbreviation (e.g. "USD")
  currency: String
  currentBid: SaleArtworkCurrentBid
  cursor: String
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  endedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  estimate: String

  # Singular estimate field, if specified
  estimateCents: Int
  extendedBiddingEndAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A formatted description of the lot end date and time
  formattedEndDateTime: String

  # A formatted description of when the lot starts or ends or if it has ended
  formattedStartDateTime: String
  highestBid: SaleArtworkHighestBid
  highEstimate: SaleArtworkHighEstimate

  # A globally unique ID.
  id: ID!
  increments(
    # Whether or not to start the increments at the user's latest bid
    useMyMaxBid: Boolean
  ): [BidIncrementsFormatted]

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Can bids be placed on the artwork?
  isBiddable: Boolean
  isBidOn: Boolean

  # Is the user the highest bidder on the sale artwork. (Currently only being used via me.myBids.)
  isHighestBidder: Boolean

  # True if this sale artwork is being watched by a user and they have not bid on
  # it. (Currently only used on me.myBids and me.watchedLotsConnection.)
  isWatching: Boolean
  isWithReserve: Boolean
  lotID: String
  lotLabel(
    # Whether to trim anything past the first alphanumeric chunk
    trim: Boolean = false
  ): String
  lotState: CausalityLotState
  lowEstimate: SaleArtworkLowEstimate
  minimumNextBid: SaleArtworkMinimumNextBid
  node: Artwork
  openingBid: SaleArtworkOpeningBid
  position: Float
  reserve: SaleArtworkReserve
  reserveMessage: String
  reserveStatus: String
  sale: Sale
  saleID: String

  # A slug ID.
  slug: ID!

  # Currency symbol (e.g. "$")
  symbol: String
}

enum SaleArtworkAggregation {
  ARTIST
  FOLLOWED_ARTISTS
  MEDIUM
  TOTAL
}

# A connection to a list of items.
type SaleArtworkConnection {
  # A list of edges.
  edges: [SaleArtworkEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type SaleArtworkCounts {
  bidderPositions(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type SaleArtworkCurrentBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

# An edge in a connection.
type SaleArtworkEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: SaleArtwork
}

type SaleArtworkHighestBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  display: String
  isCancelled: Boolean
}

type SaleArtworkHighEstimate {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkLowEstimate {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkMinimumNextBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkOpeningBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkReserve {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."
    disambiguate: Boolean = false

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

# The results for one of the requested aggregations
type SaleArtworksAggregationResults {
  counts: [AggregationCount]
  slice: SaleArtworkAggregation
}

# A connection to a list of items.
type SaleArtworksConnection implements ArtworkConnectionInterface {
  # Returns aggregation counts for the given filter query.
  aggregations: [SaleArtworksAggregationResults]
  counts: FilterSaleArtworksCounts

  # A list of edges.
  edges: [SaleArtwork]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

enum SaleArtworkStatus {
  CLOSED
  OPEN
}

type SaleCascadingEndTime {
  # A more granular formatted description of when the auction starts or ends if it has ended
  formattedStartDateTime: String

  # A label indicating the interval in minutes in which lots close
  intervalLabel: String
}

# A connection to a list of items.
type SaleConnection {
  # A list of edges.
  edges: [SaleEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type SaleEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Sale
}

type SaleRegistration {
  bidder: Bidder

  # A globally unique ID.
  id: ID!
  isRegistered: Boolean
  sale: Sale
}

# A connection to a list of items.
type SaleRegistrationConnection {
  # A list of edges.
  edges: [SaleRegistrationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SaleRegistrationEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: SaleRegistration
}

enum SaleSorts {
  _ID_ASC
  _ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC
  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC
  END_AT_ASC
  END_AT_DESC
  LICENSED_TIMELY_AT_NAME_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
  TIMELY_AT_NAME_ASC
  TIMELY_AT_NAME_DESC
}

input SaveArtworkInput {
  artworkID: String
  clientMutationId: String
  remove: Boolean
}

type SaveArtworkPayload {
  artwork: Artwork
  clientMutationId: String
  me: Me!
}

# A connection to a list of items.
type SavedArtworksConnection {
  default: Boolean!
  description: String!

  # A list of edges.
  edges: [SavedArtworksEdge]
  name: String!
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  private: Boolean!
  totalCount: Int
}

# An edge in a connection.
type SavedArtworksEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artwork
}

# An object that may be searched for
interface Searchable {
  displayLabel: String
  href: String
  imageUrl: String
}

# A connection to a list of items.
type SearchableConnection {
  # Returns aggregation counts for the given filter query.
  aggregations: [SearchAggregationResults]

  # A list of edges.
  edges: [SearchableEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type SearchableEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Searchable
}

type SearchableItem implements Node & Searchable {
  description: String
  displayLabel: String
  displayType: String
  href: String

  # A globally unique ID.
  id: ID!
  imageUrl: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # A slug ID.
  slug: ID!
}

enum SearchAggregation {
  TYPE
}

# The results for a requested aggregations
type SearchAggregationResults {
  counts: [AggregationCount]
  slice: SearchAggregation
}

# Human-friendly representation of a single SearchCriteria filter
type SearchCriteriaLabel {
  # The human-friendly label of the filter facet
  displayValue: String!

  # The GraphQL field name of the filter facet
  field: String!

  # The human-friendly name of the filter facet
  name: String!

  # The value of the filter facet
  value: String!
}

enum SearchEntity {
  ARTICLE
  ARTIST
  ARTIST_SERIES
  ARTWORK
  CITY
  COLLECTION
  FAIR
  FEATURE
  GALLERY
  GENE
  INSTITUTION
  PAGE
  PROFILE
  SALE
  SHOW
  TAG
  VIEWING_ROOM
}

enum SearchMode {
  AUTOSUGGEST
  SITE
}

# A piece that can be sold
interface Sellable {
  dimensions: dimensions
  editionOf: String

  # Whether a piece can be purchased through e-commerce
  isAcquireable: Boolean
  isForSale: Boolean

  # Whether a user can make an offer on the work
  isOfferable: Boolean

  # Whether a user can make an offer on the work through inquiry
  isOfferableFromInquiry: Boolean
  isSold: Boolean
  saleMessage: String
}

type SendConfirmationEmailMutationFailure {
  mutationError: GravityMutationError
}

input SendConfirmationEmailMutationInput {
  clientMutationId: String
}

type SendConfirmationEmailMutationPayload {
  clientMutationId: String
  confirmationOrError: SendConfirmationEmailMutationType
}

type SendConfirmationEmailMutationSuccess {
  confirmationSentAt: String
  unconfirmedEmail: String
}

union SendConfirmationEmailMutationType =
    SendConfirmationEmailMutationFailure
  | SendConfirmationEmailMutationSuccess

input SendConversationMessageMutationInput {
  # Attachments to the message
  attachments: [ConversationMessageAttachmentInput!]

  # Message body (html)
  bodyHTML: String

  # Message body (text)
  bodyText: String!
  clientMutationId: String

  # Sender email, optionally including display string (like 'Jane Doe <jane@doe.com>').
  from: String!

  # Sender user id
  fromId: String

  # The id of the conversation to be updated
  id: String!

  # Reply to all
  replyAll: Boolean = true

  # The message being replied to
  replyToMessageID: String!

  # Recepients emails.
  to: [String]
}

type SendConversationMessageMutationPayload {
  clientMutationId: String
  conversation: Conversation
  messageEdge: MessageEdge
}

type SendFeedbackMutationFailure {
  mutationError: GravityMutationError
}

input SendFeedbackMutationInput {
  clientMutationId: String

  # Email to associate with message (only used if logged out).
  email: String

  # Message to be sent.
  message: String!

  # Name to associate with message (only used if logged out).
  name: String

  # URL of page where feedback originated.
  url: String
}

type SendFeedbackMutationPayload {
  clientMutationId: String
  feedbackOrError: SendFeedbackMutationType
}

type SendFeedbackMutationSuccess {
  feedback: Feedback
}

union SendFeedbackMutationType =
    SendFeedbackMutationFailure
  | SendFeedbackMutationSuccess

input SendIdentityVerificationEmailMutationInput {
  clientMutationId: String

  # The email for the user undergoing identity verification
  email: String

  # The ID of the user (self or admin) who initiated the IDV process
  initiatorID: String

  # The name to be used for the user undergoing identity verification
  name: String

  # The ID of the order where the IDV process was initated
  orderID: String

  # The ID of the sale where the IDV process was initated
  saleID: String

  # Whether an automated identity verification is sent or not
  sendEmail: Boolean

  # The user Id for the user undergoing identity verification
  userID: String
}

type SendIdentityVerificationEmailMutationPayload {
  clientMutationId: String
  confirmationOrError: IdentityVerificationEmailMutationType
}

type Services {
  convection: ConvectionService!
  metaphysics: MetaphysicsService!
}

type Shortcut {
  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  long: String!
  short: String!
}

type Show implements EntityWithFilterArtworksConnectionInterface & Node {
  # The Artists presenting in this show
  artists: [Artist]

  # Artists in the show grouped by last name
  artistsGroupedByName: [ArtistGroup]

  # Artists inside the show who do not have artworks present
  artistsWithoutArtworks: [Artist]

  # The artworks featured in the show.
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    forSale: Boolean = false
    last: Int
    published: Boolean = true
  ): ArtworkConnection

  # The total count of artworks, both unpublished and published, in a show
  artworksCount: Int
  cached: Int

  # The general city, derived from a fair location, a show location or a potential city
  city: String

  # An object that represents some of the numbers you might want to highlight
  counts: ShowCounts

  # The image you should use to represent this show
  coverImage: Image
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A description of the show
  description: String
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Events from the partner that runs this show
  events: [ShowEventType]

  # A formatted description of the start to end dates
  exhibitionPeriod(
    # Formatting option to apply to exhibition period
    format: ExhibitionPeriodFormat
  ): String

  # If the show is in a Fair, then that fair
  fair: Fair

  # Artworks Elastic Search results
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection

  # A Connection of followed artists by current user for this show
  followedArtistsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ShowFollowArtistConnection

  # Flag showing if show has any location.
  hasLocation: Boolean

  # A path to the show on Artsy
  href: String

  # A globally unique ID.
  id: ID!

  # Images that represent the show, you may be interested in meta_image or cover_image for a definitive thumbnail
  images(
    # Pass true/false to include cover or not
    default: Boolean
    page: Int

    # Number of images to return
    size: Int
  ): [Image]

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  isActive: Boolean

  # Is this something we can display to the front-end?
  isDisplayable: Boolean

  # Does the show exist as a fair booth?
  isFairBooth: Boolean
  isFeatured: Boolean

  # Is the user following this show
  isFollowed: Boolean

  # Does the show exist soley online
  isOnlineExclusive: Boolean!

  # Is it a show provided for historical reference?
  isReference: Boolean

  # Have we indexed this show's artworks to tineye?
  isReverseImageSearchEnabled: Boolean!

  # Is it an outsourced local discovery stub show?
  isStubShow: Boolean

  # Whether the show is in a fair, group or solo
  kind: String

  # Where the show is located (Could also be a fair location)
  location: Location

  # An image representing the show, or a sharable image from an artwork in the show
  metaImage: Image

  # The exhibition title
  name: String

  # Shows that are near (~75km) from this show
  nearbyShowsConnection(
    after: String
    before: String

    # Whether to include local discovery stubs as well as displayable shows
    discoverable: Boolean
    first: Int
    last: Int
    sort: ShowSorts

    # By default show only current shows
    status: EventStatus
  ): ShowConnection

  # Alternate Markdown-supporting free text representation of the opening reception event’s date/time
  openingReceptionText: String

  # The partner that represents this show, could be a non-Artsy partner
  partner: PartnerTypes

  # The press release for this show
  pressRelease(format: Format): String

  # Link to the press release for this show
  pressReleaseUrl: String

  # A slug ID.
  slug: ID!

  # When this show starts
  startAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Is this show running, upcoming or closed?
  status: String

  # A formatted update on upcoming status changes
  statusUpdate(
    # Before this many days no update will be generated
    maxDays: Int
  ): String

  # Is it a fair booth or a show?
  type: String
  viewingRoomIDs: [String!]!
}

type ShowArtworkGrid implements ArtworkContextGrid {
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

# A connection to a list of items.
type ShowConnection {
  # A list of edges.
  edges: [ShowEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type ShowCounts {
  artists: Int
  artworks(
    # The slug or ID of an artist in the show.
    artistID: String
  ): Int
  eligibleArtworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type ShowEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Show
}

type ShowEventType {
  # A formatted description of the dates with hours
  dateTimeRange: String
  description: String
  endAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  eventType: String

  # A formatted description of the start to end dates
  exhibitionPeriod(
    # Formatting option to apply to exhibition period
    format: ExhibitionPeriodFormat
  ): String
  startAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  title: String
}

type ShowFollowArtist {
  artist: Artist
}

# A connection to a list of items.
type ShowFollowArtistConnection {
  # A list of edges.
  edges: [ShowFollowArtistEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ShowFollowArtistEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: ShowFollowArtist
}

enum ShowSorts {
  END_AT_ASC
  END_AT_DESC
  FEATURED_ASC
  FEATURED_DESC
  FEATURED_DESC_END_AT_DESC
  NAME_ASC
  NAME_DESC
  PARTNER_ASC
  SORTABLE_NAME_ASC
  SORTABLE_NAME_DESC
  START_AT_ASC
  START_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum sort {
  ASC
  DESC
}

type StartIdentityVerificationFailure {
  mutationError: GravityMutationError
}

input startIdentityVerificationMutationInput {
  clientMutationId: String

  # Primary ID of the identity verification to be started
  identityVerificationId: String!
}

type startIdentityVerificationMutationPayload {
  clientMutationId: String
  startIdentityVerificationResponseOrError: StartIdentityVerificationResponseOrError
}

union StartIdentityVerificationResponseOrError =
    StartIdentityVerificationFailure
  | StartIdentityVerificationSuccess

type StartIdentityVerificationSuccess {
  # URL that hosts the user-facing identity verification flow (Jumio)
  identityVerificationFlowUrl: String

  # Primary ID of the started identity verification
  identityVerificationId: String
}

type StaticContent {
  content(format: Format): String

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String

  # A slug ID.
  slug: ID!
}

enum SubGroupInputStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

enum SubGroupStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

input SubmitInquiryRequestMutationInput {
  clientMutationId: String

  # Whether or not to contact the gallery (for instance, for specialist questions)
  contactGallery: Boolean

  # The inquireable object id (Artwork ID or Show ID)
  inquireableID: String!

  # The type of inquireable object (Artwork or Show)
  inquireableType: String!

  # Optional inquiry message
  message: String

  # List of structured inquiry questions
  questions: [InquiryQuestionInput]
}

type SubmitInquiryRequestMutationPayload {
  clientMutationId: String

  # Artwork Inquiry request
  inquiryRequest: InquiryRequest
}

type SubmittedPriceEstimateParams {
  # Artwork ID submitted for estimate
  artworkId: String!

  # Email of the requester
  requesterEmail: String

  # Name of the requester
  requesterName: String

  # Phone number of the requester
  requesterPhoneNumber: String
}

type SuggestedAddress {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  postalCode: String!
  region: String
}

type SuggestedAddressFields {
  address: SuggestedAddress
  lines: [String]
}

type System {
  # Deprecated Algolia fields, temporarily kept for legacy compatibility
  algolia: Algolia @deprecated(reason: "Algolia search is no longer supported")

  # Creates, and authorizes, a JWT custom for Causality
  causalityJWT(
    role: LiveAuctionRole

    # The id of the auction to participate in
    saleID: String!
  ): String
  request: Request

  # The schema for difference micro-service settings
  services: Services

  # Gravity system time, necessary for synchronizing device clocks.
  time: SystemTime

  # List of all available product privileges
  userRoles: [UserRole!]!
}

type SystemTime {
  day: Int
  dst: Boolean
  hour: Int
  iso8601: String
  min: Int
  month: Int
  sec: Int
  unix: Int
  utcOffset: Int
  wday: Int
  year: Int
  zone: String
}

type Tag implements Node {
  cached: Int
  count: Int
  description: String

  # Artworks Elastic Search results
  filterArtworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection
  href: String

  # A globally unique ID.
  id: ID!
  image: Image

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  name: String

  # A slug ID.
  slug: ID!
}

type TargetSupply {
  microfunnel: [TargetSupplyMicrofunnelItem]
}

type TargetSupplyMicrofunnelItem {
  artist: Artist

  # A list of recently sold artworks.
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int

    # Randomize the order of artworks for display purposes.
    randomize: Boolean
  ): ArtworkConnection
  metadata: TargetSupplyMicrofunnelMetadata
}

type TargetSupplyMicrofunnelMetadata {
  highestRealized: String
  realized: String
  recentlySoldArtworkIDs: [String]
  roundedUniqueVisitors: String
  roundedViews: String
  str: String
  uniqueVisitors: String
  views: String
}

type TaxInfo {
  displayText: String!
  moreInfo: TaxMoreInfo!
}

type TaxMoreInfo {
  displayText: String!
  url: String!
}

type TrendingArtists {
  artists: [Artist]
}

enum TriggerCampaignID {
  ART_QUIZ
}

input TriggerCampaignInput {
  campaignID: TriggerCampaignID!
  clientMutationId: String
}

type TriggerCampaignMutationFailure {
  message: String!
  mutationError: GravityMutationError
  statusCode: Int
}

type TriggerCampaignMutationSuccess {
  message: String!
  statusCode: Int
  success: Boolean
}

union TriggerCampaignMutationSuccessOrError =
    TriggerCampaignMutationFailure
  | TriggerCampaignMutationSuccess

type TriggerCampaignPayload {
  clientMutationId: String
  successOrError: TriggerCampaignMutationSuccessOrError
}

union UnderlyingCurrentEvent = Sale | Show

input UnlinkAuthenticationMutationInput {
  clientMutationId: String
  provider: AuthenticationProvider!
}

type UnlinkAuthenticationMutationPayload {
  clientMutationId: String
  me: Me!
}

type UpdateArtistFailure {
  mutationError: GravityMutationError
}

input UpdateArtistMutationInput {
  alternateNames: [String!]
  birthday: String
  blurb: String
  clientMutationId: String
  coverArtworkId: String
  deathday: String
  displayName: String
  first: String
  gender: String
  groupIndicator: ArtistGroupIndicator
  hometown: String
  id: String!
  last: String
  location: String
  middle: String
  nationality: String
  public: Boolean
  targetSupplyPriority: ArtistTargetSupplyPriority
  targetSupplyType: ArtistTargetSupplyType
}

type UpdateArtistMutationPayload {
  # On success: the updated artist
  artistOrError: UpdateArtistResponseOrError
  clientMutationId: String
}

union UpdateArtistResponseOrError = UpdateArtistFailure | UpdateArtistSuccess

type UpdateArtistSuccess {
  artist: Artist
}

type updateArtworkFailure {
  mutationError: GravityMutationError
}

input UpdateArtworkMutationInput {
  # The availability of the artwork
  availability: String
  clientMutationId: String

  # The id of the artwork to update.
  id: String!
}

type UpdateArtworkMutationPayload {
  # On success: the artwork updated.
  artworkOrError: updateArtworkResponseOrError
  clientMutationId: String
}

union updateArtworkResponseOrError = updateArtworkFailure | updateArtworkSuccess

type updateArtworkSuccess {
  artwork: Artwork
}

type UpdateCMSLastAccessTimestampFailure {
  mutationError: GravityMutationError
}

input UpdateCMSLastAccessTimestampMutationInput {
  clientMutationId: String

  # The id of the partner to update.
  id: String!
}

type UpdateCMSLastAccessTimestampMutationPayload {
  clientMutationId: String

  # On success: the updated partner. On error: the error that occurred.
  partnerOrError: UpdateCMSLastAccessTimestampResponseOrError
}

union UpdateCMSLastAccessTimestampResponseOrError =
    UpdateCMSLastAccessTimestampFailure
  | UpdateCMSLastAccessTimestampSuccess

type UpdateCMSLastAccessTimestampSuccess {
  partner: Partner
}

type UpdateCollectionFailure {
  mutationError: GravityMutationError
}

input updateCollectionInput {
  clientMutationId: String

  # The internal ID of the collection
  id: String!
  name: String!
}

type updateCollectionPayload {
  clientMutationId: String
  responseOrError: UpdateCollectionResponseOrError
}

union UpdateCollectionResponseOrError =
    UpdateCollectionFailure
  | UpdateCollectionSuccess

type UpdateCollectionSuccess {
  collection: Collection
}

input UpdateCollectorProfileInput {
  # List of affiliated auction house ids, referencing Galaxy.
  affiliatedAuctionHouseIds: [String]

  # List of affiliated fair ids, referencing Galaxy.
  affiliatedFairIds: [String]

  # List of affiliated gallery ids, referencing Galaxy.
  affiliatedGalleryIds: [String]
  clientMutationId: String
  companyName: String
  companyWebsite: String
  institutionalAffiliations: String
  intents: [Intents]
  loyaltyApplicant: Boolean
  professionalBuyer: Boolean

  # Free-form text of purchases the collector has indicated.
  selfReportedPurchases: String
}

type UpdateCollectorProfilePayload {
  artsyUserSince(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  bio: String
  clientMutationId: String
  collectorLevel: Int

  # List of artists the Collector is interested in.
  collectorProfileArtists: [CollectorProfileArtists]
  companyName: String
  companyWebsite: String
  confirmedBuyerAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  email: String
  emailConfirmed: Boolean
    @deprecated(
      reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead"
    )
  icon: Image

  # A globally unique ID.
  id: ID!
  identityVerified: Boolean
    @deprecated(
      reason: "identityVerified is going to be removed, use isIdentityVerified instead"
    )
  initials(length: Int = 3): String
  institutionalAffiliations: String
  intents: [String]

  # A type-specific ID likely used as a database ID.
  internalID: ID!
  isActiveBidder: Boolean
  isActiveInquirer: Boolean
  isEmailConfirmed: Boolean
  isIdentityVerified: Boolean
  isProfileComplete: Boolean
  location: MyLocation
  loyaltyApplicantAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  name: String

  # Collector's position with relevant institutions
  otherRelevantPositions: String

  # User ID of the collector profile's owner
  ownerID: ID!
  privacy: String
  profession: String
  professionalBuyerAppliedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  professionalBuyerAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  selfReportedPurchases: String
  userInterests: [UserInterest]!
}

type UpdateCollectorProfileWithIDFailure {
  mutationError: GravityMutationError
}

input UpdateCollectorProfileWithIDInput {
  # List of affiliated auction house ids, referencing Galaxy.
  affiliatedAuctionHouseIds: [String]

  # List of affiliated fair ids, referencing Galaxy.
  affiliatedFairIds: [String]

  # List of affiliated gallery ids, referencing Galaxy.
  affiliatedGalleryIds: [String]
  clientMutationId: String
  companyName: String
  companyWebsite: String
  confirmedBuyer: Boolean

  # The internal ID of the collector profile to update
  id: String
  institutionalAffiliations: String
  intents: [Intents]
  loyaltyApplicant: Boolean
  professionalBuyer: Boolean

  # Free-form text of purchases the collector has indicated.
  selfReportedPurchases: String
}

type UpdateCollectorProfileWithIDPayload {
  clientMutationId: String

  # On success: the collector profile
  collectorProfileOrError: UpdateCollectorProfileWithIDResponseOrError
}

union UpdateCollectorProfileWithIDResponseOrError =
    UpdateCollectorProfileWithIDFailure
  | UpdateCollectorProfileWithIDSuccess

type UpdateCollectorProfileWithIDSuccess {
  collectorProfile: CollectorProfileType
}

input UpdateConversationMutationInput {
  clientMutationId: String

  # The id of the conversation to be updated.
  conversationId: String!

  # Mark the conversation as dismissed
  dismissed: Boolean

  # The message id to mark as read as a collector (from).
  fromLastViewedMessageId: String

  # The seller outcome for the conversation. Options include `already_contacted`, `dont_trust`, `other`, `work_unavailable`.
  sellerOutcome: String

  # The seller outcome comment for the conversation.
  sellerOutcomeComment: String

  # The message id to mark as read as a partner (to).
  toLastViewedMessageId: String
}

type UpdateConversationMutationPayload {
  clientMutationId: String
  conversation: Conversation
}

type UpdateFeaturedLinkFailure {
  mutationError: GravityMutationError
}

input UpdateFeaturedLinkMutationInput {
  clientMutationId: String
  description: String
  href: String
  id: String!
  sourceBucket: String
  sourceKey: String
  subtitle: String
  title: String
}

type UpdateFeaturedLinkMutationPayload {
  clientMutationId: String

  # On success: featured link updated.
  featuredLinkOrError: UpdateFeaturedLinkResponseOrError
}

union UpdateFeaturedLinkResponseOrError =
    UpdateFeaturedLinkFailure
  | UpdateFeaturedLinkSuccess

type UpdateFeaturedLinkSuccess {
  featuredLink: FeaturedLink
}

type UpdateFeatureFailure {
  mutationError: GravityMutationError
}

input UpdateFeatureMutationInput {
  active: Boolean
  callout: String
  clientMutationId: String
  description: String
  id: String!
  layout: FeatureLayouts
  name: String
  sourceBucket: String
  sourceKey: String
  subheadline: String
}

type UpdateFeatureMutationPayload {
  clientMutationId: String

  # On success: the feature updated.
  featureOrError: UpdateFeatureResponseOrError
}

union UpdateFeatureResponseOrError = UpdateFeatureFailure | UpdateFeatureSuccess

type UpdateFeatureSuccess {
  feature: Feature
}

type updateHeroUnitFailure {
  mutationError: GravityMutationError
}

input UpdateHeroUnitLinkInput {
  text: String!
  url: String!
}

input UpdateHeroUnitMutationInput {
  body: String!
  clientMutationId: String
  credit: String
  endAt: String
  id: String!
  imageUrl: String
  label: String
  link: UpdateHeroUnitLinkInput!
  position: Int
  startAt: String
  title: String!
}

type UpdateHeroUnitMutationPayload {
  clientMutationId: String

  # On success: the hero unit updated.
  heroUnitOrError: updateHeroUnitResponseOrError
}

union updateHeroUnitResponseOrError =
    updateHeroUnitFailure
  | updateHeroUnitSuccess

type updateHeroUnitSuccess {
  heroUnit: HeroUnit
}

type UpdateMessageFailure {
  mutationError: GravityMutationError
}

input UpdateMessageMutationInput {
  clientMutationId: String

  # The id of the message to be updated.
  id: String!

  # Mark the message as spam
  spam: Boolean!
}

type UpdateMessageMutationPayload {
  clientMutationId: String

  # On success: the updated conversation
  conversationOrError: UpdateMessageResponseOrError
}

union UpdateMessageResponseOrError = UpdateMessageFailure | UpdateMessageSuccess

type UpdateMessageSuccess {
  conversation: Conversation
}

input UpdateMyPasswordMutationInput {
  clientMutationId: String
  currentPassword: String!
  newPassword: String!
  passwordConfirmation: String!
}

type UpdateMyPasswordMutationPayload {
  clientMutationId: String
  me: Me!
}

input UpdateMyProfileInput {
  # Number of artworks purchased per year.
  artworksPerYear: String

  # The user's bio
  bio: String
  clientMutationId: String

  # The collector level for the user
  collectorLevel: Int

  # The user completed onboarding.
  completedOnboarding: Boolean

  # Currency preference of the user
  currencyPreference: CurrencyPreference

  # The given email of the user.
  email: String

  # Frequency of marketing emails.
  emailFrequency: String

  # Gender.
  gender: String

  # User's icon source_url for Gemini
  iconUrl: String

  # Works in the art industry?
  industry: String

  # Is a collector?
  isCollector: Boolean

  # Length unit preference of the user
  lengthUnitPreference: LengthUnitPreference

  # The given location of the user as structured data
  location: EditableLocation

  # The given name of the user.
  name: String

  # Additional personal notes.
  notes: String

  # Collector's positions with relevant institutions
  otherRelevantPositions: String

  # The user's password, required to change email address.
  password: String

  # The given phone number of the user.
  phone: String
  phoneCountryCode: String
  phoneNumber: String

  # The maximum price collector has selected
  priceRangeMax: Float

  # The minimum price collector has selected
  priceRangeMin: Int

  # Wheter or not the collector shares detailed profile information with galleries.
  privacy: String

  # Profession.
  profession: String

  # This user should receive lot opening notifications
  receiveLotOpeningSoonNotification: Boolean

  # This user should receive new sales notifications
  receiveNewSalesNotification: Boolean

  # This user should receive new works notifications
  receiveNewWorksNotification: Boolean

  # This user should receive order notifications
  receiveOrderNotification: Boolean

  # This user should receive outbid notifications
  receiveOutbidNotification: Boolean

  # This user should receive partner show notifications
  receivePartnerShowNotification: Boolean

  # This user should receive promotional notifications
  receivePromotionNotification: Boolean

  # This user should receive purchase notifications
  receivePurchaseNotification: Boolean

  # This user should receive sale opening/closing notifications
  receiveSaleOpeningClosingNotification: Boolean

  # This user should receive viewing room notifications
  receiveViewingRoomNotification: Boolean

  # Shares FollowArtists, FollowGenes, and FollowProfiles with partners.
  shareFollows: Boolean
}

union UpdateMyProfileMutation =
    UpdateMyProfileMutationFailure
  | UpdateMyProfileMutationSuccess

type UpdateMyProfileMutationFailure {
  mutationError: GravityMutationError
}

type UpdateMyProfileMutationSuccess {
  user: User
}

type UpdateMyProfilePayload {
  clientMutationId: String
  me: Me
  user: User
  userOrError: UpdateMyProfileMutation
}

input updateNotificationPreferencesMutationInput {
  authenticationToken: String
  clientMutationId: String
  subscriptionGroups: [NotificationPreferenceInput!]!
}

type updateNotificationPreferencesMutationPayload {
  clientMutationId: String

  # User's notification preferences
  notificationPreferences(
    authenticationToken: String
  ): [NotificationPreference!]!
}

type UpdateOrderedSetFailure {
  mutationError: GravityMutationError
}

input UpdateOrderedSetMutationInput {
  clientMutationId: String
  description: String
  id: String!
  internalName: String
  itemId: String

  # Modify the OrderedSet's items to only included provided ids. An empty array will remove all items from the set
  itemIds: [String]
  itemType: String
  key: String
  layout: OrderedSetLayouts
  name: String
  ownerId: String
  ownerType: String
  published: Boolean
  unsetOwner: Boolean
}

type UpdateOrderedSetMutationPayload {
  clientMutationId: String

  # On success: the ordered set updated.
  orderedSetOrError: UpdateOrderedSetResponseOrError
}

union UpdateOrderedSetResponseOrError =
    UpdateOrderedSetFailure
  | UpdateOrderedSetSuccess

type UpdateOrderedSetSuccess {
  feature: Feature
  set: OrderedSet
}

type UpdatePageFailure {
  mutationError: GravityMutationError
}

input UpdatePageMutationInput {
  clientMutationId: String
  content: String!
  id: String!
  name: String!
  published: Boolean!
}

type UpdatePageMutationPayload {
  clientMutationId: String

  # On success: the page updated.
  pageOrError: UpdatePageResponseOrError
}

union UpdatePageResponseOrError = UpdatePageFailure | UpdatePageSuccess

type UpdatePageSuccess {
  page: Page
}

input updateQuizMutationInput {
  artworkId: String!
  clearInteraction: Boolean
  clientMutationId: String
  userId: String!
}

type updateQuizMutationPayload {
  clientMutationId: String
  quiz: Quiz
}

type UpdateUserInterestFailure {
  mutationError: GravityMutationError
}

input UpdateUserInterestInput {
  id: String!
  private: Boolean
}

input UpdateUserInterestMutationInput {
  clientMutationId: String
  id: String!
  private: Boolean
}

type UpdateUserInterestMutationPayload {
  clientMutationId: String

  # On success: the new state of the UserInterest
  userInterestOrError: UpdateUserInterestResponseOrError
}

union UpdateUserInterestOrError = UpdateUserInterestsFailure | UserInterest

union UpdateUserInterestResponseOrError =
    UpdateUserInterestFailure
  | UpdateUserInterestSuccess

type UpdateUserInterestsFailure {
  mutationError: GravityMutationError
}

input UpdateUserInterestsMutationInput {
  clientMutationId: String
  userInterests: [UpdateUserInterestInput!]!
}

type UpdateUserInterestsMutationPayload {
  clientMutationId: String
  me: Me!
  userInterestsOrErrors: [UpdateUserInterestOrError!]!
}

type UpdateUserInterestSuccess {
  userInterest: UserInterest
}

input UpdateUserMutationInput {
  clientMutationId: String
  dataTransferOptOut: Boolean
  email: String
  id: String!
  name: String
  phone: String
}

type UpdateUserMutationPayload {
  clientMutationId: String
}

input UpdateUserSaleProfileMutationInput {
  addressLine1: String
  addressLine2: String
  city: String
  clientMutationId: String
  country: String
  id: String!
  requireBidderApproval: Boolean
  state: String
  zip: String
}

type UpdateUserSaleProfileMutationPayload {
  clientMutationId: String
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type User implements Node {
  accessiblePropertiesConnection(
    after: String
    before: String
    first: Int
    last: Int
    model: UserAccessiblePropertyInput
  ): UserAccessiblePropertyConnection

  # The admin notes associated with the user
  adminNotes: [UserAdminNotes]
  cached: Int
  collectorProfile: CollectorProfileType
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # Has the user opted out of data transfer.
  dataTransferOptOut: Boolean

  # The given email of the user.
  email: String!
  emailConfirmationSentAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  emailConfirmedAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  follows: UserFollows

  # A globally unique ID.
  id: ID!
  initials(length: Int = 3): String
  inquiredArtworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserInquiredArtworksConnection
  interestsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserInterestConnection

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # Has the users identity been verified.
  isIdentityVerified: Boolean!
  lastSignInAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # The given location of the user as structured data
  location: Location
  myCollectionArtworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection

  # The given name of the user.
  name: String!

  # The paddle number of the user
  paddleNumber: String

  # The Partner or Profile access granted to the user
  partnerAccess: [String]!

  # The given phone number of the user.
  phone: String

  # Pin for bidding at an auction
  pin: String

  # The price range the collector has selected
  priceRange: String

  # The Partner or Profile access granted to the user
  profileAccess: [String]!
  purchasedArtworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserPurchasesConnection

  # The art quiz of a logged-in user
  quiz: Quiz!

  # This user should receive lot opening notifications
  receiveLotOpeningSoonNotification: Boolean

  # This user should receive new sales notifications
  receiveNewSalesNotification: Boolean

  # This user should receive new works notifications
  receiveNewWorksNotification: Boolean

  # This user should receive order notifications
  receiveOrderNotification: Boolean

  # This user should receive outbid notifications
  receiveOutbidNotification: Boolean

  # This user should receive partner show notifications
  receivePartnerShowNotification: Boolean

  # This user should receive promotional notifications
  receivePromotionNotification: Boolean

  # This user should receive purchase notifications
  receivePurchaseNotification: Boolean

  # This user should receive sale opening/closing notifications
  receiveSaleOpeningClosingNotification: Boolean

  # This user should receive viewing room notifications
  receiveViewingRoomNotification: Boolean

  # The roles of the user
  roles: [String]!

  # The sale profile of the user.
  saleProfile: UserSaleProfile
  savedArtworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection

  # If the user has enabled two-factor authentication on their account
  secondFactorEnabled: Boolean!

  # The number of times a user has signed in
  signInCount: Int!

  # The unconfirmed email of the user.
  unconfirmedEmail: String

  # Check whether a user exists by email address before creating an account.
  userAlreadyExists: Boolean
}

union UserAccessibleProperty = Artist | Artwork | Partner | Profile

# A connection to a list of items.
type UserAccessiblePropertyConnection {
  # A list of edges.
  edges: [UserAccessiblePropertyEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type UserAccessiblePropertyEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: UserAccessibleProperty
}

enum UserAccessiblePropertyInput {
  ARTIST
  ARTWORK
  PARTNER
  PROFILE
}

type UserAdminNotes {
  # The body of the admin note
  body: String!
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # The user who created the note
  creator: User

  # A globally unique ID.
  id: ID!

  # A type-specific ID likely used as a database ID.
  internalID: ID!
}

# A connection to a list of items.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: User
}

type UserFollows {
  artistsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  genesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): GeneConnection
}

type UserIconDeleteFailureType {
  mutationError: GravityMutationError
}

type UserIconDeleteSuccessType {
  icon: Image
  success: Boolean
}

union UserIconDeletionMutationType =
    UserIconDeleteFailureType
  | UserIconDeleteSuccessType

# A connection to a list of items.
type UserInquiredArtworksConnection {
  # A list of edges.
  edges: [UserInquiredArtworksEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type UserInquiredArtworksEdge {
  createdAt(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String

  # A cursor for use in pagination
  cursor: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  isSentToGallery: Boolean

  # The item at the end of the edge
  node: Artwork
  note: String
  outcome: String

  # This reflects the `title` attribute of the most recent embedded object in `statuses`
  status: String
}

type UserInterest {
  body: String
  category: UserInterestCategory!

  # A globally unique ID.
  id: ID!
  interest: UserInterestInterest!

  # A type-specific ID.
  internalID: ID!
  ownerType: UserInterestOwnerType
  private: Boolean!
}

enum UserInterestCategory {
  COLLECTED_BEFORE
  INTERESTED_IN_COLLECTING
}

# A connection to a list of items.
type UserInterestConnection {
  # A list of edges.
  edges: [UserInterestEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type UserInterestEdge {
  body: String
  category: UserInterestCategory!
  createdByAdmin: Boolean!

  # A cursor for use in pagination
  cursor: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!

  # The item at the end of the edge
  node: UserInterestInterest
  ownerType: String
  private: Boolean!
}

input UserInterestInput {
  anonymousSessionId: String

  # Optional body for note
  body: String
  category: UserInterestCategory!
  interestId: String!
  interestType: UserInterestInterestType!
  private: Boolean
  sessionID: String
}

union UserInterestInterest = Artist | Gene

enum UserInterestInterestType {
  ARTIST
  GENE
}

union UserInterestOrError = CreateUserInterestFailure | UserInterest

enum UserInterestOwnerType {
  COLLECTOR_PROFILE
  USER_SALE_PROFILE
}

# A connection to a list of items.
type UserPurchasesConnection {
  # A list of edges.
  edges: [UserPurchasesEdge]
  pageCursors: PageCursors!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type UserPurchasesEdge {
  # A cursor for use in pagination
  cursor: String!

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!

  # The item at the end of the edge
  node: Artwork
  ownerType: String
  saleDate(
    format: String

    # A tz database time zone, otherwise falls back to "X-TIMEZONE" header. See
    # http://www.iana.org/time-zones,
    # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: String
  ): String
  salePrice: Float
  source: String
}

# Fields corresponding to a given product privilege
type UserRole {
  # unique label for this role
  name: String!
}

type UserSaleProfile {
  # The first line of address for this user.
  addressLine1: String

  # The second line of address for this user.
  addressLine2: String

  # The alternative email for this user
  alternativeEmail: String

  # The birth year for this user
  birthYear: Int

  # The buyer status for this user
  buyerStatus: Int

  # The city for this user.
  city: String

  # The country for this user.
  country: String

  # The email for this user
  email: String

  # The employer for this user
  employer: String

  # The first name for this user
  firstName: String

  # The gender for this user
  gender: String

  # A globally unique ID.
  id: ID!

  # The indusrty for this user
  industry: String

  # A type-specific ID likely used as a database ID.
  internalID: ID!

  # The job title for this user
  jobTitle: String

  # The last name  for this user
  lastName: String

  # The marital status for this user
  maritalStatus: String

  # The name for this user
  name: String

  # The prefix for this user
  prefix: String

  # The price range for this user
  priceRange: Int

  # The profession for this user
  profession: String

  # If this user requires manual approval for auction bidding
  requireBidderApproval: Boolean!

  # The salary(USD) for this user
  salaryUSD: Int

  # The spouse for this user
  spouse: String

  # The state for this user.
  state: String

  # The zip for this user.
  zip: String
}

union VanityURLEntityType = Fair | Partner

enum VerificationStatuses {
  NOT_FOUND
  NOT_PERFORMED
  VERIFICATION_UNAVAILABLE
  VERIFIED_NO_CHANGE
  VERIFIED_WITH_CHANGES
}

type VerifiedRepresentative implements Node {
  artist: Artist!

  # A globally unique ID.
  id: ID!

  # A type-specific ID.
  internalID: ID!
  partner: Partner!
}

type VerifyAddressFailureType {
  mutationError: GravityMutationError
}

input VerifyAddressInput {
  addressLine1: String!
  addressLine2: String
  city: String
  clientMutationId: String
  country: String!
  postalCode: String!
  region: String
}

union VerifyAddressMutationType = VerifyAddressFailureType | VerifyAddressType

type VerifyAddressPayload {
  clientMutationId: String
  verifyAddressOrError: VerifyAddressMutationType
}

type VerifyAddressType {
  addressVerificationId: String!
  inputAddress: InputAddressFields!
  suggestedAddresses: [SuggestedAddressFields]!
  verificationStatus: VerificationStatuses!
}

# An object containing video metadata
type Video {
  # The height of the video
  height: Int!
  id: ID!

  # Returns a full-qualified url that can be embedded in an iframe player
  playerUrl: String!

  # The width of the video
  width: Int!
}

# A wildcard used to support complex root queries in Relay
type Viewer {
  # Do not use (only used internally for stitching)
  _do_not_use_conversation(
    # The ID of the Conversation
    id: String!
  ): Conversation

  # Do not use (only used internally for stitching)
  _do_not_use_image: Image
  admin: Admin

  # An Article
  article(
    # The ID of the Article
    id: String!
  ): Article

  # A list of Articles
  articles(
    auctionID: String
    channelID: String
    featured: Boolean

    #
    #         Only return articles matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    layout: ArticleLayout
    limit: Int
    offset: Int
    omit: [String!]
    published: Boolean = true
    showID: String
    sort: ArticleSorts
  ): [Article!]!

  # A connection of articles
  articlesConnection(
    after: String
    before: String
    channelId: String
    featured: Boolean
    first: Int

    # Get only articles with 'standard', 'feature', 'series' or 'video' layouts.
    inEditorialFeed: Boolean
    last: Int
    layout: ArticleLayout
    omit: [String!]
    page: Int
    sort: ArticleSorts
  ): ArticleConnection

  # An Artist
  artist(
    # The slug or ID of the Artist
    id: String!
  ): Artist

  # A list of Artists
  artists(
    #
    #         Only return artists matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    page: Int = 1
    size: Int

    #
    #         Only return artists matching specified slugs.
    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
    #
    slugs: [String]
    sort: ArtistSorts
  ): [Artist]

  # A list of artists
  artistsConnection(
    after: String
    before: String
    first: Int

    #
    #         Only return artists matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    last: Int
    letter: String
    page: Int
    size: Int

    #
    #         Only return artists matching specified slugs.
    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
    #
    slugs: [String]
    sort: ArtistSorts

    # If present, will search by term
    term: String
  ): ArtistConnection

  # An Artwork
  artwork(
    # The slug or ID of the Artwork
    id: String!
  ): Artwork

  # List of all artwork attribution classes
  artworkAttributionClasses: [AttributionClass]

  # List of all artwork mediums
  artworkMediums: [ArtworkMedium]

  # A list of Artworks
  artworks(
    after: String
    before: String
    first: Int
    ids: [String]
    last: Int
    respectParamsOrder: Boolean = false
  ): ArtworkConnection
    @deprecated(
      reason: "This is only for use in resolving stitched queries, not for first-class client use."
    )

  # Artworks Elastic Search results
  artworksConnection(
    acquireable: Boolean
    additionalGeneIDs: [String]
    after: String
    aggregationPartnerCities: [String]
    aggregations: [ArtworkAggregation]
    artistID: String
    artistIDs: [String]
    artistNationalities: [String]
    artistSeriesID: String
    artistSeriesIDs: [String]
    atAuction: Boolean
    attributionClass: [String]
    before: String
    color: String
    colors: [String]
    dimensionRange: String
    excludeArtworkIDs: [String]
    extraAggregationGeneIDs: [String]
    first: Int
    forSale: Boolean
    geneID: String
    geneIDs: [String]
    height: String
    includeArtworksByFollowedArtists: Boolean
    includeMediumFilterInAggregation: Boolean
    input: FilterArtworksInput
    inquireableOnly: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keywordMatchExact: Boolean
    last: Int
    locationCities: [String]
    majorPeriods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean
    marketingCollectionID: String
    materialsTerms: [String]

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partnerCities: [String]
    partnerID: ID
    partnerIDs: [String]
    period: String
    periods: [String]
    priceRange: String
    saleID: ID
    size: Int

    # Filter results by Artwork sizes
    sizes: [ArtworkSizes]
    sort: String
    tagID: String
    width: String
  ): FilterArtworksConnection

  # A connection of artworks for a user.
  artworksForUser(
    after: String
    before: String
    first: Int
    includeBackfill: Boolean!
    last: Int
    marketable: Boolean
    maxWorksPerArtist: Int
    page: Int
    userId: String
    version: String
  ): ArtworkConnection

  # An auction result
  auctionResult(
    # The ID or slug of the auction result
    id: String!
  ): AuctionResult

  # If user is logged out; status is `LOGGED_OUT`. If user is logged in; status is
  # `LOGGED_IN`. If user is logged in with invalid authentication (401); 'Promise'
  # resolves to 'Status.Invalid'. All other status codes will resolve to
  # `LOGGED_IN` because we don't know whether or not the authentication is valid
  # (error could be something else).
  authenticationStatus: AuthenticationStatus!

  # A user's bank account
  bankAccount(
    # The ID of the bank account
    id: String!
  ): BankAccount
  channel(id: ID!): Channel!

  # A list of cities
  cities(featured: Boolean = false): [City!]!

  # A city-based entry point for local discovery
  city(
    # A point which will be used to locate the nearest local discovery city within a threshold
    near: Near

    # A slug for the city, conforming to Gravity's city slug naming conventions
    slug: String
  ): City

  # A collector profile.
  collectorProfile(userID: String): CollectorProfileType

  # A list of collector profiles that have sent an inquiry to a partner
  collectorProfilesConnection(
    after: String
    before: String
    first: Int
    last: Int
    partnerID: ID

    # Term used for searching collector profiles
    term: String
  ): CollectorProfileTypeConnection

  # A conversation, usually between a user and a partner
  conversation(
    # The ID of the Conversation
    id: String!
  ): Conversation

  # Conversations, usually between a user and partner.
  conversationsConnection(
    after: String
    artistId: String
    before: String
    dismissed: Boolean
    first: Int
    fromId: String
    hasMessage: Boolean
    hasReply: Boolean
    last: Int
    partnerId: String
    toBeReplied: Boolean
    type: ConversationsInputMode
  ): ConversationConnection

  # A user's credit card
  creditCard(
    # The ID of the Credit Card
    id: String!
  ): CreditCard

  # A list of trending artists. Inferred from a manually curated collection of trending artworks.
  curatedTrendingArtists(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  departments: [Department!]!

  # Get an image info
  doNotUseImageSearch(
    # Image file
    image: Upload!
  ): ImageSearch

  # A namespace external partners (provided by Galaxy)
  external: External!

  # A Fair
  fair(
    # The slug or ID of the Fair
    id: String!
  ): Fair

  # A fair organizer, e.g. The Armory Show
  fairOrganizer(
    # The slug or ID of the Fair organizer
    id: String!
  ): FairOrganizer

  # A list of Fairs
  fairs(
    fairOrganizerID: String
    hasFullFeature: Boolean
    hasHomepageSection: Boolean
    hasListing: Boolean

    #
    #         Only return fairs matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    page: Int
    size: Int
    sort: FairSorts
    status: EventStatus
  ): [Fair]

  # A list of fairs
  fairsConnection(
    after: String
    before: String
    fairOrganizerID: String
    first: Int
    hasFullFeature: Boolean
    hasHomepageSection: Boolean
    hasListing: Boolean

    # Only return fairs matching specified IDs. Accepts list of IDs.
    ids: [String]
    last: Int
    near: Near
    sort: FairSorts
    status: EventStatus
  ): FairConnection

  # A Feature
  feature(
    # The slug or ID of the Feature
    id: ID
  ): Feature
  featuredLinksConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If present, will search by term
    term: String
  ): FeaturedLinkConnection
  featuresConnection(
    after: String
    before: String
    first: Int
    last: Int
    sort: FeatureSorts

    # If present, will search by term
    term: String
  ): FeatureConnection

  # Partners Elastic Search results
  filterPartners(
    aggregations: [PartnersAggregation]!
    defaultProfilePublic: Boolean
    eligibleForCarousel: Boolean

    # Indicates an active subscription
    eligibleForListing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligibleForPrimaryBucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligibleForSecondaryBucket: Boolean

    # Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true).
    excludeFollowedPartners: Boolean
    hasFullProfile: Boolean
    ids: [String]

    # If true, will only return partners that are located near the user's location based on the IP address.
    includePartnersNearIpBasedLocation: Boolean = false

    # If true, will only return partners that list artists that the user follows
    includePartnersWithFollowedArtists: Boolean

    # Max distance to use when geo-locating partners, defaults to 75km.
    maxDistance: Int

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partnerCategories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): FilterPartners
  gene(
    # The slug or ID of the Gene
    id: String!
  ): Gene

  # A list of Gene Families
  geneFamiliesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): GeneFamilyConnection

  # A list of Genes
  genes(
    size: Int

    #
    #         Only return genes matching specified slugs.
    #         Accepts list of slugs.
    #
    slugs: [String]
  ): [Gene]

  # A Hero Unit.
  heroUnit(
    # The ID of the Hero Unit
    id: String!
  ): HeroUnit
  heroUnitsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If true will include inactive hero units.
    private: Boolean = false

    # If present will search by term.
    term: String
  ): HeroUnitConnection
  highlights: Highlights

  # Home screen content
  homePage: HomePage

  # An identity verification that the user has access to
  identityVerification(
    # ID of the IdentityVerification
    id: String!
  ): IdentityVerification

  # A connection of identity verifications.
  identityVerificationsConnection(
    after: String
    before: String
    email: String
    first: Int
    last: Int
    name: String
    page: Int
    size: Int
    userId: String
  ): IdentityVerificationConnection
  job(id: ID!): Job!
  jobs: [Job!]!
  markdown(content: String!): MarkdownContent

  # A Search for Artists
  matchArtist(
    # Exclude these MongoDB ids from results
    excludeIDs: [String]

    # Page to retrieve. Default: 1.
    page: Int

    # Maximum number of items to retrieve. Default: 5.
    size: Int

    # Your search term
    term: String!
  ): [Artist]
  matchConnection(
    after: String
    before: String

    # ARTIST_SERIES, CITY, COLLECTION, and VIEWING_ROOM are not yet supported
    entities: [SearchEntity!] = []
    first: Int
    last: Int

    # Mode of search to execute
    mode: SearchMode = SITE
    page: Int = 1
    size: Int = 10
    term: String!
  ): MatchConnection
  me: Me

  # Fetches an object given its globally unique ID.
  node(
    # The globally unique ID of the node.
    id: ID!
  ): Node

  # User's notification preferences
  notificationPreferences(
    authenticationToken: String
  ): [NotificationPreference!]!

  # A feed of notifications
  notificationsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # Notification types to return
    notificationTypes: [NotificationTypesEnum]
  ): NotificationConnection

  # An OrderedSet
  orderedSet(
    # The ID of the OrderedSet
    id: String!
  ): OrderedSet

  # A collection of OrderedSets
  orderedSets(
    # Key to the OrderedSet or group of OrderedSets
    key: String!
    public: Boolean = true
  ): [OrderedSet]

  # A connection of Ordered Sets
  orderedSetsConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If present, will search by term
    term: String
  ): OrderedSetConnection
  page(id: ID!): Page!
  pagesConnection(
    after: String
    before: String
    first: Int
    last: Int

    # If present, will search by term
    term: String
  ): PageConnection

  # A Partner
  partner(
    # The slug or ID of the Partner
    id: String!
  ): Partner

  # Retrieve all partner documents for a given partner
  partnerArtistDocumentsConnection(
    after: String

    # The slug or ID of the Artist
    artistID: String!
    before: String
    first: Int
    last: Int
    page: Int

    # The slug or ID of the Partner
    partnerID: String!
    size: Int
  ): PartnerArtistDocumentConnection
    @deprecated(reason: "Prefer `partner.documentsConnection`")

  # A list of Artworks for a partner
  partnerArtworks(
    after: String
    before: String
    first: Int
    last: Int
    partnerID: String!
    private: Boolean
    viewingRoomID: String
  ): ArtworkConnection
    @deprecated(
      reason: "This is only for use in resolving stitched queries, not for first-class client use."
    )

  # A list of PartnerCategories
  partnerCategories(
    categoryType: PartnerCategoryType

    # Filter by whether category is internal
    internal: Boolean = false
    size: Int
  ): [PartnerCategory]

  # A PartnerCategory
  partnerCategory(
    # The slug or ID of the PartnerCategory
    id: String!
  ): PartnerCategory

  # A list of Partners
  partnersConnection(
    after: String
    before: String
    defaultProfilePublic: Boolean

    # Indicates an active subscription
    eligibleForListing: Boolean

    # Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true).
    excludeFollowedPartners: Boolean
    first: Int
    ids: [String]

    # If true, will only return partners that are located near the user's location based on the IP address.
    includePartnersNearIpBasedLocation: Boolean = false

    # If true, will only return partners that list artists that the user follows
    includePartnersWithFollowedArtists: Boolean
    last: Int

    # Max distance to use when geo-locating partners, defaults to 75km.
    maxDistance: Int

    # Coordinates to find partners closest to
    near: String

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partnerCategories: [String]
    sort: PartnersSortType
    type: [PartnerClassification]
  ): PartnerConnection

  # Retrieve all partner show documents for a given partner and show
  partnerShowDocumentsConnection(
    after: String
    before: String
    first: Int
    last: Int
    page: Int

    # The slug or ID of the Partner
    partnerID: String!

    # The slug or ID of the Show
    showID: String!
    size: Int
  ): PartnerShowDocumentConnection
    @deprecated(reason: "Prefer `partner.documentsConnection`")

  # Phone number information
  phoneNumber(phoneNumber: String!, regionCode: String): PhoneNumberType

  # A previewed saved search
  previewSavedSearch(
    attributes: PreviewSavedSearchAttributes
  ): PreviewSavedSearch

  # A Profile
  profile(
    # The slug or ID of the Profile
    id: String!
  ): Profile

  # A list of Profiles
  profilesConnection(
    after: String
    before: String
    first: Int
    ids: [String]
    last: Int

    # If present, will search by term
    term: String
  ): ProfileConnection

  # Static set of recently sold artworks for the SWA landing page
  recentlySoldArtworks(
    after: String
    before: String
    first: Int
    last: Int
  ): RecentlySoldArtworkTypeConnection

  # A requested location
  requestLocation(ip: String): RequestLocation

  # Search for matching artworks by image
  reverseImageSearch(
    # Image file
    image: Upload!
  ): ReverseImageSearchResults

  # A Sale
  sale(
    # The slug or ID of the Sale
    id: String!
  ): Sale

  # A Sale Artwork
  saleArtwork(
    # The slug or ID of the SaleArtwork
    id: String!
  ): SaleArtwork

  # Sale Artworks search results
  saleArtworksConnection(
    after: String

    # Please make sure to supply the TOTAL aggregation if you will be setting any aggregations
    aggregations: [SaleArtworkAggregation]
    artistIDs: [String]
    before: String
    biddableSale: Boolean
    estimateRange: String
    excludeClosedLots: Boolean
    first: Int
    geneIDs: [String]

    # When called under the Me field, this defaults to true. Otherwise it defaults to false
    includeArtworksByFollowedArtists: Boolean
    isAuction: Boolean
    last: Int
    liveSale: Boolean
    marketable: Boolean
    page: Int
    saleID: ID

    # Same as saleID argument, but matches the argument type of `sale(id: 'foo')` root field
    saleSlug: String
    size: Int
    sort: String
    userId: String
  ): SaleArtworksConnection

  # A list of Sales
  salesConnection(
    after: String
    auctionState: AuctionState
    before: String
    first: Int

    #
    #         Only return sales matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]

    # Limit by auction.
    isAuction: Boolean = true
    last: Int

    # Limit by live status.
    live: Boolean = true

    # Limit by published status.
    published: Boolean = true

    # Returns sales the user has registered for if true, returns sales the user has not registered for if false.
    registered: Boolean
    sort: SaleSorts

    # If present, will search by term
    term: String
  ): SaleConnection

  # Global search
  searchConnection(
    after: String
    aggregations: [SearchAggregation]
    before: String

    # Entities to include in search. Default: [ARTIST, ARTWORK].
    entities: [SearchEntity]
    first: Int
    last: Int

    # Mode of search to execute. Default: SITE.
    mode: SearchMode

    # If present, will be used for pagination instead of cursors.
    page: Int

    # Search query to perform. Required.
    query: String!
  ): SearchableConnection
  shortcut(id: ID!): Shortcut

  # A Show
  show(
    # The slug or ID of the Show
    id: String!
  ): Show

  # A list of Shows
  showsConnection(
    after: String
    atAFair: Boolean
    before: String
    displayable: Boolean = true
    first: Int
    hasLocation: Boolean
    ids: [String]
    last: Int
    sort: ShowSorts
    status: EventStatus

    # If present, will search by term
    term: String
  ): ShowConnection

  # Content for a specific page or view
  staticContent(
    # The slug or id for the view
    id: String!
  ): StaticContent

  # Fields related to internal systems.
  system: System
  tag(
    # The slug or ID of the Tag
    id: String!
  ): Tag
  targetSupply: TargetSupply
  user(
    # Email to search for user by
    email: String

    # ID of the user
    id: String
  ): User

  # A list of Users
  usersConnection(
    after: String
    before: String
    first: Int
    ids: [String]
    last: Int

    # If present, will search by term, cannot be combined with `ids`
    term: String
  ): UserConnection

  # A Partner or Fair
  vanityURLEntity(
    # The slug or ID of the Profile to get a partner or fair for
    id: String!
  ): VanityURLEntityType

  # Verify a given address.
  verifyAddress(input: VerifyAddressInput!): VerifyAddressPayload
}

enum Visibility {
  DRAFT
  LISTED
  UNLISTED
}

type WireTransfer {
  isManualPayment: Boolean!
}

type YearRange {
  # The last year of the year range
  endAt: Int

  # The first year of the year range
  startAt: Int
}
