patch-package
--- a/node_modules/graphql-tools/dist/stitching/resolvers.js
+++ b/node_modules/graphql-tools/dist/stitching/resolvers.js
@@ -51,7 +51,9 @@ function createProxyingResolver(schema, operation, fieldName, transforms) {
         schema: schema,
         operation: operation,
         fieldName: fieldName,
-        args: {},
+        // It is unclear if passing on `args` here is without downsides or this
+        // _has_ to be `{}`.
+        args: args,
         context: context,
         info: info,
         transforms: transforms,
--- a/node_modules/graphql-tools/dist/stitching/schemaRecreation.js
+++ b/node_modules/graphql-tools/dist/stitching/schemaRecreation.js
@@ -62,7 +62,9 @@ function recreateType(type, resolveType, keepResolvers) {
         var newValues_1 = {};
         values.forEach(function (value) {
             newValues_1[value.name] = {
-                value: value.value,
+                // Simply pass-through the name of the enum entry such that the enum type in the original schema will
+                // receive that and will be able to do its work as if it were never proxied.
+                value: value.name,
                 deprecationReason: value.deprecationReason,
                 description: value.description,
                 astNode: value.astNode,
--- a/node_modules/graphql-tools/dist/transforms/FilterTypes.js
+++ b/node_modules/graphql-tools/dist/transforms/FilterTypes.js
@@ -1,6 +1,8 @@
 /* tslint:disable:no-unused-expression */
 Object.defineProperty(exports, "__esModule", { value: true });
 var visitSchema_1 = require("../transforms/visitSchema");
+var graphql_1 = require("graphql");
+var schemaRecreation_1 = require("../stitching/schemaRecreation");
 var FilterTypes = /** @class */ (function () {
     function FilterTypes(filter) {
         this.filter = filter;
@@ -8,15 +10,43 @@ var FilterTypes = /** @class */ (function () {
     FilterTypes.prototype.transformSchema = function (schema) {
         var _this = this;
         var _a;
+        var filteredTypes = [];
+        var resolveType = schemaRecreation_1.createResolveType((_name, type) => type);
         return visitSchema_1.visitSchema(schema, (_a = {},
             _a[visitSchema_1.VisitSchemaKind.TYPE] = function (type) {
                 if (_this.filter(type)) {
-                    return undefined;
+                  return undefined;
                 }
                 else {
+                  filteredTypes.push(type);
                     return null;
                 }
             },
+            _a[visitSchema_1.VisitSchemaKind.UNION_TYPE] = function (type) {
+              const memberTypes = type.getTypes();
+              const filteredMemberTypes = filteredTypes.filter(t => memberTypes.includes(t));
+              if (filteredMemberTypes.length > 0) {
+                const remainingMemberTypes = memberTypes.filter(t => !filteredMemberTypes.includes(t));
+                if (remainingMemberTypes.length === 0) {
+                  // Remove the union entirely if it has no members anymore
+                  return null;
+                } else {
+                  // Return a new union with the remaining members
+                  return new graphql_1.GraphQLUnionType({
+                    name: type.name,
+                    description: type.description,
+                    astNode: type.astNode,
+                    types: remainingMemberTypes.map(function (memberType) {
+                      return resolveType(memberType);
+                    }),
+                    resolveType: type.resolveType
+                  });
+                }
+              }
+              else {
+                  return undefined;
+              }
+            },
             _a));
     };
     return FilterTypes;
--- a/node_modules/graphql-tools/dist/transforms/visitSchema.js
+++ b/node_modules/graphql-tools/dist/transforms/visitSchema.js
@@ -29,7 +29,35 @@ function visitSchema(schema, visitor, stripResolvers) {
     var mutationType = schema.getMutationType();
     var subscriptionType = schema.getSubscriptionType();
     var typeMap = schema.getTypeMap();
-    Object.keys(typeMap).map(function (typeName) {
+    var directives = [];
+    schema.getDirectives().forEach(directive => {
+        directives.push(directive)
+    })
+
+    // Move interfaces to the front of the list, as the call-site may need to
+    // transform both interface and object types and thus need to be able to
+    // refer to the transformed interface types when creating the transformed
+    // object types.
+    //
+    // Move union types to the end of the list, as we may need to adjust the
+    // members list based on types previously filtered from the schema.
+    var typeKeys = Object.keys(typeMap).sort(function (typeNameA, typeNameB) {
+      const typeA = typeMap[typeNameA];
+      const typeB = typeMap[typeNameB];
+      if (typeA instanceof graphql_1.GraphQLInterfaceType) {
+        return -1;
+      } else if (typeB instanceof graphql_1.GraphQLInterfaceType) {
+        return 1;
+      }
+      if (typeA instanceof graphql_1.GraphQLUnionType) {
+        return 1;
+      } else if (typeB instanceof graphql_1.GraphQLUnionType) {
+        return -1;
+      }
+      return 0;
+    });
+
+    typeKeys.map(function (typeName) {
         var type = typeMap[typeName];
         if (graphql_1.isNamedType(type) && graphql_1.getNamedType(type).name.slice(0, 2) !== '__') {
             var specifiers = getTypeSpecifiers(type, schema);
@@ -60,6 +88,7 @@ function visitSchema(schema, visitor, stripResolvers) {
             ? types[subscriptionType.name]
             : null,
         types: Object.keys(types).map(function (name) { return types[name]; }),
+        directives: directives.map((directive) => schemaRecreation_1.recreateDirective(directive, resolveType))
     });
 }
 exports.visitSchema = visitSchema;
