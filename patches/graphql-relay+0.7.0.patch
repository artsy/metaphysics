diff --git a/node_modules/graphql-relay/connection/arrayConnection.d.ts b/node_modules/graphql-relay/connection/arrayConnection.d.ts
index 5abd394..6b06c92 100644
--- a/node_modules/graphql-relay/connection/arrayConnection.d.ts
+++ b/node_modules/graphql-relay/connection/arrayConnection.d.ts
@@ -8,6 +8,8 @@ import type {
 export interface ArraySliceMetaInfo {
   sliceStart: number;
   arrayLength: number;
+  useValueAsEdge?: boolean;
+  resolveNode?: GraphQLFieldResolver<any, any> | null;
 }
 
 /**
diff --git a/node_modules/graphql-relay/connection/arrayConnection.js b/node_modules/graphql-relay/connection/arrayConnection.js
index 5a42ae5..bec0ba9 100644
--- a/node_modules/graphql-relay/connection/arrayConnection.js
+++ b/node_modules/graphql-relay/connection/arrayConnection.js
@@ -80,10 +80,22 @@ function connectionFromArraySlice(arraySlice, args, meta) {
 
 
   const slice = arraySlice.slice(Math.max(startOffset - sliceStart, 0), arraySlice.length - (sliceEnd - endOffset));
-  const edges = slice.map((value, index) => ({
-    cursor: offsetToCursor(startOffset + index),
-    node: value
-  }));
+  const edges = slice.map((value, index) => {
+    const newEdge = meta.useValueAsEdge ? {
+        ...value,
+        cursor: offsetToCursor(startOffset + index),
+      }:
+      {
+        cursor: offsetToCursor(startOffset + index),
+        node: !!meta.resolveNode ? meta.resolveNode(value) : value,
+      };
+
+    if (meta.resolveNode) {
+      return { ...value, ...newEdge };
+    }
+    
+    return newEdge;
+  });
   const firstEdge = edges[0];
   const lastEdge = edges[edges.length - 1];
   const lowerBound = after != null ? afterOffset + 1 : 0;
diff --git a/node_modules/graphql-relay/connection/connection.d.ts b/node_modules/graphql-relay/connection/connection.d.ts
index b6a0e45..bcc32f6 100644
--- a/node_modules/graphql-relay/connection/connection.d.ts
+++ b/node_modules/graphql-relay/connection/connection.d.ts
@@ -64,7 +64,10 @@ export interface ConnectionConfig {
   resolveNode?: GraphQLFieldResolver<any, any>;
   resolveCursor?: GraphQLFieldResolver<any, any>;
   edgeFields?: Thunk<GraphQLFieldConfigMap<any, any>>;
+  edgeType?: GraphQLNamedType | GraphQLNonNull<GraphQLNamedType>;
+  edgeInterfaces?: GraphQLInterfaceType[];
   connectionFields?: Thunk<GraphQLFieldConfigMap<any, any>>;
+  connectionInterfaces?: GraphQLInterfaceType[];
 }
 
 export interface GraphQLConnectionDefinitions {
@@ -72,6 +75,8 @@ export interface GraphQLConnectionDefinitions {
   connectionType: GraphQLObjectType;
 }
 
+export const PageInfoType: GraphQLObjectType<any, any>
+
 /**
  * Returns a GraphQLObjectType for a connection with the given name,
  * and whose nodes are of the specified type.
diff --git a/node_modules/graphql-relay/connection/connection.js b/node_modules/graphql-relay/connection/connection.js
index 23c916f..081f3b3 100644
--- a/node_modules/graphql-relay/connection/connection.js
+++ b/node_modules/graphql-relay/connection/connection.js
@@ -4,7 +4,7 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.connectionDefinitions = connectionDefinitions;
-exports.connectionArgs = exports.backwardConnectionArgs = exports.forwardConnectionArgs = void 0;
+exports.connectionArgs = exports.backwardConnectionArgs = exports.forwardConnectionArgs = exports.PageInfoType =  void 0;
 
 var _graphql = require("graphql");
 
@@ -70,9 +70,10 @@ function connectionDefinitions(config) {
     nodeType
   } = config;
   const name = (_config$name = config.name) !== null && _config$name !== void 0 ? _config$name : (0, _graphql.getNamedType)(nodeType).name;
-  const edgeType = new _graphql.GraphQLObjectType({
+  const edgeType = config.edgeType || new _graphql.GraphQLObjectType({
     name: name + 'Edge',
     description: 'An edge in a connection.',
+    interfaces: config.edgeInterfaces,
     fields: () => {
       var _config$edgeFields;
 
@@ -94,6 +95,7 @@ function connectionDefinitions(config) {
   const connectionType = new _graphql.GraphQLObjectType({
     name: name + 'Connection',
     description: 'A connection to a list of items.',
+    interfaces: config.connectionInterfaces,
     fields: () => {
       var _config$connectionFie;
 
@@ -123,7 +125,7 @@ function connectionDefinitions(config) {
 /**
  * The common page info type used by all connections.
  */
-const pageInfoType = new _graphql.GraphQLObjectType({
+const pageInfoType = exports.PageInfoType = new _graphql.GraphQLObjectType({
   name: 'PageInfo',
   description: 'Information about pagination in a connection.',
   fields: () => ({
diff --git a/node_modules/graphql-relay/index.js b/node_modules/graphql-relay/index.js
index 670c089..77a49e6 100644
--- a/node_modules/graphql-relay/index.js
+++ b/node_modules/graphql-relay/index.js
@@ -27,6 +27,12 @@ Object.defineProperty(exports, "forwardConnectionArgs", {
     return _connection.forwardConnectionArgs;
   }
 });
+Object.defineProperty(exports, 'PageInfoType', {
+  enumerable: true,
+  get: function get() {
+    return _connection.PageInfoType;
+  }
+});
 Object.defineProperty(exports, "connectionFromArray", {
   enumerable: true,
   get: function () {
diff --git a/node_modules/graphql-relay/mutation/mutation.d.ts b/node_modules/graphql-relay/mutation/mutation.d.ts
index c4915e0..294213e 100644
--- a/node_modules/graphql-relay/mutation/mutation.d.ts
+++ b/node_modules/graphql-relay/mutation/mutation.d.ts
@@ -8,11 +8,11 @@ import type {
 } from 'graphql';
 
 // TS_SPECIFIC: This type is only exported by TypeScript
-export type MutationFn = (
-  object: any,
-  ctx: any,
+export type mutationFn<TInput, TOutput, TContext> = (
+  object: TInput,
+  ctx: TContext,
   info: GraphQLResolveInfo,
-) => Promise<any> | any;
+) => Promise<TOutput> | TOutput;
 
 // TS_SPECIFIC: This type is only exported by TypeScript
 /**
@@ -29,20 +29,20 @@ export type MutationFn = (
  * input field, and it should return an Object with a key for each
  * output field. It may return synchronously, or return a Promise.
  */
-export interface MutationConfig {
+export interface MutationConfig<TInput, TOutput, TContext> {
   name: string;
   description?: string;
   deprecationReason?: string;
   extensions?: GraphQLFieldExtensions<any, any>;
   inputFields: Thunk<GraphQLInputFieldConfigMap>;
-  outputFields: Thunk<GraphQLFieldConfigMap<any, any>>;
-  mutateAndGetPayload: MutationFn;
+  outputFields: Thunk<GraphQLFieldConfigMap<TOutput, TContext>>;
+  mutateAndGetPayload: mutationFn<TInput, TOutput, TContext>;
 }
 
 /**
  * Returns a GraphQLFieldConfig for the mutation described by the
  * provided MutationConfig.
  */
-export function mutationWithClientMutationId(
-  config: MutationConfig,
+export function mutationWithClientMutationId<TInput, TOutput, TContext>(
+  config: MutationConfig<TInput, TOutput, TContext>
 ): GraphQLFieldConfig<any, any>;
