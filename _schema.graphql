directive @principalField on FIELD

input AddInitialOfferToOrderInput {
  clientMutationId: String

  # Offer note
  note: String

  # Offer price
  offerPrice: MoneyInput

  # ID of order
  orderId: ID!
}

type AddInitialOfferToOrderPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

# One item in an aggregation
type AggregationCount {
  # A globally unique ID.
  __id: ID!
  count: Int

  # A type-specific ID.
  id: ID!
  name: String
  sortable_id: String
}

input ApproveOrderInput {
  clientMutationId: String

  # Order ID
  orderId: String!
}

type ApproveOrderPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

type Article implements Node {
  # A globally unique ID.
  __id: ID!
  author: Author
  cached: Int
  channel_id: String
  contributing_authors: [Author]
  href: String

  # A type-specific ID.
  id: ID!
  published_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  slug: String
  thumbnail_image: Image
  thumbnail_teaser: String
  thumbnail_title: String
  tier: Int
  title: String
  updated_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

# A connection to a list of items.
type ArticleConnection {
  # A list of edges.
  edges: [ArticleEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type ArticleEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Article
}

enum ArticleSorts {
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
}

type Artist implements Node & Searchable {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  alternate_names: [String]
  articles(
    in_editorial_feed: Boolean
    limit: Int
    sort: ArticleSorts
  ): [Article]
  articlesConnection(
    after: String
    before: String
    first: Int
    in_editorial_feed: Boolean
    last: Int
    limit: Int
    sort: ArticleSorts
  ): ArticleConnection
  artists(
    exclude_artists_without_artworks: Boolean = true

    # The number of Artists to return
    size: Int
  ): [Artist]
  artworks(
    exclude: [String]
    filter: [ArtistArtworksFilters]
    page: Int
    published: Boolean = true

    # The number of Artworks to return
    size: Int
    sort: ArtworkSorts
  ): [Artwork]
  artworks_connection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response.
    exclude: [String]
    filter: [ArtistArtworksFilters]
    first: Int
    last: Int
    published: Boolean = true
    sort: ArtworkSorts
  ): ArtworkConnection
  auctionResults(
    after: String
    before: String
    first: Int
    last: Int

    # When true, will only return records for allowed artists.
    recordsTrusted: Boolean = false
    sort: AuctionResultSorts
  ): AuctionResultConnection
  bio: String

  # The Artist biography article written by Artsy
  biography: Article
  biography_blurb(
    format: Format

    # If true, will return featured bio over Artsy one.
    partner_bio: Boolean = false
  ): ArtistBlurb
  birthday: String
  blurb(format: Format): String
  cached: Int
  carousel: ArtistCarousel
  collections: [String]
  consignable: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")
  contemporary(
    exclude_artists_without_artworks: Boolean = true

    # The number of Artists to return
    size: Int
  ): [Artist]
  counts: ArtistCounts
  currentEvent: CurrentEvent
  deathday: String
  disablePriceContext: Boolean
  display_auction_link: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")
  displayLabel: String

  # Custom-sorted list of shows for an artist, in order of significance.
  exhibition_highlights(
    # The number of Shows to return
    size: Int = 5
  ): [Show]

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks

  # A string showing the total number of works and those for sale
  formatted_artworks_count: String

  # A string of the form "Nationality, Birthday (or Birthday-Deathday)"
  formatted_nationality_and_birthday: String
  gender: String

  # A list of genes associated with an artist
  genes: [Gene]
  has_metadata: Boolean
  highlights: ArtistHighlights
  hometown: String
  href: String

  # A slug ID.
  id: ID!
  image: Image
  imageUrl: String
  initials(length: Int = 3): String
  insights: [ArtistInsight]
  is_consignable: Boolean

  # Only specific Artists should show a link to auction results.
  is_display_auction_link: Boolean
  is_followed: Boolean
  is_public: Boolean
  is_shareable: Boolean
  location: String
  meta: ArtistMeta
  name: String
  nationality: String
  partner_artists(
    # The number of PartnerArtists to return
    size: Int
  ): [PartnerArtist]
  partner_shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    # The number of PartnerShows to return
    size: Int
    solo_show: Boolean
    sort: PartnerShowSorts
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
  ): [PartnerShow]
    @deprecated(reason: "Prefer to use `shows`. [Will be removed in v2]")
  partners(
    after: String
    before: String
    first: Int
    last: Int
    partner_category: [String]
    represented_by: Boolean
  ): PartnerArtistConnection
  public: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")
  related: ArtistRelatedData
  sales(
    is_auction: Boolean
    live: Boolean

    # The number of Sales to return
    size: Int
    sort: SaleSorts
  ): [Sale]
  shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    # The number of PartnerShows to return
    size: Int
    solo_show: Boolean
    sort: PartnerShowSorts
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
  ): [Show]
  showsConnection(
    active: Boolean
    after: String
    at_a_fair: Boolean
    before: String
    first: Int
    is_reference: Boolean
    last: Int

    # The number of PartnerShows to return
    size: Int
    solo_show: Boolean
    sort: PartnerShowSorts
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
  ): ShowConnection

  # Use this attribute to sort by when sorting a collection of Artists
  sortable_id: String
  statuses: ArtistStatuses
  years: String
}

type ArtistArtworkGrid implements ArtworkContextGrid {
  artworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

enum ArtistArtworksFilters {
  IS_FOR_SALE
  IS_NOT_FOR_SALE
}

type ArtistBlurb {
  credit: String

  # The partner id of the partner who submitted the featured bio.
  partner_id: String
  text: String
}

type ArtistCarousel {
  images: [Image]
}

# A connection to a list of items.
type ArtistConnection {
  # A list of edges.
  edges: [ArtistEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtistCounts {
  articles: Int
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  auction_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  ecommerce_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  follows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  for_sale_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  has_make_offer_artworks: Boolean
  partner_shows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  related_artists: Int
}

# An edge in a connection.
type ArtistEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artist
}

type ArtistGroup {
  # Artists sorted by last name
  items: [Artist]

  # Letter artists group belongs to
  letter: String
}

type ArtistHighlights {
  partners(
    after: String
    before: String
    display_on_partner_profile: Boolean
    first: Int
    last: Int
    partner_category: [String]
    represented_by: Boolean
  ): PartnerArtistConnection
}

type ArtistInsight {
  # List of entities relevant to the insight.
  entities: [String]

  # Label to use when displaying the insight.
  label: String

  # The type of insight.
  type: String
}

type ArtistItem implements Node & Searchable {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  alternate_names: [String]
  articles(
    in_editorial_feed: Boolean
    limit: Int
    sort: ArticleSorts
  ): [Article]
  articlesConnection(
    after: String
    before: String
    first: Int
    in_editorial_feed: Boolean
    last: Int
    limit: Int
    sort: ArticleSorts
  ): ArticleConnection
  artists(
    exclude_artists_without_artworks: Boolean = true

    # The number of Artists to return
    size: Int
  ): [Artist]
  artworks(
    exclude: [String]
    filter: [ArtistArtworksFilters]
    page: Int
    published: Boolean = true

    # The number of Artworks to return
    size: Int
    sort: ArtworkSorts
  ): [Artwork]
  artworks_connection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response.
    exclude: [String]
    filter: [ArtistArtworksFilters]
    first: Int
    last: Int
    published: Boolean = true
    sort: ArtworkSorts
  ): ArtworkConnection
  auctionResults(
    after: String
    before: String
    first: Int
    last: Int

    # When true, will only return records for allowed artists.
    recordsTrusted: Boolean = false
    sort: AuctionResultSorts
  ): AuctionResultConnection
  bio: String

  # The Artist biography article written by Artsy
  biography: Article
  biography_blurb(
    format: Format

    # If true, will return featured bio over Artsy one.
    partner_bio: Boolean = false
  ): ArtistBlurb
  birthday: String
  blurb(format: Format): String
  cached: Int
  carousel: ArtistCarousel
  collections: [String]
  consignable: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")
  contemporary(
    exclude_artists_without_artworks: Boolean = true

    # The number of Artists to return
    size: Int
  ): [Artist]
  counts: ArtistCounts
  currentEvent: CurrentEvent
  deathday: String
  disablePriceContext: Boolean
  display_auction_link: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")
  displayLabel: String

  # Custom-sorted list of shows for an artist, in order of significance.
  exhibition_highlights(
    # The number of Shows to return
    size: Int = 5
  ): [Show]

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks

  # A string showing the total number of works and those for sale
  formatted_artworks_count: String

  # A string of the form "Nationality, Birthday (or Birthday-Deathday)"
  formatted_nationality_and_birthday: String
  gender: String

  # A list of genes associated with an artist
  genes: [Gene]
  has_metadata: Boolean
  highlights: ArtistHighlights
  hometown: String
  href: String

  # A slug ID.
  id: ID!
  image: Image
  imageUrl: String
  initials(length: Int = 3): String
  insights: [ArtistInsight]
  is_consignable: Boolean

  # Only specific Artists should show a link to auction results.
  is_display_auction_link: Boolean
  is_followed: Boolean
  is_public: Boolean
  is_shareable: Boolean
  location: String
  meta: ArtistMeta
  name: String
  nationality: String
  partner_artists(
    # The number of PartnerArtists to return
    size: Int
  ): [PartnerArtist]
  partner_shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    # The number of PartnerShows to return
    size: Int
    solo_show: Boolean
    sort: PartnerShowSorts
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
  ): [PartnerShow]
    @deprecated(reason: "Prefer to use `shows`. [Will be removed in v2]")
  partners(
    after: String
    before: String
    first: Int
    last: Int
    partner_category: [String]
    represented_by: Boolean
  ): PartnerArtistConnection
  public: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")
  related: ArtistRelatedData
  sales(
    is_auction: Boolean
    live: Boolean

    # The number of Sales to return
    size: Int
    sort: SaleSorts
  ): [Sale]
  shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    # The number of PartnerShows to return
    size: Int
    solo_show: Boolean
    sort: PartnerShowSorts
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
  ): [Show]
  showsConnection(
    active: Boolean
    after: String
    at_a_fair: Boolean
    before: String
    first: Int
    is_reference: Boolean
    last: Int

    # The number of PartnerShows to return
    size: Int
    solo_show: Boolean
    sort: PartnerShowSorts
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
  ): ShowConnection

  # Use this attribute to sort by when sorting a collection of Artists
  sortable_id: String
  statuses: ArtistStatuses
  years: String
}

type ArtistMeta {
  description: String
  title: String
}

type ArtistRelatedData {
  artists(
    after: String
    before: String
    exclude_artists_without_artworks: Boolean = true
    first: Int
    kind: RelatedArtistsKind
    last: Int
    min_forsale_artworks: Int
  ): ArtistConnection
  genes(after: String, before: String, first: Int, last: Int): GeneConnection

  # A list of the current user’s suggested artists, based on a single artist
  suggested(
    after: String

    # The slug or ID of an artist
    artist_id: String
    before: String

    # Exclude these ids from results, may result in all artists being excluded.
    exclude_artist_ids: [String]

    # Exclude artists without any artworks
    exclude_artists_without_artworks: Boolean

    # Exclude artists without for sale works
    exclude_artists_without_forsale_artworks: Boolean

    # Exclude artists the user already follows
    exclude_followed_artists: Boolean
    first: Int
    last: Int

    # Pagination, need I say more?
    page: Int

    # Amount of artists to return
    size: Int
  ): ArtistConnection
}

enum ArtistSorts {
  sortable_id_asc
    @deprecated(
      reason: "Prefer to use `SORTABLE_ID_ASC`. [Will be removed in v2]"
    )
  SORTABLE_ID_ASC
  sortable_id_desc
    @deprecated(
      reason: "Prefer to use `SORTABLE_ID_DESC`. [Will be removed in v2]"
    )
  SORTABLE_ID_DESC
  trending_desc
    @deprecated(
      reason: "Prefer to use `TRENDING_DESC`. [Will be removed in v2]"
    )
  TRENDING_DESC
}

type ArtistStatuses {
  articles: Boolean
  artists: Boolean
  artworks: Boolean
  auction_lots: Boolean
  biography: Boolean
  contemporary: Boolean
  cv(
    # Suppress the cv tab when artist show count is less than this.
    minShowCount: Int = 15
  ): Boolean
  shows: Boolean
}

type Artwork implements Node & Searchable & Sellable {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  additional_information(format: Format): String
  articles(size: Int): [Article]
  artist(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): Artist
  artist_names: String
  artists(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): [Artist]

  # Represents the "**classification**" of an artwork, such as _limited edition_
  attribution_class: AttributionClass
  availability: String
  cached: Int
  can_share_image: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")

  # Represents the "**medium type**", such as _Painting_. (This field is also
  # commonly referred to as just "medium", but should not be confused with the
  # artwork attribute called `medium`.)
  category: String

  # Returns the display label and detail for artwork certificate of authenticity
  certificateOfAuthenticity: ArtworkInfoRow
  collecting_institution: String
  conditionDescription: ArtworkInfoRow
  contact_label: String

  # Pre-filled inquiry text
  contact_message: String

  # Returns the associated Fair/Sale/PartnerShow
  context: ArtworkContext
  contextGrids: [ArtworkContextGrid]
  cultural_maker: String
  date: String
  description(format: Format): String
  dimensions: dimensions
  displayLabel: String
  edition_of: String
  edition_sets(sort: EditionSetSorts): [EditionSet]

  # Returns an HTML string representing the embedded content (video)
  embed(autoplay: Boolean = false, height: Int = 450, width: Int = 853): String
  exhibition_history(format: Format): String
  fair: Fair

  # Formatted artwork metadata, including artist, title, date and partner; e.g., 'Andy Warhol, Truck, 1980, Westward Gallery'.
  formattedMetadata: String
  framed: ArtworkInfoRow

  # Returns true when artwork has a certificate of authenticity
  hasCertificateOfAuthenticity: Boolean
  height: String
    @deprecated(reason: "Prefer to use `dimensions`. [Will be removed in v2]")

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  heightCm: Float

  # Returns the highlighted shows and articles
  highlights: [Highlighted]
  href: String

  # A slug ID.
  id: ID!
  image: Image
  image_rights: String
  image_title: String
  images(size: Int): [Image]
  imageUrl: String

  # Private text field for partner use
  inventoryId: String

  # Whether a work can be purchased through e-commerce
  is_acquireable: Boolean

  # Is this artwork part of an auction that is currently running?
  is_biddable: Boolean

  # When in an auction, can the work be bought immediately
  is_buy_nowable: Boolean
  is_comparable_with_auction_results: Boolean

  # Are we able to display a contact form on artwork pages?
  is_contactable: Boolean
    @deprecated(
      reason: "Prefer to use `is_inquireable`. [Will be removed in v2]"
    )
  is_downloadable: Boolean
  is_ecommerce: Boolean
    @deprecated(
      reason: "Should not be used to determine anything UI-level. [Will be removed in v2]"
    )
  is_embeddable_video: Boolean
  is_for_sale: Boolean
  is_hangable: Boolean

  # Is this artwork part of an auction?
  is_in_auction: Boolean

  # Is this artwork part of a current show
  is_in_show: Boolean

  # Do we want to encourage inquiries on this work?
  is_inquireable: Boolean
  is_not_for_sale: String

  # Whether a user can make an offer on a work
  is_offerable: Boolean
  is_on_hold: String
  is_price_hidden: Boolean
  is_price_range: Boolean
  is_purchasable: Boolean
    @deprecated(
      reason: "Purchase requests are not supported. Replaced by buy now. [Will be removed in v2]"
    )
  is_saved: Boolean
  is_shareable: Boolean
  is_sold: Boolean
  is_unique: Boolean
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
  listPrice: ListPrice
  literature(format: Format): String
  manufacturer(format: Format): String

  # Represents the **materials** used in this work, such as _oil and acrylic on
  # canvas_. (This should not be confused with the artwork attribute called
  # `category`, which is commonly referred to as "medium" or "medium type")
  medium: String
  meta: ArtworkMeta
  metric: String
    @deprecated(reason: "Prefer to use `dimensions`. [Will be removed in v2]")
  myLotStanding(live: Boolean = null): [LotStanding!]

  # Is this work only available for shipping domestically?
  onlyShipsDomestically: Boolean

  # [DO NOT USE] Weekly pageview data (static).
  pageviews: Int
    @deprecated(
      reason: "This is for an AB test and will be imminently deprecated. [Will be removed in v2]"
    )
  partner(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): Partner
  pickup_available: Boolean
  price: String
    @deprecated(reason: "Prefer to use `listPrice`. [Will be removed in v2]")
  price_currency: String
  priceCents: PriceCents
    @deprecated(reason: "Prefer to use `listPrice`. [Will be removed in v2]")
  priceIncludesTax: Boolean
  priceIncludesTaxDisplay: String
  provenance(format: Format): String

  # Whether this Artwork is Published of not
  published: Boolean!
  publisher(format: Format): String
  related(size: Int): [Artwork]
  sale: Sale
  sale_artwork(sale_id: String = null): SaleArtwork
  sale_message: String
  series(format: Format): String

  # The country an artwork will be shipped from.
  shippingCountry: String

  # The string that describes domestic and international shipping.
  shippingInfo: String

  # Minimal location information describing from where artwork will be shipped.
  shippingOrigin: String

  # Is this work available for shipping only within the Contenental US?
  shipsToContinentalUSOnly: Boolean
    @deprecated(
      reason: "Prefer to use `onlyShipsDomestically`. [Will be removed in v2]"
    )
  show(
    active: Boolean
    at_a_fair: Boolean
    size: Int
    sort: PartnerShowSorts
  ): PartnerShow
  shows(
    active: Boolean
    at_a_fair: Boolean
    size: Int
    sort: PartnerShowSorts
  ): [PartnerShow]
  signature(format: Format): String
  signatureInfo: ArtworkInfoRow

  # score assigned to an artwork based on its dimensions
  sizeScore: Float
  title: String

  # Formatted artwork metadata, including artist, title, date and partner; e.g., 'Andy Warhol, Truck, 1980, Westward Gallery'.
  to_s: String
    @deprecated(
      reason: "Prefer to use `formattedMetadata`. [Will be removed in v2]"
    )
  v2_shows(
    active: Boolean
    at_a_fair: Boolean
    size: Int
    sort: ShowSort
  ): [Show]

  # If the category is video, then it returns the href for the (youtube/vimeo) video, otherwise returns the website from CMS
  website: String
  width: String
    @deprecated(reason: "Prefer to use `dimensions`. [Will be removed in v2]")

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  widthCm: Float
}

enum ArtworkAggregation {
  COLOR
  DIMENSION_RANGE
  FOLLOWED_ARTISTS
  GALLERY
  INSTITUTION
  MAJOR_PERIOD
  MEDIUM
  MERCHANDISABLE_ARTISTS
  PARTNER_CITY
  PERIOD
  PRICE_RANGE
  TOTAL
}

# A connection to a list of items.
type ArtworkConnection {
  # A list of edges.
  edges: [ArtworkEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

union ArtworkContext =
    ArtworkContextAuction
  | ArtworkContextFair
  | ArtworkContextPartnerShow
  | ArtworkContextSale

type ArtworkContextAuction implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artworks(
    all: Boolean = false

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    page: Int = 1
    size: Int = 25
  ): [Artwork]

  # Returns a connection of artworks for a sale.
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    last: Int
  ): ArtworkConnection
  associated_sale: Sale
  auction_state: String
    @deprecated(reason: "Prefer to use `status`. [Will be removed in v2]")

  # A bid increment policy that explains minimum bids in ranges.
  bid_increments: [BidIncrement]

  # Auction's buyer's premium policy.
  buyers_premium: [BuyersPremium]
  cached: Int
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of when the auction starts or ends or if it has ended
  formattedStartDateTime: String
  href: String

  # A slug ID.
  id: ID!
  initials(length: Int = 3): String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_benefit: Boolean
    @deprecated(reason: "Prefer to use `isBenefit`. [Will be removed in v2]")
  is_closed: Boolean
  is_live_open: Boolean
  is_open: Boolean
  is_preliminary: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  isBenefit: Boolean
  isGalleryAuction: Boolean
  live_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Returns a live auctions url if the sale is open and start time is after now
  live_url_if_open: String
  name: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A registration for this sale or null
  registrationStatus: Bidder
  require_bidder_approval: Boolean
  sale_artwork(id: String!): SaleArtwork
  sale_artworks(
    all: Boolean = false
    page: Int = 1
    size: Int = 25
  ): [SaleArtwork]
  sale_artworks_connection(
    after: String
    before: String
    first: Int

    # List of sale artwork IDs to fetch
    ids: [ID]
    last: Int
  ): SaleArtworkConnection
  sale_type: String
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  status: String
  symbol: String
  timeZone: String
}

type ArtworkContextFair {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  about: String
  active_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  artists(
    after: String
    before: String
    first: Int
    last: Int

    # Sorts for artists in a fair
    sort: FairArtistSorts
  ): ArtistConnection
  banner_size: String
  cached: Int
  counts: FairCounts
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of the start to end dates
  exhibition_period: String

  # The exhibitors with booths in this fair with letter.
  exhibitors_grouped_by_name: [FairExhibitorsGroup]

  # Artworks Elastic Search results
  filteredArtworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  followed_content: FollowedContent

  # A formatted description of when the fair starts or closes or if it is closed
  formattedOpeningHours: String
  has_full_feature: Boolean
  has_homepage_section: Boolean
  has_large_banner: Boolean
  has_listing: Boolean
  hours: String
  href: String

  # A slug ID.
  id: ID!
  image: Image
  is_active: Boolean
    @deprecated(reason: "Prefer to use `isActive`. [Will be removed in v2]")
  is_published: Boolean

  # Are we currently in the fair's active period?
  isActive: Boolean
  links: String
  location: Location
  mobile_image: Image
  name: String
  organizer: organizer
  profile: Profile
  published: Boolean
    @deprecated(reason: "Prefer to use `is_published`. [Will be removed in v2]")

  # This connection only supports forward pagination. We're replacing Relay's default cursor with one from Gravity.
  shows_connection(
    after: String
    before: String
    first: Int
    last: Int

    # Number of artworks to return
    section: String

    # Sorts for shows in a fair
    sort: ShowSort
  ): ShowConnection
  sponsoredContent: FairSponsoredContent
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  tagline: String
  ticketsLink: String
}

# A specific grid.
interface ArtworkContextGrid {
  artworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type ArtworkContextPartnerShow implements Node {
  # A globally unique ID.
  __id: ID!
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A type-specific ID likely used as a database ID.
  _id: ID!
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  artists: [Artist]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # The artworks featured in the show
  artworks(
    all: Boolean

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    for_sale: Boolean = false
    page: Int = 1
    published: Boolean = true

    # Number of artworks to return
    size: Int = 25
  ): [Artwork]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A connection of artworks featured in the show
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    for_sale: Boolean = false
    last: Int
    published: Boolean = true
  ): ArtworkConnection
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  cached: Int
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  counts: PartnerShowCounts
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  cover_image: Image
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  description: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  displayable: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  events: [PartnerShowEventType]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A formatted description of the start to end dates
  exhibition_period: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  fair: Fair
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # Flag showing if show has any location.
  has_location: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  href: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A slug ID.
  id: ID!
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  images(
    # Pass true/false to include cover or not
    default: Boolean
    page: Int

    # Number of images to return
    size: Int
  ): [Image]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  is_active: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  is_displayable: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  is_fair_booth: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  kind: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  location: Location
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  meta_image: Image
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # The exhibition title
  name: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  partner: Partner
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  press_release(format: Format): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  status: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A formatted update on upcoming status changes
  status_update(
    # Before this many days no update will be generated
    max_days: Int
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  type: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
}

type ArtworkContextSale implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artworks(
    all: Boolean = false

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    page: Int = 1
    size: Int = 25
  ): [Artwork]

  # Returns a connection of artworks for a sale.
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    last: Int
  ): ArtworkConnection
  associated_sale: Sale
  auction_state: String
    @deprecated(reason: "Prefer to use `status`. [Will be removed in v2]")

  # A bid increment policy that explains minimum bids in ranges.
  bid_increments: [BidIncrement]

  # Auction's buyer's premium policy.
  buyers_premium: [BuyersPremium]
  cached: Int
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of when the auction starts or ends or if it has ended
  formattedStartDateTime: String
  href: String

  # A slug ID.
  id: ID!
  initials(length: Int = 3): String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_benefit: Boolean
    @deprecated(reason: "Prefer to use `isBenefit`. [Will be removed in v2]")
  is_closed: Boolean
  is_live_open: Boolean
  is_open: Boolean
  is_preliminary: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  isBenefit: Boolean
  isGalleryAuction: Boolean
  live_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Returns a live auctions url if the sale is open and start time is after now
  live_url_if_open: String
  name: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A registration for this sale or null
  registrationStatus: Bidder
  require_bidder_approval: Boolean
  sale_artwork(id: String!): SaleArtwork
  sale_artworks(
    all: Boolean = false
    page: Int = 1
    size: Int = 25
  ): [SaleArtwork]
  sale_artworks_connection(
    after: String
    before: String
    first: Int

    # List of sale artwork IDs to fetch
    ids: [ID]
    last: Int
  ): SaleArtworkConnection
  sale_type: String
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  status: String
  symbol: String
  timeZone: String
}

# An edge in a connection.
type ArtworkEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artwork
}

union ArtworkFilterFacet = ArtworkFilterGene | ArtworkFilterTag

type ArtworkFilterGene implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  cached: Int
  count: Int
  description: String

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  href: String

  # A slug ID.
  id: ID!
  image: Image
  name: String
}

type ArtworkFilterTag implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  cached: Int
  count: Int
  description: String

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  href: String

  # A slug ID.
  id: ID!
  image: Image
  name: String
}

type ArtworkInfoRow {
  # Additional details about given attribute
  details: String

  # Label for information row
  label: String
}

# An inquiry on an Artwork
type ArtworkInquiry {
  # A globally unique ID.
  __id: ID!
  artwork: Artwork!

  # A type-specific ID likely used as a database ID.
  id: ID!
  impulse_conversation_id: String
}

# A connection to a list of items.
type ArtworkInquiryConnection {
  # A list of edges.
  edges: [ArtworkInquiryEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ArtworkInquiryEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: ArtworkInquiry
}

type ArtworkItem implements Node & Searchable & Sellable {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  additional_information(format: Format): String
  articles(size: Int): [Article]
  artist(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): Artist
  artist_names: String
  artists(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): [Artist]

  # Represents the "**classification**" of an artwork, such as _limited edition_
  attribution_class: AttributionClass
  availability: String
  cached: Int
  can_share_image: Boolean
    @deprecated(reason: "Prefer to use `is_*`. [Will be removed in v2]")

  # Represents the "**medium type**", such as _Painting_. (This field is also
  # commonly referred to as just "medium", but should not be confused with the
  # artwork attribute called `medium`.)
  category: String

  # Returns the display label and detail for artwork certificate of authenticity
  certificateOfAuthenticity: ArtworkInfoRow
  collecting_institution: String
  conditionDescription: ArtworkInfoRow
  contact_label: String

  # Pre-filled inquiry text
  contact_message: String

  # Returns the associated Fair/Sale/PartnerShow
  context: ArtworkContext
  contextGrids: [ArtworkContextGrid]
  cultural_maker: String
  date: String
  description(format: Format): String
  dimensions: dimensions
  displayLabel: String
  edition_of: String
  edition_sets(sort: EditionSetSorts): [EditionSet]

  # Returns an HTML string representing the embedded content (video)
  embed(autoplay: Boolean = false, height: Int = 450, width: Int = 853): String
  exhibition_history(format: Format): String
  fair: Fair

  # Formatted artwork metadata, including artist, title, date and partner; e.g., 'Andy Warhol, Truck, 1980, Westward Gallery'.
  formattedMetadata: String
  framed: ArtworkInfoRow

  # Returns true when artwork has a certificate of authenticity
  hasCertificateOfAuthenticity: Boolean
  height: String
    @deprecated(reason: "Prefer to use `dimensions`. [Will be removed in v2]")

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  heightCm: Float

  # Returns the highlighted shows and articles
  highlights: [Highlighted]
  href: String

  # A slug ID.
  id: ID!
  image: Image
  image_rights: String
  image_title: String
  images(size: Int): [Image]
  imageUrl: String

  # Private text field for partner use
  inventoryId: String

  # Whether a work can be purchased through e-commerce
  is_acquireable: Boolean

  # Is this artwork part of an auction that is currently running?
  is_biddable: Boolean

  # When in an auction, can the work be bought immediately
  is_buy_nowable: Boolean
  is_comparable_with_auction_results: Boolean

  # Are we able to display a contact form on artwork pages?
  is_contactable: Boolean
    @deprecated(
      reason: "Prefer to use `is_inquireable`. [Will be removed in v2]"
    )
  is_downloadable: Boolean
  is_ecommerce: Boolean
    @deprecated(
      reason: "Should not be used to determine anything UI-level. [Will be removed in v2]"
    )
  is_embeddable_video: Boolean
  is_for_sale: Boolean
  is_hangable: Boolean

  # Is this artwork part of an auction?
  is_in_auction: Boolean

  # Is this artwork part of a current show
  is_in_show: Boolean

  # Do we want to encourage inquiries on this work?
  is_inquireable: Boolean
  is_not_for_sale: String

  # Whether a user can make an offer on a work
  is_offerable: Boolean
  is_on_hold: String
  is_price_hidden: Boolean
  is_price_range: Boolean
  is_purchasable: Boolean
    @deprecated(
      reason: "Purchase requests are not supported. Replaced by buy now. [Will be removed in v2]"
    )
  is_saved: Boolean
  is_shareable: Boolean
  is_sold: Boolean
  is_unique: Boolean
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
  listPrice: ListPrice
  literature(format: Format): String
  manufacturer(format: Format): String

  # Represents the **materials** used in this work, such as _oil and acrylic on
  # canvas_. (This should not be confused with the artwork attribute called
  # `category`, which is commonly referred to as "medium" or "medium type")
  medium: String
  meta: ArtworkMeta
  metric: String
    @deprecated(reason: "Prefer to use `dimensions`. [Will be removed in v2]")
  myLotStanding(live: Boolean = null): [LotStanding!]

  # Is this work only available for shipping domestically?
  onlyShipsDomestically: Boolean

  # [DO NOT USE] Weekly pageview data (static).
  pageviews: Int
    @deprecated(
      reason: "This is for an AB test and will be imminently deprecated. [Will be removed in v2]"
    )
  partner(
    # Use whatever is in the original response instead of making a request
    shallow: Boolean
  ): Partner
  pickup_available: Boolean
  price: String
    @deprecated(reason: "Prefer to use `listPrice`. [Will be removed in v2]")
  price_currency: String
  priceCents: PriceCents
    @deprecated(reason: "Prefer to use `listPrice`. [Will be removed in v2]")
  priceIncludesTax: Boolean
  priceIncludesTaxDisplay: String
  provenance(format: Format): String

  # Whether this Artwork is Published of not
  published: Boolean!
  publisher(format: Format): String
  related(size: Int): [Artwork]
  sale: Sale
  sale_artwork(sale_id: String = null): SaleArtwork
  sale_message: String
  series(format: Format): String

  # The country an artwork will be shipped from.
  shippingCountry: String

  # The string that describes domestic and international shipping.
  shippingInfo: String

  # Minimal location information describing from where artwork will be shipped.
  shippingOrigin: String

  # Is this work available for shipping only within the Contenental US?
  shipsToContinentalUSOnly: Boolean
    @deprecated(
      reason: "Prefer to use `onlyShipsDomestically`. [Will be removed in v2]"
    )
  show(
    active: Boolean
    at_a_fair: Boolean
    size: Int
    sort: PartnerShowSorts
  ): PartnerShow
  shows(
    active: Boolean
    at_a_fair: Boolean
    size: Int
    sort: PartnerShowSorts
  ): [PartnerShow]
  signature(format: Format): String
  signatureInfo: ArtworkInfoRow

  # score assigned to an artwork based on its dimensions
  sizeScore: Float
  title: String

  # Formatted artwork metadata, including artist, title, date and partner; e.g., 'Andy Warhol, Truck, 1980, Westward Gallery'.
  to_s: String
    @deprecated(
      reason: "Prefer to use `formattedMetadata`. [Will be removed in v2]"
    )
  v2_shows(
    active: Boolean
    at_a_fair: Boolean
    size: Int
    sort: ShowSort
  ): [Show]

  # If the category is video, then it returns the href for the (youtube/vimeo) video, otherwise returns the website from CMS
  website: String
  width: String
    @deprecated(reason: "Prefer to use `dimensions`. [Will be removed in v2]")

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  widthCm: Float
}

type ArtworkLayer {
  # A globally unique ID.
  __id: ID!
  artworks: [Artwork]

  # A connection of artworks from a Layer.
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  description: String
  href: String

  # A type-specific ID.
  id: ID!
  name: String
  type: String
}

type ArtworkMeta {
  description(limit: Int = 155): String
  image: String
  share: String
  title: String
}

# The results for one of the requested aggregations
type ArtworksAggregationResults {
  counts: [AggregationCount]
  slice: ArtworkAggregation
}

enum ArtworkSorts {
  availability_desc
    @deprecated(
      reason: "Prefer to use `AVAILABILITY_DESC`. [Will be removed in v2]"
    )
  AVAILABILITY_DESC
  created_at_asc
    @deprecated(
      reason: "Prefer to use `CREATED_AT_ASC`. [Will be removed in v2]"
    )
  CREATED_AT_ASC
  created_at_desc
    @deprecated(
      reason: "Prefer to use `CREATED_AT_DESC`. [Will be removed in v2]"
    )
  CREATED_AT_DESC
  deleted_at_asc
    @deprecated(
      reason: "Prefer to use `DELETED_AT_ASC`. [Will be removed in v2]"
    )
  DELETED_AT_ASC
  deleted_at_desc
    @deprecated(
      reason: "Prefer to use `DELETED_AT_DESC`. [Will be removed in v2]"
    )
  DELETED_AT_DESC
  iconicity_desc
    @deprecated(
      reason: "Prefer to use `ICONICITY_DESC`. [Will be removed in v2]"
    )
  ICONICITY_DESC
  merchandisability_desc
    @deprecated(
      reason: "Prefer to use `MERCHANDISABILITY_DESC`. [Will be removed in v2]"
    )
  MERCHANDISABILITY_DESC
  partner_updated_at_desc
    @deprecated(
      reason: "Prefer to use `PARTNER_UPDATED_AT_DESC`. [Will be removed in v2]"
    )
  PARTNER_UPDATED_AT_DESC
  published_at_asc
    @deprecated(
      reason: "Prefer to use `PUBLISHED_AT_ASC`. [Will be removed in v2]"
    )
  PUBLISHED_AT_ASC
  published_at_desc
    @deprecated(
      reason: "Prefer to use `PUBLISHED_AT_DESC`. [Will be removed in v2]"
    )
  PUBLISHED_AT_DESC
  title_asc
    @deprecated(reason: "Prefer to use `TITLE_ASC`. [Will be removed in v2]")
  TITLE_ASC
  title_desc
    @deprecated(reason: "Prefer to use `TITLE_DESC`. [Will be removed in v2]")
  TITLE_DESC
}

type ArtworkVersion {
  # A globally unique ID.
  __id: ID!

  # The names for the artists related to this Artwork Version
  artistNames: String

  # The artists related to this Artwork Version
  artists: String

  # The Image id
  defaultImageID: String

  # A type-specific ID likely used as a database ID.
  id: ID!

  # The image representing the Artwork Version
  image: Image

  # Artwork title
  title: String
}

# Fields of an attachment (currently from Radiation)
type Attachment {
  # A globally unique ID.
  __id: ID!

  # Content type of file.
  content_type: String!

  # URL of attachment.
  download_url: String!

  # File name.
  file_name: String!

  # A type-specific ID likely used as a database ID.
  id: ID!
}

# Collection of fields that describe attribution class
type AttributionClass {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  id: ID!

  # Descriptive phrase used as companion for attribution class name display
  info: String

  # Long descriptive phrase used as companion for short_description
  long_description: String
    @deprecated(
      reason: "Prefer to use `longDescription`. [Will be removed in v2]"
    )

  # Long descriptive phrase used as companion for short_description
  longDescription: String

  # Shortest form of attribution class display
  name: String

  # Longer version of attribution class display
  short_description: String
    @deprecated(
      reason: "Prefer to use `shortDescription`. [Will be removed in v2]"
    )

  # Longer version of attribution class display
  shortDescription: String
}

type AuctionArtworkGrid implements ArtworkContextGrid {
  artworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

# In centimeters.
type AuctionLotDimensions {
  depth: Float
  height: Float
  width: Float
}

type AuctionLotEstimate {
  display: String
  high: Float
  low: Float
}

type AuctionLotImages {
  larger: Image
  thumbnail: Image
}

type AuctionResult implements Node {
  # A globally unique ID.
  __id: ID!
  artist_id: String!
  category_text: String
  currency: String
  date(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  date_text: String
  description: String
  dimension_text: String
  dimensions: AuctionLotDimensions
  estimate: AuctionLotEstimate
  external_url: String

  # A type-specific ID likely used as a database ID.
  id: ID!
  images: AuctionLotImages
  medium_text: String
  organization: String
  price_realized: AuctionResultPriceRealized
  sale_date(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  sale_date_text: String
  sale_title: String
  title: String
}

# A connection to a list of items.
type AuctionResultConnection {
  # A list of edges.
  edges: [AuctionResultEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type AuctionResultEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: AuctionResult
}

type AuctionResultPriceRealized {
  cents: Float
  cents_usd: Float
  display(
    # Passes in to numeral, such as `'0.00'`
    format: String = ""
  ): String
}

enum AuctionResultSorts {
  DATE_DESC
  ESTIMATE_AND_DATE_DESC
  PRICE_AND_DATE_DESC
}

type Author {
  # A globally unique ID.
  __id: ID!
  href: String
    @deprecated(
      reason: "Profiles have been removed and thus author hrefs don't exist anymore. [Will be removed in v2]"
    )

  # A type-specific ID.
  id: ID!
  name: String
  profile_handle: String
}

type Bidder {
  # A globally unique ID.
  __id: ID!
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A type-specific ID likely used as a database ID.
  id: ID!
  pin: String
  qualified_for_bidding: Boolean
  sale: Sale
  user: User
}

type BidderPosition {
  # A globally unique ID.
  __id: ID!
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  display_max_bid_amount_dollars: String
    @deprecated(reason: "Prefer to use `max_bid`. [Will be removed in v2]")
  display_suggested_next_bid_dollars: String
    @deprecated(
      reason: "Prefer to use `suggested_next_bid`. [Will be removed in v2]"
    )
  highest_bid: HighestBid

  # A type-specific ID likely used as a database ID.
  id: ID!
  is_active: Boolean
  is_retracted: Boolean
  is_winning: Boolean
  is_with_bid_max: Boolean
  max_bid: BidderPositionMaxBid
  max_bid_amount_cents: Int
    @deprecated(reason: "Prefer to use `max_bid`. [Will be removed in v2]")
  processed_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  sale_artwork: SaleArtwork
  suggested_next_bid: BidderPositionSuggestedNextBid
  suggested_next_bid_cents: Int
    @deprecated(
      reason: "Prefer to use `suggested_next_bid`. [Will be removed in v2]"
    )
  updated_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

input BidderPositionInput {
  artwork_id: String!
  clientMutationId: String
  max_bid_amount_cents: Float!
  sale_id: String!
}

type BidderPositionMaxBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type BidderPositionPayload {
  clientMutationId: String
  result: BidderPositionResult
}

type BidderPositionResult {
  message_description_md: String
  message_header: String
  position: BidderPosition
  status: String!
}

type BidderPositionSuggestedNextBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type BidIncrement {
  amount: Int
  from: Int
  to: Int
}

type BidIncrementsFormatted {
  cents: Float
  display: String
}

input buyerAcceptOfferInput {
  clientMutationId: String

  # Offer ID
  offerId: String!
}

type buyerAcceptOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input buyerCounterOfferInput {
  clientMutationId: String

  # Offer note
  note: String

  # The ID of the offer to counter
  offerId: String!

  # Offer price
  offerPrice: MoneyInput
}

type buyerCounterOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input buyerRejectOfferInput {
  clientMutationId: String

  # Offer ID
  offerId: String!

  # Reason for rejecting offer
  rejectReason: CancelReasonType
}

type buyerRejectOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

type BuyersPremium {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!

  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int

  # A slug ID.
  id: ID!
  percent: Float
}

type BuyOrder implements Order {
  # A globally unique ID.
  __id: ID!

  # Buyer of this order
  buyer: OrderParty

  # Buyer phone number
  buyerPhoneNumber: String

  # A formatted price with various currency formatting options.
  buyerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Buyer total in cents
  buyerTotalCents: Int

  # Uniq user-friendly code of the order
  code: String

  # A formatted price with various currency formatting options.
  commissionFee(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Commission fee in cents
  commissionFeeCents: Int

  # Partner commission rate used to calculate commission fee
  commissionRate: Float
  createdAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Credit card on this order
  creditCard: CreditCard

  # Currency code of this order
  currencyCode: String

  # Partner commission rate formatted into percentage
  displayCommissionRate: String

  # A type-specific ID likely used as a database ID.
  id: ID!

  # A formatted price with various currency formatting options.
  itemsTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Item total in cents
  itemsTotalCents: Int
  lastApprovedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  lastSubmittedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Whether or not the last attempt to charge the buyer failed
  lastTransactionFailed: Boolean

  # List of order line items
  lineItems: OrderLineItemConnection

  # Order Mode
  mode: OrderModeEnum

  # Order Requested Fulfillment
  requestedFulfillment: RequestedFulfillment

  # Seller of this order
  seller: OrderParty

  # A formatted price with various currency formatting options.
  sellerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Seller total in cents
  sellerTotalCents: Int

  # A formatted price with various currency formatting options.
  shippingTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Shipping total in cents
  shippingTotalCents: Int

  # State of the order
  state: String
  stateExpiresAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Reason for current state
  stateReason: String
  stateUpdatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted price with various currency formatting options.
  taxTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Tax total in cents
  taxTotalCents: Int

  # A formatted price with various currency formatting options.
  totalListPrice(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Total list price in cents
  totalListPriceCents: Int

  # A formatted price with various currency formatting options.
  transactionFee(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Transaction fee in cents
  transactionFeeCents: Int
  updatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

type CalculatedCost {
  bidAmount: Money
  buyersPremium: Money
  subtotal: Money
}

enum CancelReasonType {
  BUYER_REJECTED
  SELLER_LAPSED
  SELLER_REJECTED
  SELLER_REJECTED_ARTWORK_UNAVAILABLE
  SELLER_REJECTED_OFFER_TOO_LOW
  SELLER_REJECTED_OTHER
  SELLER_REJECTED_SHIPPING_UNAVAILABLE
}

# Fields of partner category (currently from Gravity).
type Category {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  category_type: String

  # A slug ID.
  id: ID!
  internal: Boolean
  name: String
}

enum CategoryType {
  GALLERY
  INSTITUTION
}

type City {
  coordinates: LatLng
  fairs(
    after: String
    before: String
    first: Int
    last: Int
    sort: FairSorts
    status: EventStatus
  ): FairConnection
  name: String
  shows(
    after: String
    before: String

    # Only used when status is CLOSING_SOON or UPCOMING. Number of days used to filter upcoming and closing soon shows
    dayThreshold: Int

    # [DEPRECATED: prefer includeStubShows] Whether to include stub shows or not
    discoverable: Boolean
    first: Int

    # Whether to include local discovery stubs
    includeStubShows: Boolean
    last: Int

    # Filter shows by partner type
    partnerType: PartnerShowPartnerType
    sort: PartnerShowSorts

    # Filter shows by chronological event status
    status: EventStatus
  ): ShowConnection
  slug: String
  sponsoredContent: CitySponsoredContent
}

type CitySponsoredContent {
  artGuideUrl: String
  featuredShows: [Show]
  introText: String
  shows(
    after: String
    before: String
    first: Int
    last: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): ShowConnection
}

type Collection implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artworks_connection(
    after: String
    before: String
    first: Int
    last: Int
    private: Boolean = false
    sort: CollectionSorts
  ): ArtworkConnection
  cached: Int
  default: Boolean!
  description: String!

  # A slug ID.
  id: ID!
  name: String!
  private: Boolean!
  slug: String!
}

enum CollectionSorts {
  POSITION_ASC
  POSITION_DESC
}

type CollectorProfileType {
  # A globally unique ID.
  __id: ID!
  collector_level: Int
  confirmed_buyer_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  email: String

  # A type-specific ID likely used as a database ID.
  id: ID!
  intents: [String]
  loyalty_applicant_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  name: String
  professional_buyer_applied_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  professional_buyer_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  self_reported_purchases: String
}

input ConfirmPickupInput {
  clientMutationId: String

  # Order ID
  orderId: String!
}

type ConfirmPickupPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

type Convection {
  geminiTemplateKey: String!
}

# A conversation.
type Conversation implements Node {
  # A globally unique ID.
  __id: ID!

  # Only the artworks discussed in the conversation.
  artworks: [Artwork]
  buyer_outcome: String
  buyer_outcome_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # The participant who initiated the conversation
  from: ConversationInitiator!
  from_last_viewed_message_id: String

  # An optional type-specific ID.
  id: ID
  initial_message: String!

  # Gravity inquiry id.
  inquiry_id: String

  # True if user/conversation initiator is a recipient.
  is_last_message_to_user: Boolean

  # The artworks and/or partner shows discussed in the conversation.
  items: [ConversationItem]

  # This is a snippet of text from the last message.
  last_message: String
  last_message_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Delivery id if the user is a recipient of the last message, null otherwise.
  last_message_delivery_id: String

  # Impulse id of the last message.
  last_message_id: String

  # Timestamp if the user opened the last message, null in all other cases
  last_message_open: String
    @deprecated(reason: "Prefer to use `unread`. [Will be removed in v2]")

  # A connection for all messages in a single conversation
  messages(
    after: String
    before: String
    first: Int
    last: Int
    sort: sort
  ): MessageConnection
  purchase_request: Boolean
    @deprecated(
      reason: "Purchase requests are not supported. Replaced by buy now. [Will be removed in v2]"
    )

  # The participant(s) responding to the conversation
  to: ConversationResponder!

  # True if there is an unread message by the user.
  unread: Boolean
}

# A connection to a list of items.
type ConversationConnection {
  # A list of edges.
  edges: [ConversationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalUnreadCount: Int
}

# An edge in a connection.
type ConversationEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Conversation
}

# The participant who started the conversation, currently always a User
type ConversationInitiator {
  # A globally unique ID.
  __id: ID!
  email: String!

  # A type-specific ID likely used as a database ID.
  id: ID!
  initials(length: Int = 3): String
  name: String!

  # The type of participant, e.g. Partner or User
  type: String!
}

type ConversationItem {
  item: ConversationItemType
  permalink: String
  title: String
}

union ConversationItemType = Artwork | Show

# The participant responding to the conversation, currently always a Partner
type ConversationResponder {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  id: ID!
  initials(length: Int = 3): String
  name: String!

  # An array of Impulse IDs that correspond to all email addresses that messages should be sent to
  reply_to_impulse_ids: [String]!

  # The type of participant, e.g. Partner or User
  type: String!
}

input CreateBidderInput {
  clientMutationId: String
  sale_id: String!
}

type CreateBidderPayload {
  bidder: Bidder
  clientMutationId: String
}

input CreateGeminiEntryForAssetInput {
  clientMutationId: String

  # Additional JSON data to pass through gemini, should definitely contain an `id` and a `_type`
  metadata: JSON!

  # The S3 bucket where the file was uploaded
  source_bucket: String!

  # The path to the file
  source_key: String!

  # The template key, this is `name` in the asset request
  template_key: String!
}

type CreateGeminiEntryForAssetPayload {
  asset: GeminiEntry
  clientMutationId: String
}

input CreateOfferOrderWithArtworkInput {
  # BSON ID of artwork
  artworkId: String!
  clientMutationId: String

  # ID of artwork's edition set
  editionSetId: String

  # When set to true, we will not reuse existing pending/submitted order.
  # Otherwise if current user has pending/submitted orders on same artwork/edition
  # with same quantity, we will return that
  find_active_or_create: Boolean

  # quantity of artwork
  quantity: Int
}

type CreateOfferOrderWithArtworkPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input CreateOrderWithArtworkInput {
  # BSON ID of artwork
  artworkId: String!
  clientMutationId: String

  # ID of artwork's edition set
  editionSetId: String

  # quantity of artwork
  quantity: Int
}

type CreateOrderWithArtworkPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

# An asset which is assigned to a consignment submission
type Credentials {
  # The key to use with S3.
  credentials: String!

  # The s3 policy document for your request
  policy_document: S3PolicyDocumentType!

  # A base64 encoded version of the S3 policy
  policy_encoded: String!

  # The signature for your asset.
  signature: String!
}

type CreditCard {
  # A globally unique ID.
  __id: ID!

  # Brand of credit card
  brand: String!

  # Billing address city
  city: String

  # Billing address country code
  country: String

  # Credit card's expiration month
  expiration_month: Int!

  # Credit card's expiration year
  expiration_year: Int!

  # A type-specific ID likely used as a database ID.
  id: ID!

  # Last four digits on the credit card
  last_digits: String!

  # Name on the credit card
  name: String

  # Billing address postal code
  postal_code: String

  # Billing address state
  state: String

  # Billing address street1
  street1: String

  # Billing address street2
  street2: String
}

# A connection to a list of items.
type CreditCardConnection {
  # A list of edges.
  edges: [CreditCardEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CreditCardEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: CreditCard
}

input CreditCardInput {
  clientMutationId: String
  oneTimeUse: Boolean = false
  token: String!
}

type CreditCardMutationFailure {
  mutationError: GravityMutationError
}

type CreditCardMutationSuccess {
  creditCard: CreditCard
  creditCardEdge: CreditCardEdge
}

union CreditCardMutationType =
    CreditCardMutationFailure
  | CreditCardMutationSuccess

type CreditCardPayload {
  clientMutationId: String
  credit_card: CreditCard
    @deprecated(
      reason: "Prefer to use `creditCardOrError`. [Will be removed in v2]"
    )
  creditCardOrError: CreditCardMutationType
}

type CroppedImageUrl {
  height: Int
  url: String
  width: Int
}

type CurrentEvent {
  # Location and date of the event if available
  details: String
  event: UnderlyingCurrentEvent!

  # Link to the event
  href: String
  image: Image

  # Name of the event
  name: String

  # Name of the partner associated to the event
  partner: String

  # The state of the event
  status: String
}

type DaySchedule {
  day_of_week: String
  end_time: Int
  start_time: Int
}

type DeepZoom {
  Image: DeepZoomImage
}

type DeepZoomImage {
  Format: String
  Overlap: Int
  Size: DeepZoomImageSize
  TileSize: Int
  Url: String
  xmlns: String
}

type DeepZoomImageSize {
  Height: Int
  Width: Int
}

input DeleteCreditCardInput {
  clientMutationId: String
  id: String!
}

type DeleteCreditCardPayload {
  clientMutationId: String
  creditCardOrError: CreditCardMutationType
}

# Fields of a delivery (currently from Radiation)
type Delivery {
  # A globally unique ID.
  __id: ID!
  bounced_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  clicked_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  delivered_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Masked email w/ display name.
  full_transformed_email: String!

  # A type-specific ID likely used as a database ID.
  id: ID!
  opened_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

type dimensions {
  cm: String
  in: String
}

type EcommerceError {
  # The error message
  code: String!

  # A data object in JSON format providing additional context about the error.
  data: String

  # The error message
  type: String!
}

input EditableLocation {
  # First line of an address
  address: String

  # Second line of an address
  address_2: String

  # The city the location is based in
  city: String

  # The county the location is based in
  country: String

  # Postal code for a string
  postal_code: String

  # The (optional) name of the state for location
  state: String

  # The (optional) state code of the state for location
  state_code: String

  # An optional display string for the location
  summary: String
}

type EditionSet implements Sellable {
  # A globally unique ID.
  __id: ID!
  dimensions: dimensions
  edition_of: String

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  heightCm: Float

  # A type-specific ID likely used as a database ID.
  id: ID!
  is_acquireable: Boolean
  is_for_sale: Boolean
  is_offerable: Boolean
  is_sold: Boolean
  listPrice: ListPrice
  price: String
    @deprecated(reason: "Prefer to use `sale_message`. [Will be removed in v2]")
  sale_message: String

  # score assigned to an artwork based on its dimensions
  sizeScore: Float

  # If you need to render artwork dimensions as a string, prefer the `Artwork#dimensions` field
  widthCm: Float
}

enum EditionSetSorts {
  PRICE_ASC
}

input EndSaleInput {
  clientMutationId: String
  sale_id: String
}

type EndSalePayload {
  clientMutationId: String
  sale: Sale
}

enum EventStatus {
  closed @deprecated(reason: "Prefer to use `CLOSED`. [Will be removed in v2]")

  # End date is in the past
  CLOSED

  # End date is in near future
  CLOSING_SOON
  current
    @deprecated(reason: "Prefer to use `CURRENT`. [Will be removed in v2]")

  # Start date or end date is in the future
  CURRENT
  running
    @deprecated(reason: "Prefer to use `RUNNING`. [Will be removed in v2]")

  # Start date is in the past and end date is in the future
  RUNNING

  # Special filtering option which is used to show running and upcoming shows
  RUNNING_AND_UPCOMING
  upcoming
    @deprecated(reason: "Prefer to use `UPCOMING`. [Will be removed in v2]")

  # Start date is in the future
  UPCOMING
}

type ExternalPartner {
  # A globally unique ID.
  __id: ID!
  city: String

  # A type-specific ID.
  id: ID!
  name: String
}

type Fair {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  about: String
  active_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  artists(
    after: String
    before: String
    first: Int
    last: Int

    # Sorts for artists in a fair
    sort: FairArtistSorts
  ): ArtistConnection
  banner_size: String
  cached: Int
  counts: FairCounts
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of the start to end dates
  exhibition_period: String

  # The exhibitors with booths in this fair with letter.
  exhibitors_grouped_by_name: [FairExhibitorsGroup]

  # Artworks Elastic Search results
  filteredArtworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  followed_content: FollowedContent

  # A formatted description of when the fair starts or closes or if it is closed
  formattedOpeningHours: String
  has_full_feature: Boolean
  has_homepage_section: Boolean
  has_large_banner: Boolean
  has_listing: Boolean
  hours: String
  href: String

  # A slug ID.
  id: ID!
  image: Image
  is_active: Boolean
    @deprecated(reason: "Prefer to use `isActive`. [Will be removed in v2]")
  is_published: Boolean

  # Are we currently in the fair's active period?
  isActive: Boolean
  links: String
  location: Location
  mobile_image: Image
  name: String
  organizer: organizer
  profile: Profile
  published: Boolean
    @deprecated(reason: "Prefer to use `is_published`. [Will be removed in v2]")

  # This connection only supports forward pagination. We're replacing Relay's default cursor with one from Gravity.
  shows_connection(
    after: String
    before: String
    first: Int
    last: Int

    # Number of artworks to return
    section: String

    # Sorts for shows in a fair
    sort: ShowSort
  ): ShowConnection
  sponsoredContent: FairSponsoredContent
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  tagline: String
  ticketsLink: String
}

enum FairArtistSorts {
  NAME_ASC
  NAME_DESC
}

# A connection to a list of items.
type FairConnection {
  # A list of edges.
  edges: [FairEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type FairCounts {
  artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partner_shows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partners(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type FairEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Fair
}

type FairExhibitor {
  # A slug ID.
  id: ID!

  # Exhibitor name
  name: String

  # Exhibitors _id
  partner_id: String

  # Partner default profile id
  profile_id: String
}

type FairExhibitorsGroup {
  # The exhibitor data.
  exhibitors: [FairExhibitor]

  # Letter exhibitors group belongs to
  letter: String
}

enum FairSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
}

type FairSponsoredContent {
  activationText: String
  pressReleaseUrl: String
}

type FeaturedLinkItem {
  # A globally unique ID.
  __id: ID!
  href: String

  # A type-specific ID likely used as a database ID.
  id: String
  image: Image
  initials(length: Int = 3): String
  subtitle: String
  title: String
}

type Feedback {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  id: ID!

  # Feedback message
  message: String!
}

type FieldErrorResults {
  message: String!
  name: String!
}

type FilterArtworks implements Node {
  # The ID of the object.
  __id: ID!

  # Returns aggregation counts for the given filter query.
  aggregations: [ArtworksAggregationResults]
  artworks_connection(
    after: String
    before: String
    first: Int
    last: Int
    sort: String
  ): ArtworkConnection
  counts: FilterArtworksCounts
  facet: ArtworkFilterFacet
  followed_artists_total: Int
    @deprecated(
      reason: "Prefer to use `counts.followed_artists`. [Will be removed in v2]"
    )

  # Artwork results.
  hits: [Artwork]

  # Returns a list of merchandisable artists sorted by merch score.
  merchandisable_artists: [Artist]
  total: Int
    @deprecated(reason: "Prefer to use `counts.total`. [Will be removed in v2]")
}

type FilterArtworksCounts {
  followed_artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  total(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type FilterPartners {
  aggregations: [PartnersAggregationResults]
  hits: [Partner]
  total: Int
}

type FilterSaleArtworks {
  # Returns aggregation counts for the given filter query.
  aggregations: [SaleArtworksAggregationResults]
  counts: FilterSaleArtworksCounts

  # Sale Artwork results.
  hits: [SaleArtwork]
}

type FilterSaleArtworksCounts {
  followed_artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  total(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

input FixFailedPaymentInput {
  clientMutationId: String

  # Credit card ID
  creditCardId: String!

  # Offer ID
  offerId: ID!
}

type FixFailedPaymentPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

type FollowArtist {
  # A globally unique ID.
  __id: ID!
  artist: Artist
  auto: Boolean

  # A type-specific ID likely used as a database ID.
  id: ID!
}

# A connection to a list of items.
type FollowArtistConnection {
  # A list of edges.
  edges: [FollowArtistEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type FollowArtistCounts {
  artists: Int
}

# An edge in a connection.
type FollowArtistEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowArtist
}

input FollowArtistInput {
  artist_id: String
  clientMutationId: String
  unfollow: Boolean = false
}

type FollowArtistPayload {
  artist: Artist
  clientMutationId: String

  # Popular artists
  popular_artists(
    # Exclude these ids from results, may result in all artists being excluded.
    exclude_artist_ids: [String]

    # If true, will exclude followed artists for the user
    exclude_followed_artists: Boolean

    # Number of results to return
    size: Int
  ): PopularArtists
}

type FollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type FollowedArtistsArtworksGroup implements Node {
  # A globally unique ID.
  __id: ID!
  artists: String

  # List of artworks in this group.
  artworks: [Artwork]
  artworksConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  href: String
  image: Image
  published_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  summary: String
}

# A connection to a list of items.
type FollowedArtistsArtworksGroupConnection {
  # A list of edges.
  edges: [FollowedArtistsArtworksGroupEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedArtistsArtworksGroupEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowedArtistsArtworksGroup
}

type FollowedContent {
  artists: [Artist]
  galleries: [Partner]
}

# A connection to a list of items.
type FollowedFairConnection {
  # A list of edges.
  edges: [FollowedFairEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedFairEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Fair
}

# A connection to a list of items.
type FollowedShowConnection {
  # A list of edges.
  edges: [FollowedShowEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowedShowEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Show
}

type FollowGene {
  # A globally unique ID.
  __id: ID!
  gene: Gene

  # A type-specific ID likely used as a database ID.
  id: ID!
}

# A connection to a list of items.
type FollowGeneConnection {
  # A list of edges.
  edges: [FollowGeneEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FollowGeneEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: FollowGene
}

input FollowGeneInput {
  clientMutationId: String
  gene_id: String
}

type FollowGenePayload {
  clientMutationId: String
  gene: Gene
}

input FollowProfileInput {
  clientMutationId: String
  profile_id: String
  unfollow: Boolean = false
}

type FollowProfilePayload {
  clientMutationId: String
  profile: Profile
}

type FollowsAndSaves {
  # A list of published artworks by followed artists (grouped by date and artists).
  bundledArtworksByArtist(
    after: String
    before: String
    first: Int
    for_sale: Boolean
    last: Int
    sort: ArtworkSorts
  ): FollowedArtistsArtworksGroupConnection

  # A list of the current user’s currently followed fair profiles
  fairs(
    after: String
    before: String
    first: Int
    last: Int
  ): FollowedFairConnection

  # A list of the current user’s currently followed shows
  shows(
    after: String
    before: String

    # A string representing one of the supported cities in the City Guide, which
    # are: new-york-ny-usa, los-angeles-ca-usa, london-united-kingdom,
    # berlin-germany, paris-france, hong-kong-hong-kong
    city: String

    # Number of days which will be used to filter upcoming and closing soon shows
    dayThreshold: Int
    first: Int
    last: Int
    status: EventStatus
  ): FollowedShowConnection
}

input FollowShowInput {
  clientMutationId: String
  partner_show_id: String
  unfollow: Boolean = false
}

type FollowShowPayload {
  clientMutationId: String
  show: Show
}

enum Format {
  HTML
  markdown
    @deprecated(
      reason: "Deprecated when we deprecated lower-case enum entries, but no alternative was provided. Add an alternative to MP if this is still needed. [Will be removed in v2]"
    )
  PLAIN
}

type FormattedDaySchedules {
  days: String
  hours: String
}

# The `FormattedNumber` type represents a number that can optionally be returnedas
# a formatted String. It does not try to coerce the type.
scalar FormattedNumber

input FulfillmentInputType {
  # Courier of the fulfiller
  courier: String!

  # Estimated delivery in YY-MM-DD format
  estimatedDelivery: String

  # Courier's Tracking ID of this fulfillment
  trackingId: String
}

input FulfillOrderAtOnceInput {
  clientMutationId: String

  # Fulfillment information of this order
  fulfillment: FulfillmentInputType!

  # ID of the order
  orderId: String!
}

type FulfillOrderAtOncePayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

# An entry from gemini
type GeminiEntry {
  # The token that represents the gemini entry.
  token: String!
}

type Gene implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artists: [Artist]
  artists_connection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  artworks_connection(
    acquireable: Boolean
    after: String
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    before: String
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    first: Int
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    last: Int
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): GeneArtworksConnection
  cached: Int
  description: String
  display_name: String

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  href: String

  # A slug ID.
  id: ID!
  image: Image
  is_followed: Boolean
  is_published: Boolean
  mode: String
  name: String

  # A list of genes similar to the specified gene
  similar(
    after: String
    before: String

    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    exclude_gene_ids: [String]
    first: Int
    last: Int
  ): GeneConnection
  trending_artists(sample: Int): [Artist]
}

# A connection to a list of items.
type GeneArtworksConnection {
  # Returns aggregation counts for the given filter query.
  aggregations: [ArtworksAggregationResults]
  counts: FilterArtworksCounts

  # A list of edges.
  edges: [GeneArtworksEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type GeneArtworksEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Artwork
}

# A connection to a list of items.
type GeneConnection {
  # A list of edges.
  edges: [GeneEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type GeneEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Gene
}

type GeneFamily {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  genes: [Gene]

  # A slug ID.
  id: ID!
  name: String!
}

# A connection to a list of items.
type GeneFamilyConnection {
  # A list of edges.
  edges: [GeneFamilyEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type GeneFamilyEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: GeneFamily
}

type GeneItem implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artists: [Artist]
  artists_connection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  artworks_connection(
    acquireable: Boolean
    after: String
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    before: String
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    first: Int
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    last: Int
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): GeneArtworksConnection
  cached: Int
  description: String
  display_name: String

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  href: String

  # A slug ID.
  id: ID!
  image: Image
  is_followed: Boolean
  is_published: Boolean
  mode: String
  name: String

  # A list of genes similar to the specified gene
  similar(
    after: String
    before: String

    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    exclude_gene_ids: [String]
    first: Int
    last: Int
  ): GeneConnection
  trending_artists(sample: Int): [Artist]
}

type GravityMutationError {
  detail: String
  error: String
  fieldErrors: [FieldErrorResults]
  message: String!
  type: String
}

type HighestBid {
  # A globally unique ID.
  __id: ID!

  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  amount_cents: Int
    @deprecated(reason: "Prefer to use `cents`. [Will be removed in v2]")
  cents: Int
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  display: String
  display_amount_dollars: String
    @deprecated(reason: "Prefer to use `display`. [Will be removed in v2]")

  # A type-specific ID likely used as a database ID.
  id: ID!
  is_cancelled: Boolean
  number: Int
}

union Highlighted = HighlightedArticle | HighlightedShow

type HighlightedArticle implements Node {
  # A globally unique ID.
  __id: ID!
  author: Author
  cached: Int
  channel_id: String
  contributing_authors: [Author]
  href: String

  # A type-specific ID.
  id: ID!
  published_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  slug: String
  thumbnail_image: Image
  thumbnail_teaser: String
  thumbnail_title: String
  tier: Int
  title: String
  updated_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

type HighlightedShow implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!

  # The Artists presenting in this show
  artists: [Artist]

  # Artists in the show grouped by last name
  artists_grouped_by_name: [ArtistGroup]

  # Artists inside the show who do not have artworks present
  artists_without_artworks: [Artist]

  # The artworks featured in this show
  artworks(
    all: Boolean

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    for_sale: Boolean = false
    page: Int = 1
    published: Boolean = true

    # Number of artworks to return
    size: Int = 25
  ): [Artwork]
    @deprecated(
      reason: "Prefer to use `artworks_connection`. [Will be removed in v2]"
    )

  # The artworks featured in the show
  artworks_connection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    for_sale: Boolean = false
    last: Int
    published: Boolean = true
  ): ArtworkConnection
  cached: Int

  # The general city, derived from a fair location, a show location or a potential city
  city: String

  # An object that represents some of the numbers you might want to highlight
  counts: ShowCounts

  # The image you should use to represent this show
  cover_image: Image

  # A description of the show
  description: String
  displayable: Boolean
    @deprecated(
      reason: "Prefer to use `is_displayable`. [Will be removed in v2]"
    )
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Events from the partner that runs this show
  events: [PartnerShowEventType]

  # A formatted description of the start to end dates
  exhibition_period: String

  # If the show is in a Fair, then that fair
  fair: Fair

  # Artworks Elastic Search results
  filteredArtworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks

  # A Connection of followed artists by current user for this show
  followedArtists(
    after: String
    before: String
    first: Int
    last: Int
  ): ShowFollowArtistConnection

  # Flag showing if show has any location.
  has_location: Boolean

  # A path to the show on Artsy
  href: String

  # A slug ID.
  id: ID!

  # Images that represent the show, you may be interested in meta_image or cover_image for a definitive thumbnail
  images(
    # Pass true/false to include cover or not
    default: Boolean
    page: Int

    # Number of images to return
    size: Int
  ): [Image]

  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  is_active: Boolean

  # Is this something we can display to the front-end?
  is_displayable: Boolean

  # Does the show exist as a fair booth?
  is_fair_booth: Boolean

  # Is the user following this show
  is_followed: Boolean
  is_local_discovery: Boolean
    @deprecated(reason: "Prefer to use `isStubShow`. [Will be removed in v2]")

  # Is it a show provided for historical reference?
  is_reference: Boolean

  # Is it an outsourced local discovery stub show?
  isStubShow: Boolean

  # Whether the show is in a fair, group or solo
  kind: String

  # Where the show is located (Could also be a fair location)
  location: Location

  # An image representing the show, or a sharable image from an artwork in the show
  meta_image: Image

  # The exhibition title
  name: String

  # Shows that are near (~75km) from this show
  nearbyShows(
    after: String
    before: String

    # Whether to include local discovery stubs as well as displayable shows
    discoverable: Boolean
    first: Int
    last: Int
    sort: PartnerShowSorts

    # By default show only current shows
    status: EventStatus
  ): ShowConnection

  # Alternate Markdown-supporting free text representation of the opening reception event’s date/time
  openingReceptionText: String

  # The partner that represents this show, could be a non-Artsy partner
  partner: PartnerTypes

  # The press release for this show
  press_release(format: Format): String

  # Link to the press release for this show
  pressReleaseUrl: String

  # When this show starts
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Is this show running, upcoming or closed?
  status: String

  # A formatted update on upcoming status changes
  status_update(
    # Before this many days no update will be generated
    max_days: Int
  ): String

  # Is it a fair booth or a show?
  type: String
}

type HomePage {
  # Single artist module to show on the home screen.
  artist_module(
    # Module identifier.
    key: HomePageArtistModuleTypes
  ): HomePageArtistModule

  # Artist modules to show on the home screen
  artist_modules: [HomePageArtistModule]

  # Single artwork module to show on the home screen
  artwork_module(
    # ID of followed artist to target for related artist rails
    followed_artist_id: String

    # [DEPRECATED: Favor more specific `generic_gene_id`] ID of generic gene rail to target
    generic_gene_id: String

    # ID of generic gene rail to target
    id: String

    # Module key
    key: String

    # ID of related artist to target for related artist rails
    related_artist_id: String
  ): HomePageArtworkModule

  # Artwork modules to show on the home screen
  artwork_modules(
    # Exclude certain modules
    exclude: [HomePageArtworkModuleTypes] = []

    # Maximum number of followed genes to return, disable with a negative number
    max_followed_gene_rails: Int = 1

    # Maximum number of modules to return, disable limit with a negative number
    max_rails: Int = 8

    # The preferred order of modules, defaults to order returned by Gravity
    order: [HomePageArtworkModuleTypes]
  ): [HomePageArtworkModule]
  fairs_module: HomePageFairsModule

  # A list of enabled hero units to show on the requested platform
  hero_units(platform: HomePageHeroUnitPlatform!): [HomePageHeroUnit]
}

type HomePageArtistModule implements Node {
  # A globally unique ID.
  __id: ID!

  # Module identifier.
  key: String
  results: [Artist]
}

enum HomePageArtistModuleTypes {
  # The most searched for artists.
  POPULAR

  # Artists recommended for the specific user.
  SUGGESTED

  # The trending artists.
  TRENDING
}

type HomePageArtworkModule implements Node {
  # A globally unique ID.
  __id: ID!
  context: HomePageModuleContext
  display: String
    @deprecated(
      reason: "Prefer to use `is_displayable`. [Will be removed in v2]"
    )
  is_displayable: Boolean
  key: String
  params: HomePageModulesParams
  results: [Artwork]
  title: String
}

enum HomePageArtworkModuleTypes {
  ACTIVE_BIDS
  CURRENT_FAIRS
  FOLLOWED_ARTIST
  FOLLOWED_ARTISTS
  FOLLOWED_GALLERIES
  FOLLOWED_GENES
  GENERIC_GENES
  LIVE_AUCTIONS
  POPULAR_ARTISTS
  RECENTLY_VIEWED_WORKS
  RECOMMENDED_WORKS
  RELATED_ARTISTS
  SAVED_WORKS
  SIMILAR_TO_RECENTLY_VIEWED
  SIMILAR_TO_SAVED_WORKS
}

type HomePageFairsModule {
  results: [Fair]!
}

type HomePageHeroUnit {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!

  # The image to show, on desktop this defaults to the wide version.
  background_image_url(version: HomePageHeroUnitImageVersion): String
  cached: Int
  credit_line: String
  heading: String
  href: String

  # A slug ID.
  id: ID!
  link_text: String
  mode: HomePageHeroUnitMode
  subtitle: String
  title: String
  title_image_url(retina: Boolean): String
}

enum HomePageHeroUnitImageVersion {
  NARROW
  WIDE
}

enum HomePageHeroUnitMode {
  CENTERED_DARK
  CENTERED_LIGHT
  LEFT_DARK
  LEFT_LIGHT
  RIGHT_DARK
  RIGHT_LIGHT
}

enum HomePageHeroUnitPlatform {
  DESKTOP
  MARTSY
  MOBILE
}

union HomePageModuleContext =
    HomePageModuleContextFair
  | HomePageModuleContextFollowArtists
  | HomePageModuleContextFollowedArtist
  | HomePageModuleContextGene
  | HomePageModuleContextRelatedArtist
  | HomePageModuleContextSale
  | HomePageModuleContextTrending

type HomePageModuleContextFair {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  about: String
  active_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  artists(
    after: String
    before: String
    first: Int
    last: Int

    # Sorts for artists in a fair
    sort: FairArtistSorts
  ): ArtistConnection
  banner_size: String
  cached: Int
  counts: FairCounts
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of the start to end dates
  exhibition_period: String

  # The exhibitors with booths in this fair with letter.
  exhibitors_grouped_by_name: [FairExhibitorsGroup]

  # Artworks Elastic Search results
  filteredArtworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  followed_content: FollowedContent

  # A formatted description of when the fair starts or closes or if it is closed
  formattedOpeningHours: String
  has_full_feature: Boolean
  has_homepage_section: Boolean
  has_large_banner: Boolean
  has_listing: Boolean
  hours: String
  href: String

  # A slug ID.
  id: ID!
  image: Image
  is_active: Boolean
    @deprecated(reason: "Prefer to use `isActive`. [Will be removed in v2]")
  is_published: Boolean

  # Are we currently in the fair's active period?
  isActive: Boolean
  links: String
  location: Location
  mobile_image: Image
  name: String
  organizer: organizer
  profile: Profile
  published: Boolean
    @deprecated(reason: "Prefer to use `is_published`. [Will be removed in v2]")

  # This connection only supports forward pagination. We're replacing Relay's default cursor with one from Gravity.
  shows_connection(
    after: String
    before: String
    first: Int
    last: Int

    # Number of artworks to return
    section: String

    # Sorts for shows in a fair
    sort: ShowSort
  ): ShowConnection
  sponsoredContent: FairSponsoredContent
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  tagline: String
  ticketsLink: String
}

type HomePageModuleContextFollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type HomePageModuleContextFollowedArtist {
  artist: Artist
}

type HomePageModuleContextGene implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artists: [Artist]
  artists_connection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtistConnection
  artworks_connection(
    acquireable: Boolean
    after: String
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    before: String
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    first: Int
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    last: Int
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): GeneArtworksConnection
  cached: Int
  description: String
  display_name: String

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  href: String

  # A slug ID.
  id: ID!
  image: Image
  is_followed: Boolean
  is_published: Boolean
  mode: String
  name: String

  # A list of genes similar to the specified gene
  similar(
    after: String
    before: String

    # Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    exclude_gene_ids: [String]
    first: Int
    last: Int
  ): GeneConnection
  trending_artists(sample: Int): [Artist]
}

type HomePageModuleContextRelatedArtist {
  artist: Artist
  based_on: Artist
}

type HomePageModuleContextSale implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artworks(
    all: Boolean = false

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    page: Int = 1
    size: Int = 25
  ): [Artwork]

  # Returns a connection of artworks for a sale.
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    last: Int
  ): ArtworkConnection
  associated_sale: Sale
  auction_state: String
    @deprecated(reason: "Prefer to use `status`. [Will be removed in v2]")

  # A bid increment policy that explains minimum bids in ranges.
  bid_increments: [BidIncrement]

  # Auction's buyer's premium policy.
  buyers_premium: [BuyersPremium]
  cached: Int
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of when the auction starts or ends or if it has ended
  formattedStartDateTime: String
  href: String

  # A slug ID.
  id: ID!
  initials(length: Int = 3): String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_benefit: Boolean
    @deprecated(reason: "Prefer to use `isBenefit`. [Will be removed in v2]")
  is_closed: Boolean
  is_live_open: Boolean
  is_open: Boolean
  is_preliminary: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  isBenefit: Boolean
  isGalleryAuction: Boolean
  live_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Returns a live auctions url if the sale is open and start time is after now
  live_url_if_open: String
  name: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A registration for this sale or null
  registrationStatus: Bidder
  require_bidder_approval: Boolean
  sale_artwork(id: String!): SaleArtwork
  sale_artworks(
    all: Boolean = false
    page: Int = 1
    size: Int = 25
  ): [SaleArtwork]
  sale_artworks_connection(
    after: String
    before: String
    first: Int

    # List of sale artwork IDs to fetch
    ids: [ID]
    last: Int
  ): SaleArtworkConnection
  sale_type: String
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  status: String
  symbol: String
  timeZone: String
}

type HomePageModuleContextTrending {
  artists: [Artist]
}

type HomePageModulesParams {
  followed_artist_id: ID
  gene_id: String

  # An optional type-specific ID.
  id: ID
  medium: String
  price_range: String
  related_artist_id: ID
}

type Image {
  aspect_ratio: Float!
  caption: String
  cropped(height: Int!, version: [String], width: Int!): CroppedImageUrl
  deep_zoom: DeepZoom
  height: Int
  href: String

  # An optional type-specific ID.
  id: ID
  image_url: String
  image_versions: [String]
  is_default: Boolean
  is_zoomable: Boolean
  max_tiled_height: Int
  max_tiled_width: Int
  orientation: String
  original_height: Int
  original_width: Int

  # Value to use when `padding-bottom` for fluid image placeholders
  placeholder: String
  position: Int
  resized(height: Int, version: [String], width: Int): ResizedImageUrl
  tile_base_url: String
  tile_format: String
  tile_size: Int
  title: String
  url(version: [String]): String
  versions: [String]
  width: Int
}

enum Intents {
  BUY_ART_AND_DESIGN
  FIND_ART_EXHIBITS
  LEARN_ABOUT_ART
  READ_ART_MARKET_NEWS
  RESEARCH_ART_PRICES
  SELL_ART_AND_DESIGN
}

# Fields of an invoice (currently from Lewitt)
type Invoice implements Node {
  # A globally unique ID.
  __id: ID!
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # A type-specific ID likely used as a database ID.
  id: ID!
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # Lewitt's invoice id.
  lewitt_invoice_id: String!
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # Link to public checkout page.
  payment_url: String
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # Current state of invoice.
  state: InvoiceState
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )

  # A formatted price with various currency formatting options.
  total(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
    @deprecated(
      reason: "Payment Request was deprecated. The type was kept for legacy client support. [Will be removed in v2]"
    )
}

enum InvoiceState {
  PAID
  REFUNDED
  UNPAID
  VOID
}

union Item = ArtistItem | ArtworkItem | FeaturedLinkItem | GeneItem

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type LatLng {
  lat: Float
  lng: Float
}

union ListPrice = Money | PriceRange

type Location {
  # A globally unique ID.
  __id: ID!
  address: String
  address_2: String
  cached: Int
  city: String
  coordinates: LatLng
  country: String

  # Alternate Markdown-supporting free text representation of a location's opening hours
  day_schedule_text: String
  day_schedules: [DaySchedule]
  display: String
  displayDaySchedules: [FormattedDaySchedules]
    @deprecated(reason: "Prefer to use `openingHours`. [Will be removed in v2]")

  # A type-specific ID.
  id: ID!

  # Union returning opening hours in formatted structure or a string
  openingHours: OpeningHoursUnion
  phone: String
  postal_code: String
  state: String
  summary: String
}

type LotStanding {
  # Your bid if it is currently winning
  active_bid: BidderPosition
  bidder: Bidder

  # You are winning and reserve is met
  is_highest_bidder: Boolean

  # You are the leading bidder without regard to reserve
  is_leading_bidder: Boolean

  # Your most recent bid—which is not necessarily winning (may be higher or lower)
  most_recent_bid: BidderPosition
  sale: Sale
  sale_artwork: SaleArtwork
}

type Me implements Node {
  # A globally unique ID.
  __id: ID!

  # A list of the current user’s inquiry requests
  artwork_inquiries_connection(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkInquiryConnection

  # Returns a single bidder position
  bidder_position(id: String!): BidderPositionResult

  # A list of the current user's bidder positions
  bidder_positions(
    # Only the bidder positions on a specific artwork
    artwork_id: String

    # Only the most recent bidder positions per artwork.
    current: Boolean

    # Only the bidder positions for a specific auction
    sale_id: String
  ): [BidderPosition]

  # The current user's status relating to bids on artworks
  bidder_status(artwork_id: String!, sale_id: String!): LotStanding

  # A list of the current user’s bidder registrations
  bidders(
    # The slug or ID of a Sale
    sale_id: String
  ): [Bidder]

  # A collector profile.
  collector_profile: CollectorProfileType

  # A conversation, usually between a user and a partner
  conversation(
    # The ID of the Conversation
    id: String!
  ): Conversation

  # Conversations, usually between a user and partner.
  conversations(
    after: String
    before: String
    first: Int
    last: Int
  ): ConversationConnection
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A list of the current user’s credit cards
  creditCards(
    after: String
    before: String
    first: Int
    last: Int
  ): CreditCardConnection
  email: String

  # A list of the current user’s artist follows
  follow_artists(page: Int, size: Int): FollowArtists

  # A Connection of followed artists by current user
  followed_artists_connection(
    after: String
    before: String
    first: Int
    last: Int
  ): FollowArtistConnection

  # A list of the current user’s inquiry requests
  followed_genes(
    after: String
    before: String
    first: Int
    last: Int
  ): FollowGeneConnection
  followsAndSaves: FollowsAndSaves
  has_credit_cards: Boolean
  has_qualified_credit_cards: Boolean

  # A type-specific ID.
  id: ID!
  initials(length: Int = 3): String

  # An invoice
  invoice(
    # The ID of the Conversation
    conversationId: String!

    # The ID of the invoice
    invoiceId: String!
  ): Invoice
    @deprecated(
      reason: "Payment Request was deprecated. The field was kept for legacy client support. [Will be removed in v2]"
    )

  # The current user's status relating to bids on artworks
  lot_standing(
    artwork_id: String
    sale_artwork_id: String
    sale_id: String
  ): LotStanding

  # A list of the current user's auction standings for given lots
  lot_standings(
    # Only includes lots on which you have a leading bidder position.
    active_positions: Boolean

    # Only the lot standings on a specific artwork
    artwork_id: String

    # Only the lot standings for currently open or closed auctions.
    live: Boolean
    sale_artwork_id: String

    # Only the lot standings for a specific auction
    sale_id: String
  ): [LotStanding]
  name: String

  # A list of feed items, indicating published artworks (grouped by date and artists).
  notifications_connection(
    after: String
    before: String
    first: Int
    last: Int
  ): NotificationsFeedItemConnection
    @deprecated(
      reason: "Prefer to use `followsAndSaves`. [Will be removed in v2]"
    )
  paddle_number: String
  recentlyViewedArtworkIds: [String]!

  # A list of the current user’s recently viewed artworks.
  recentlyViewedArtworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  sale_registrations(
    #
    #         Only return sales matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]

    # Limit by auction.
    is_auction: Boolean = true

    # Limit by live status.
    live: Boolean = true

    # Limit by published status.
    published: Boolean = true
    size: Int
    sort: SaleSorts
  ): [SaleRegistration]
  saved_artworks: Collection

  # A list of the current user’s suggested artists, based on a single artist
  suggested_artists(
    # The slug or ID of an artist
    artist_id: String

    # Exclude these ids from results, may result in all artists being excluded.
    exclude_artist_ids: [String]

    # Exclude artists without any artworks
    exclude_artists_without_artworks: Boolean

    # Exclude artists without for sale works
    exclude_artists_without_forsale_artworks: Boolean

    # Exclude artists the user already follows
    exclude_followed_artists: Boolean

    # Pagination, need I say more?
    page: Int

    # Amount of artists to return
    size: Int
  ): [Artist]
  type: String
}

# A message in a conversation.
type Message implements Node {
  # A globally unique ID.
  __id: ID!
  attachments: [Attachment]

  # Unaltered text if possible, otherwise `body`: a parsed/sanitized version from Sendgrid.
  body: String
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  deliveries: [Delivery]
  from: MessageInitiator
  from_email_address: String
    @deprecated(reason: "Prefer to use `from`. [Will be removed in v2]")

  # A type-specific ID likely used as a database ID.
  id: ID!

  # Impulse message id.
  impulse_id: String!
  invoice: Invoice
    @deprecated(
      reason: "Payment Request was deprecated. The field was kept for legacy client support. [Will be removed in v2]"
    )

  # True if message is from the user to the partner.
  is_from_user: Boolean

  # True if message is an invoice message
  is_invoice: Boolean
    @deprecated(
      reason: "Payment Request was deprecated. The field was kept for legacy client support. [Will be removed in v2]"
    )

  # Full unsanitized text.
  raw_text: String!
    @deprecated(reason: "Prefer to use `body`. [Will be removed in v2]")
}

# A connection to a list of items.
type MessageConnection {
  # A list of edges.
  edges: [MessageEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type MessageEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Message
}

# The participant who sent the message.
type MessageInitiator {
  email: String
  name: String
}

type Metaphysics {
  environment: String!
  queryTracing: Boolean!
  stitching: Boolean!
  stitchingConvection: Boolean!
  stitchingExchange: Boolean!
  stitchingGravity: Boolean!
  stitchingKaws: Boolean!
}

type Money {
  # The ISO-4217 alphabetic currency code, as per https://en.wikipedia.org/wiki/ISO_4217
  currencyCode: String!

  # A pre-formatted price.
  display: String

  # An amount of money expressed in major units (like dollars).
  major: Float!

  # An amount of money expressed in minor units (like cents).
  minor: Int!
}

input MoneyInput {
  # amount in dollars or major unit
  amount: Float!

  # The ISO-4217 alphabetic currency code, as per https://en.wikipedia.org/wiki/ISO_4217
  currencyCode: String!
}

type Mutation {
  # Approves an order with payment
  approveOrder(input: ApproveOrderInput!): ApproveOrderPayload

  # Create a bidder
  createBidder(input: CreateBidderInput!): CreateBidderPayload

  # Creates a bidder position
  createBidderPosition(input: BidderPositionInput!): BidderPositionPayload

  # Create a credit card
  createCreditCard(input: CreditCardInput!): CreditCardPayload

  # Attach an gemini asset to a consignment submission
  createGeminiEntryForAsset(
    input: CreateGeminiEntryForAssetInput!
  ): CreateGeminiEntryForAssetPayload

  # Creates an order with an artwork
  createOrderWithArtwork(
    input: CreateOrderWithArtworkInput!
  ): CreateOrderWithArtworkPayload

  # Remove a credit card
  deleteCreditCard(input: DeleteCreditCardInput!): DeleteCreditCardPayload

  # Adds an offer to a pending order
  ecommerceAddInitialOfferToOrder(
    input: AddInitialOfferToOrderInput!
  ): AddInitialOfferToOrderPayload

  # Approves an order with payment
  ecommerceApproveOrder(input: ApproveOrderInput!): ApproveOrderPayload

  # Buyer accepts a submitted offer from seller
  ecommerceBuyerAcceptOffer(
    input: buyerAcceptOfferInput!
  ): buyerAcceptOfferPayload

  # Buyer counters sellers offer
  ecommerceBuyerCounterOffer(
    input: buyerCounterOfferInput!
  ): buyerCounterOfferPayload

  # Buyer rejects a submitted offer from seller
  ecommerceBuyerRejectOffer(
    input: buyerRejectOfferInput!
  ): buyerRejectOfferPayload

  # Confirms pickup for an ecommerce order
  ecommerceConfirmPickup(input: ConfirmPickupInput!): ConfirmPickupPayload

  # Creates an order with an artwork
  ecommerceCreateOfferOrderWithArtwork(
    input: CreateOfferOrderWithArtworkInput!
  ): CreateOfferOrderWithArtworkPayload

  # Creates an order with an artwork
  ecommerceCreateOrderWithArtwork(
    input: CreateOrderWithArtworkInput!
  ): CreateOrderWithArtworkPayload

  # Fix the failed payment on an offer order
  ecommerceFixFailedPayment(
    input: FixFailedPaymentInput!
  ): FixFailedPaymentPayload

  # Fulfills an Order with one fulfillment by setting this fulfillment to all line items of this order
  ecommerceFulfillOrderAtOnce(
    input: FulfillOrderAtOnceInput!
  ): FulfillOrderAtOncePayload

  # Rejects an order
  ecommerceRejectOrder(input: RejectOrderInput!): RejectOrderPayload

  # Approves an order with payment
  ecommerceSellerAcceptOffer(
    input: sellerAcceptOfferInput!
  ): sellerAcceptOfferPayload

  # Seller counters buyers offer
  ecommerceSellerCounterOffer(
    input: sellerCounterOfferInput!
  ): sellerCounterOfferPayload

  # Rejects an offer
  ecommerceSellerRejectOffer(
    input: sellerRejectOfferInput!
  ): sellerRejectOfferPayload

  # Sets payment information on an order
  ecommerceSetOrderPayment(input: SetOrderPaymentInput!): SetOrderPaymentPayload

  # Sets shipping information for an order
  ecommerceSetOrderShipping(
    input: SetOrderShippingInput!
  ): SetOrderShippingPayload

  # Submits an order
  ecommerceSubmitOrder(input: SubmitOrderInput!): SubmitOrderPayload

  # Submits an order with an offer
  ecommerceSubmitOrderWithOffer(
    input: SubmitOrderWithOfferInput!
  ): SubmitOrderWithOfferPayload

  # Submit pending offer
  ecommerceSubmitPendingOffer(
    input: submitPendingOfferInput!
  ): submitPendingOfferPayload

  # Mark sale as ended.
  endSale(input: EndSaleInput!): EndSalePayload

  # Follow (or unfollow) an artist
  followArtist(input: FollowArtistInput!): FollowArtistPayload

  # Follow (or unfollow) an gene
  followGene(input: FollowGeneInput!): FollowGenePayload

  # Follow (or unfollow) a profile
  followProfile(input: FollowProfileInput!): FollowProfilePayload

  # Follow (or unfollow) a show
  followShow(input: FollowShowInput!): FollowShowPayload

  # Fulfills an Order with one fulfillment by setting this fulfillment to all line items of this order
  fulfillOrderAtOnce(input: FulfillOrderAtOnceInput!): FulfillOrderAtOncePayload

  # Rejects an order
  rejectOrder(input: RejectOrderInput!): RejectOrderPayload

  # Attach an gemini asset to a consignment submission
  requestCredentialsForAssetUpload(
    input: RequestCredentialsForAssetUploadInput!
  ): RequestCredentialsForAssetUploadPayload

  # Save (or remove) an artwork to (from) a users default collection.
  saveArtwork(input: SaveArtworkInput!): SaveArtworkPayload

  # Appending a message to a conversation thread
  sendConversationMessage(
    input: SendConversationMessageMutationInput!
  ): SendConversationMessageMutationPayload

  # Send a feedback message
  sendFeedback(input: SendFeedbackMutationInput!): SendFeedbackMutationPayload

  # Sets payment information on an order
  setOrderPayment(input: SetOrderPaymentInput!): SetOrderPaymentPayload

  # Sets shipping information for an order
  setOrderShipping(input: SetOrderShippingInput!): SetOrderShippingPayload

  # Submits an order
  submitOrder(input: SubmitOrderInput!): SubmitOrderPayload

  # Updating a collector profile (loyalty applicant status).
  updateCollectorProfile(
    input: UpdateCollectorProfileInput!
  ): UpdateCollectorProfilePayload

  # Update a conversation.
  updateConversation(
    input: UpdateConversationMutationInput!
  ): UpdateConversationMutationPayload

  # Update the current logged in user.
  updateMyUserProfile(input: UpdateMyProfileInput!): UpdateMyProfilePayload
}

input Near {
  lat: Float!
  lng: Float!
  max_distance: Float
}

# An object with a Globally Unique ID
interface Node {
  # The ID of the object.
  __id: ID!
}

type NotificationsFeedItem implements Node {
  # A globally unique ID.
  __id: ID!
  artists: String

  # List of artworks in this notification bundle
  artworks: [Artwork]
  date(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  image: Image
  message: String
  status: NotificationsFeedItemStatus
}

# A connection to a list of items.
type NotificationsFeedItemConnection {
  # A list of edges.
  edges: [NotificationsFeedItemEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type NotificationsFeedItemEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: NotificationsFeedItem
}

enum NotificationsFeedItemStatus {
  READ
  UNREAD
}

type Offer {
  # A globally unique ID.
  __id: ID!

  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Offer amount in cents
  amountCents: Int

  # A formatted price with various currency formatting options.
  buyerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Total of amount, shipping and tax in cents
  buyerTotalCents: Int
  createdAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Creator of this order
  creator: User

  # Id of the user who created the order
  creatorId: String

  # Currency code of this order
  currencyCode: String

  # The type of the party who made the offer
  from: OrderParty

  # the order participant who created the offer
  fromParticipant: OrderParticipantEnum

  # A type-specific ID likely used as a database ID.
  id: ID!

  # Offer note
  note: String

  # The order on which the offer was made
  order: Order

  # The order on which the offer was made
  respondsTo: Offer

  # A formatted price with various currency formatting options.
  shippingTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Shipping total based on this offer in cents
  shippingTotalCents: Int
  submittedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted price with various currency formatting options.
  taxTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Tax total based on this offer in cents
  taxTotalCents: Int
}

# A connection to a list of items.
type OfferConnection {
  # A list of edges.
  edges: [OfferEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type OfferEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Offer
}

type OfferOrder implements Order {
  # A globally unique ID.
  __id: ID!

  # Waiting for one participants response
  awaitingResponseFrom: OrderParticipantEnum

  # Buyer of this order
  buyer: OrderParty

  # Buyer phone number
  buyerPhoneNumber: String

  # A formatted price with various currency formatting options.
  buyerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Buyer total in cents
  buyerTotalCents: Int

  # Uniq user-friendly code of the order
  code: String

  # A formatted price with various currency formatting options.
  commissionFee(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Commission fee in cents
  commissionFeeCents: Int

  # Partner commission rate used to calculate commission fee
  commissionRate: Float
  createdAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Credit card on this order
  creditCard: CreditCard

  # Currency code of this order
  currencyCode: String

  # Partner commission rate formatted into percentage
  displayCommissionRate: String

  # A type-specific ID likely used as a database ID.
  id: ID!

  # A formatted price with various currency formatting options.
  itemsTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Item total in cents
  itemsTotalCents: Int
  lastApprovedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Latest offer
  lastOffer: Offer
  lastSubmittedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Whether or not the last attempt to charge the buyer failed
  lastTransactionFailed: Boolean

  # List of order line items
  lineItems: OrderLineItemConnection

  # Order Mode
  mode: OrderModeEnum

  # Current User's latest offer
  myLastOffer: Offer

  # List of submitted offers made on this order so far
  offers: OfferConnection

  # Order Requested Fulfillment
  requestedFulfillment: RequestedFulfillment

  # Seller of this order
  seller: OrderParty

  # A formatted price with various currency formatting options.
  sellerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Seller total in cents
  sellerTotalCents: Int

  # A formatted price with various currency formatting options.
  shippingTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Shipping total in cents
  shippingTotalCents: Int

  # State of the order
  state: String
  stateExpiresAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Reason for current state
  stateReason: String
  stateUpdatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted price with various currency formatting options.
  taxTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Tax total in cents
  taxTotalCents: Int

  # A formatted price with various currency formatting options.
  totalListPrice(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Total list price in cents
  totalListPriceCents: Int

  # A formatted price with various currency formatting options.
  transactionFee(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Transaction fee in cents
  transactionFeeCents: Int
  updatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

type OpeningHoursArray {
  schedules: [FormattedDaySchedules]
}

type OpeningHoursText {
  text: String
}

union OpeningHoursUnion = OpeningHoursArray | OpeningHoursText

interface Order {
  # A globally unique ID.
  __id: ID!

  # Buyer of this order
  buyer: OrderParty

  # Buyer phone number
  buyerPhoneNumber: String

  # A formatted price with various currency formatting options.
  buyerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Buyer total in cents
  buyerTotalCents: Int

  # Uniq user-friendly code of the order
  code: String

  # A formatted price with various currency formatting options.
  commissionFee(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Commission fee in cents
  commissionFeeCents: Int

  # Partner commission rate used to calculate commission fee
  commissionRate: Float
  createdAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Credit card on this order
  creditCard: CreditCard

  # Currency code of this order
  currencyCode: String

  # Partner commission rate formatted into percentage
  displayCommissionRate: String

  # A type-specific ID likely used as a database ID.
  id: ID!

  # A formatted price with various currency formatting options.
  itemsTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Item total in cents
  itemsTotalCents: Int
  lastApprovedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  lastSubmittedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Whether or not the last attempt to charge the buyer failed
  lastTransactionFailed: Boolean

  # List of order line items
  lineItems: OrderLineItemConnection

  # Order Mode
  mode: OrderModeEnum

  # Order Requested Fulfillment
  requestedFulfillment: RequestedFulfillment

  # Seller of this order
  seller: OrderParty

  # A formatted price with various currency formatting options.
  sellerTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Seller total in cents
  sellerTotalCents: Int

  # A formatted price with various currency formatting options.
  shippingTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Shipping total in cents
  shippingTotalCents: Int

  # State of the order
  state: String
  stateExpiresAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Reason for current state
  stateReason: String
  stateUpdatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted price with various currency formatting options.
  taxTotal(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Tax total in cents
  taxTotalCents: Int

  # A formatted price with various currency formatting options.
  totalListPrice(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Total list price in cents
  totalListPriceCents: Int

  # A formatted price with various currency formatting options.
  transactionFee(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Transaction fee in cents
  transactionFeeCents: Int
  updatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

# A connection to a list of items.
type OrderConnection {
  # A list of edges.
  edges: [OrderEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

# An edge in a connection.
type OrderEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Order
}

type OrderedSet {
  # A globally unique ID.
  __id: ID!
  cached: Int
  description: String

  # A type-specific ID.
  id: ID!
  item_type: String
  items: [Item]
  key: String
  name: String
}

type OrderFulfillment {
  # A globally unique ID.
  __id: ID!

  # Fulfillment Courier
  courier: String
  estimatedDelivery(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A type-specific ID likely used as a database ID.
  id: ID!

  # Courier's tracking id
  trackingId: String
}

# A connection to a list of items.
type OrderFulfillmentConnection {
  # A list of edges.
  edges: [OrderFulfillmentEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type OrderFulfillmentEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: OrderFulfillment
}

enum OrderFulfillmentType {
  PICKUP
  SHIP
}

type OrderLineItem {
  # A globally unique ID.
  __id: ID!

  # Artwork that is being ordered
  artwork: Artwork

  # Artwork version that is being ordered
  artworkVersion: ArtworkVersion
  createdAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # ID of the selected Edition set from the artwork
  editionSetId: String

  # List of order line items
  fulfillments: OrderFulfillmentConnection

  # A type-specific ID likely used as a database ID.
  id: ID!

  # A formatted price with various currency formatting options.
  listPrice(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Unit list price in cents
  listPriceCents: Int

  # A formatted price with various currency formatting options.
  price(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # Unit price in cents
  priceCents: Int
    @deprecated(
      reason: "Prefer to use `listPriceCents`. [Will be removed in v2]"
    )

  # Quantity of items in this line item
  quantity: Int
  updatedAt(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
}

# A connection to a list of items.
type OrderLineItemConnection {
  # A list of edges.
  edges: [OrderLineItemEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type OrderLineItemEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: OrderLineItem
}

enum OrderModeEnum {
  # Order initiated by Buy
  BUY

  # Order initiated by Offer
  OFFER
}

union OrderOrFailureUnionType =
    OrderWithMutationFailure
  | OrderWithMutationSuccess

enum OrderParticipantEnum {
  # Participant on the buyer side
  BUYER

  # Participant on the seller side
  SELLER
}

union OrderParty = Partner | User

enum OrdersSortMethodType {
  # Sort by the timestamp the state of the order expires at in ascending order
  STATE_EXPIRES_AT_ASC

  # Sort by the timestamp the state of the order expires at in a descending order
  STATE_EXPIRES_AT_DESC

  # Sort by the timestamp the state of order was last updated in ascending order
  STATE_UPDATED_AT_ASC

  # Sort by the timestamp the state of order was last updated in descending order
  STATE_UPDATED_AT_DESC

  # Sort by the timestamp the order was last updated in ascending order
  UPDATED_AT_ASC

  # Sort by the timestamp the order was last updated in descending order
  UPDATED_AT_DESC
}

type OrderWithMutationFailure {
  error: EcommerceError
}

type OrderWithMutationSuccess {
  order: Order
}

type organizer {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!

  # A slug ID.
  id: ID!
  profile: Profile
  profile_id: ID
  website: String
}

type PageCursor {
  cursor: String!
  isCurrent: Boolean!
  page: Int!
}

type PageCursors {
  # Always includes current page
  around: [PageCursor!]!

  # Optional, may be included in `around` (if current page is near the beginning).
  first: PageCursor

  # Optional, may be included in `around` (if current page is near the end).
  last: PageCursor
  previous: PageCursor
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Partner implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artworks(
    exclude: [String]
    for_sale: Boolean
    size: Int
    sort: ArtworkSorts
  ): [Artwork]

  # A connection of artworks from a Partner.
  artworksConnection(
    after: String
    before: String
    exclude: [String]
    first: Int
    for_sale: Boolean
    last: Int
    sort: ArtworkSorts
  ): ArtworkConnection
  cached: Int
  categories: [Category]
  collecting_institution: String
  contact_message: String
    @deprecated(
      reason: "Prefer to use `Artwork.contact_message`. [Will be removed in v2]"
    )
  counts: PartnerCounts
  default_profile_id: String
  has_fair_partnership: Boolean
  href: String

  # A slug ID.
  id: ID!
  initials(length: Int = 3): String
  is_default_profile_public: Boolean
  is_limited_fair_partner: Boolean
    @deprecated(
      reason: "This field no longer exists, this is for backwards compatibility [Will be removed in v2]"
    )
  is_linkable: Boolean
  is_pre_qualify: Boolean

  # Indicates the partner is a trusted seller on Artsy
  isVerifiedSeller: Boolean
  locations(size: Int = 25): [Location]
  name: String
  profile: Profile
  shows(
    at_a_fair: Boolean
    displayable: Boolean = true
    fair_id: String
    featured: Boolean

    #
    #         Only return shows matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    size: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): [PartnerShow]
  type: String

  # The gallery partner's web address
  website: String
}

type PartnerArtist {
  # A globally unique ID.
  __id: ID!
  artist: Artist
  biography: String
  counts: PartnerArtistCounts

  # A type-specific ID.
  id: ID!
  is_display_on_partner_profile: Boolean
  is_represented_by: Boolean
  is_use_default_biography: Boolean
  partner: Partner
  sortable_id: String
}

# A connection to a list of items.
type PartnerArtistConnection {
  # A list of edges.
  edges: [PartnerArtistEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type PartnerArtistCounts {
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  for_sale_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type PartnerArtistEdge {
  # A globally unique ID.
  __id: ID!
  artist: Artist
  biography: String
  counts: PartnerArtistCounts

  # A cursor for use in pagination
  cursor: String!

  # A type-specific ID.
  id: ID!
  is_display_on_partner_profile: Boolean
  is_represented_by: Boolean
  is_use_default_biography: Boolean

  # The item at the end of the edge
  node: Partner
  partner: Partner
  sortable_id: String
}

type PartnerArtworkGrid implements ArtworkContextGrid {
  artworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type PartnerCategory {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  cached: Int
  category_type: CategoryType

  # A slug ID.
  id: ID!
  name: String
  partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    # Indicates an active subscription
    eligible_for_listing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligible_for_primary_bucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligible_for_secondary_bucket: Boolean
    has_full_profile: Boolean
    ids: [String]

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): [Partner]
}

enum PartnerClassification {
  AUCTION
  BRAND
  DEMO
  GALLERY
  INSTITUTION
  INSTITUTIONAL_SELLER
  PRIVATE_COLLECTOR
  PRIVATE_DEALER
}

type PartnerCounts {
  artist_documents(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  current_displayable_shows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  displayable_shows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  eligible_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partner_artists(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  partner_show_documents(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  published_for_sale_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  published_not_for_sale_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
  shows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

enum PartnersAggregation {
  CATEGORY
  LOCATION
  TOTAL
}

# The results for one of the requested aggregations
type PartnersAggregationResults {
  counts: [AggregationCount]
  slice: PartnersAggregation
}

type PartnerShow implements Node {
  # A globally unique ID.
  __id: ID!
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A type-specific ID likely used as a database ID.
  _id: ID!
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  artists: [Artist]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # The artworks featured in the show
  artworks(
    all: Boolean

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    for_sale: Boolean = false
    page: Int = 1
    published: Boolean = true

    # Number of artworks to return
    size: Int = 25
  ): [Artwork]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A connection of artworks featured in the show
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    for_sale: Boolean = false
    last: Int
    published: Boolean = true
  ): ArtworkConnection
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  cached: Int
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  counts: PartnerShowCounts
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  cover_image: Image
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  description: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  displayable: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  events: [PartnerShowEventType]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A formatted description of the start to end dates
  exhibition_period: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  fair: Fair
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # Flag showing if show has any location.
  has_location: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  href: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A slug ID.
  id: ID!
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  images(
    # Pass true/false to include cover or not
    default: Boolean
    page: Int

    # Number of images to return
    size: Int
  ): [Image]
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  is_active: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  is_displayable: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  is_fair_booth: Boolean
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  kind: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  location: Location
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  meta_image: Image
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # The exhibition title
  name: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  partner: Partner
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  press_release(format: Format): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  status: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )

  # A formatted update on upcoming status changes
  status_update(
    # Before this many days no update will be generated
    max_days: Int
  ): String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
  type: String
    @deprecated(
      reason: "The `PartnerShow` type has been deprecated. Prefer to use the `Show` type instead. [Will be removed in v2]"
    )
}

type PartnerShowCounts {
  artworks(
    # The slug or ID of an artist in the show.
    artist_id: String
  ): Int
  eligible_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type PartnerShowEventType {
  # A formatted description of the dates with hours
  dateTimeRange: String
  description: String
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_type: String

  # A formatted description of the start to end dates
  exhibitionPeriod: String
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  title: String
}

enum PartnerShowPartnerType {
  GALLERY
  MUSEUM
}

enum PartnerShowSorts {
  created_at_asc
    @deprecated(
      reason: "Prefer to use `CREATED_AT_ASC`. [Will be removed in v2]"
    )
  CREATED_AT_ASC
  created_at_desc
    @deprecated(
      reason: "Prefer to use `CREATED_AT_DESC`. [Will be removed in v2]"
    )
  CREATED_AT_DESC
  end_at_asc
    @deprecated(reason: "Prefer to use `END_AT_ASC`. [Will be removed in v2]")
  END_AT_ASC
  end_at_desc
    @deprecated(reason: "Prefer to use `END_AT_DESC`. [Will be removed in v2]")
  END_AT_DESC
  name_asc
    @deprecated(reason: "Prefer to use `NAME_ASC`. [Will be removed in v2]")
  NAME_ASC
  name_desc
    @deprecated(reason: "Prefer to use `NAME_DESC`. [Will be removed in v2]")
  NAME_DESC
  PARTNER_ASC
  publish_at_asc
    @deprecated(
      reason: "Prefer to use `PUBLISH_AT_ASC`. [Will be removed in v2]"
    )
  PUBLISH_AT_ASC
  publish_at_desc
    @deprecated(
      reason: "Prefer to use `PUBLISH_AT_DESC`. [Will be removed in v2]"
    )
  PUBLISH_AT_DESC
  start_at_asc
    @deprecated(reason: "Prefer to use `START_AT_ASC`. [Will be removed in v2]")
  START_AT_ASC
  start_at_desc
    @deprecated(
      reason: "Prefer to use `START_AT_DESC`. [Will be removed in v2]"
    )
  START_AT_DESC
}

enum PartnersSortType {
  CREATED_AT_ASC
  CREATED_AT_DESC
  PUBLISHED_AT_DESC
  RANDOM_SCORE_DESC
  RELATIVE_SIZE_ASC
  RELATIVE_SIZE_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
}

union PartnerTypes = ExternalPartner | Partner

type Pickup {
  # It will always be PICKUP
  fulfillmentType: String
}

type PopularArtists {
  artists: [Artist]
}

type PriceCents {
  exact: Boolean
  max: Int
  min: Int
}

type PriceRange {
  display: String
  maxPrice: Money
  minPrice: Money
}

type Profile {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  bio: String
  cached: Int
  counts: ProfileCounts
  href: String
  icon: Image

  # A slug ID.
  id: ID!
  image: Image
  initials(length: Int = 3): String
  is_followed: Boolean
  is_publically_visible: Boolean
  is_published: Boolean
  name: String
}

type ProfileCounts {
  follows(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type Query {
  # An Article
  article(
    # The ID of the Article
    id: String!
  ): Article

  # A list of Articles
  articles(
    auction_id: String
    published: Boolean = true
    show_id: String
    sort: ArticleSorts
  ): [Article]

  # An Artist
  artist(
    # The slug or ID of the Artist
    id: String!
  ): Artist

  # A list of Artists
  artists(
    #
    #         Only return artists matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    page: Int = 1
    size: Int

    #
    #         Only return artists matching specified slugs.
    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
    #
    slugs: [String]
    sort: ArtistSorts
  ): [Artist]

  # An Artwork
  artwork(
    # The slug or ID of the Artwork
    id: String!
  ): Artwork

  # List of all artwork attribution classes
  artworkAttributionClasses: [AttributionClass]

  # A list of Artworks
  artworks(ids: [String]): [Artwork]

  # A subset of the metadata for an artwork at a specific time
  artworkVersion(
    # The ID of the ArtworkVersion
    id: String!
  ): ArtworkVersion

  # Creates, and authorizes, a JWT custom for Causality
  causality_jwt(
    role: Role

    # The id of the auction to participate in
    sale_id: String!
  ): String

  # A city-based entry point for local discovery
  city(
    # A point which will be used to locate the nearest local discovery city within a threshold
    near: Near

    # A slug for the city, conforming to Gravity's city slug naming conventions
    slug: String
  ): City
  collection(
    # The slug or ID of the Collection
    id: String!
  ): Collection

  # A user's credit card
  credit_card(
    # The ID of the Credit Card
    id: String!
  ): CreditCard

  # Returns a single Order
  ecommerceOrder(id: String!): Order

  # Returns list of orders
  ecommerceOrders(
    after: String
    before: String
    buyerId: String
    buyerType: String
    first: Int
    last: Int
    mode: OrderModeEnum
    sellerId: String
    sellerType: String
    sort: OrdersSortMethodType
    state: String
  ): OrderConnection

  # An External Partner not on the platform
  external_partner(
    # The ID of the Partner
    id: String!
  ): ExternalPartner

  # A Fair
  fair(
    # The slug or ID of the Fair
    id: String!
  ): Fair

  # A list of Fairs
  fairs(
    fair_organizer_id: String
    has_full_feature: Boolean
    has_homepage_section: Boolean
    has_listing: Boolean

    #
    #         Only return fairs matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    page: Int
    size: Int
    sort: FairSorts
    status: EventStatus
  ): [Fair]

  # Artworks Elastic Search results
  filter_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks

  # Partners Elastic Search results
  filter_partners(
    aggregations: [PartnersAggregation]!
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    # Indicates an active subscription
    eligible_for_listing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligible_for_primary_bucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligible_for_secondary_bucket: Boolean
    has_full_profile: Boolean
    ids: [String]

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): FilterPartners

  # Sale Artworks Elastic Search results
  filter_sale_artworks(
    aggregations: [SaleArtworkAggregation]
    artist_ids: [String]
    estimate_range: String
    gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    is_auction: Boolean
    live_sale: Boolean
    page: Int
    sale_id: ID
    size: Int
    sort: String
  ): FilterSaleArtworks
    @deprecated(
      reason: "Prefer to use `sale_artworks`. [Will be removed in v2]"
    )
  gene(
    # The slug or ID of the Gene
    id: String!
  ): Gene

  # A list of Gene Families
  gene_families(
    after: String
    before: String
    first: Int
    last: Int
  ): GeneFamilyConnection
  gene_family: GeneFamily

  # A list of Genes
  genes(
    size: Int

    #
    #         Only return genes matching specified slugs.
    #         Accepts list of slugs.
    #
    slugs: [String]
  ): [Gene]

  # Home screen content
  home_page: HomePage

  # A Search for Artists
  match_artist(
    # Exclude these MongoDB ids from results
    exclude_ids: [String]

    # Page to retrieve. Default: 1.
    page: Int

    # Maximum number of items to retrieve. Default: 5.
    size: Int

    # Your search term
    term: String!
  ): [Artist]

  # A Search for Genes
  match_gene(
    # Exclude these MongoDB ids from results
    exclude_ids: [String]

    # Page to retrieve. Default: 1.
    page: Int

    # Maximum number of items to retrieve. Default: 5.
    size: Int

    # Your search term
    term: String!
  ): [Gene]
  me: Me

  # Fetches an object given its Globally Unique ID
  node(
    # The ID of the object
    __id: ID!
  ): Node

  # Returns a single Order
  order(id: String!): Order

  # An OrderedSet
  ordered_set(
    # The ID of the OrderedSet
    id: String!
  ): OrderedSet

  # A collection of OrderedSets
  ordered_sets(
    # Key to the OrderedSet or group of OrderedSets
    key: String!
    page: Int = 1
    public: Boolean = true
    size: Int = 10
  ): [OrderedSet]

  # Returns list of orders
  orders(
    after: String
    before: String
    buyerId: String
    buyerType: String
    first: Int
    last: Int
    mode: OrderModeEnum
    sellerId: String
    sellerType: String
    sort: OrdersSortMethodType
    state: String
  ): OrderConnection

  # A Partner
  partner(
    # The slug or ID of the Partner
    id: String!
  ): Partner

  # A list of PartnerCategories
  partner_categories(
    category_type: CategoryType

    # Filter by whether category is internal
    internal: Boolean = false
    size: Int
  ): [PartnerCategory]

  # A PartnerCategory
  partner_category(
    # The slug or ID of the PartnerCategory
    id: String!
  ): PartnerCategory

  # A Partner Show
  partner_show(
    # The slug or ID of the PartnerShow
    id: String!
  ): PartnerShow

  # A list of PartnerShows
  partner_shows(
    at_a_fair: Boolean
    displayable: Boolean = true
    fair_id: String
    featured: Boolean

    #
    #         Only return shows matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    partner_id: String
    size: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): [PartnerShow]

  # A list of Partners
  partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    # Indicates an active subscription
    eligible_for_listing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligible_for_primary_bucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligible_for_secondary_bucket: Boolean
    has_full_profile: Boolean
    ids: [String]

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): [Partner]

  # Popular artists
  popular_artists(
    # Exclude these ids from results, may result in all artists being excluded.
    exclude_artist_ids: [String]

    # If true, will exclude followed artists for the user
    exclude_followed_artists: Boolean

    # Number of results to return
    size: Int
  ): PopularArtists

  # A Profile
  profile(
    # The slug or ID of the Profile
    id: String!
  ): Profile

  # A Sale
  sale(
    # The slug or ID of the Sale
    id: String!
  ): Sale

  # A Sale Artwork
  sale_artwork(
    # The slug or ID of the SaleArtwork
    id: String!
  ): SaleArtwork

  # Sale Artworks search results
  sale_artworks(
    after: String
    aggregations: [SaleArtworkAggregation]
    artist_ids: [String]
    before: String
    estimate_range: String
    first: Int
    gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    is_auction: Boolean
    last: Int
    live_sale: Boolean
    page: Int
    sale_id: ID
    size: Int
    sort: String
  ): SaleArtworksConnection

  # A list of Sales
  sales(
    #
    #         Only return sales matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]

    # Limit by auction.
    is_auction: Boolean = true

    # Limit by live status.
    live: Boolean = true

    # Limit by published status.
    published: Boolean = true
    size: Int
    sort: SaleSorts
  ): [Sale]

  # Global search
  search(
    after: String
    aggregations: [SearchAggregation]
    before: String

    # Entities to include in search. Default: [ARTIST, ARTWORK].
    entities: [SearchEntity]
    first: Int
    last: Int

    # Mode of search to execute. Default: SITE.
    mode: SearchMode

    # If present, will be used for pagination instead of cursors.
    page: Int

    # Search query to perform. Required.
    query: String!
  ): SearchableConnection

  # The schema for difference micro-service settings
  services: Services

  # A Show
  show(
    # The slug or ID of the Show
    id: String!
  ): Show

  # Content for a specific page or view
  staticContent(
    # The slug or id for the view
    id: String!
  ): StaticContent
  status: Status

  # List of curated genes with custom images
  suggested_genes: [Gene]

  # Fields related to internal systems.
  system: System
  tag(
    # The slug or ID of the Tag
    id: String!
  ): Tag

  # Trending artists
  trending_artists(
    # Fetch the top artists for each metric within double the base time period
    double_time_period: Boolean = false

    # Trending method
    method: String = "fetch"

    # Trending metric name
    name: TrendingMetrics!

    # Number of results to return
    size: Int = 40
  ): TrendingArtists
  user(
    # Email to search for user by
    email: String

    # ID of the user
    id: String
  ): User

  # A list of Users
  users(ids: [String]): [User]

  # A wildcard used to support complex root queries in Relay
  viewer: Viewer
}

input RejectOrderInput {
  clientMutationId: String

  # Order ID
  orderId: String!
}

type RejectOrderPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

enum RelatedArtistsKind {
  CONTEMPORARY
  MAIN
}

type RelatedArtworkGrid implements ArtworkContextGrid {
  artworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

input RequestCredentialsForAssetUploadInput {
  # The desired access control
  acl: String!
  clientMutationId: String

  # The gemini template you want to request
  name: String!
}

type RequestCredentialsForAssetUploadPayload {
  asset: Credentials
  clientMutationId: String
}

union RequestedFulfillment = Pickup | Ship

type ResizedImageUrl {
  factor: Float
  height: Int
  url: String
  width: Int
}

enum Role {
  OPERATOR
  PARTICIPANT
}

# The conditions for uploading assets to media.artsy.net
type S3PolicyConditionsType {
  # The assigned access control
  acl: String!

  # The bucket to upload to.
  bucket: String!

  # A key which is prefixed on your file
  gemini_key: String!

  # The returned status code, currently always 201
  success_action_status: String!
}

# An policy for uploading assets to media.artsy.net
type S3PolicyDocumentType {
  # The details for the upload
  conditions: S3PolicyConditionsType!

  # An expiration date string.
  expiration: String!
}

type Sale implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artworks(
    all: Boolean = false

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    page: Int = 1
    size: Int = 25
  ): [Artwork]

  # Returns a connection of artworks for a sale.
  artworksConnection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    last: Int
  ): ArtworkConnection
  associated_sale: Sale
  auction_state: String
    @deprecated(reason: "Prefer to use `status`. [Will be removed in v2]")

  # A bid increment policy that explains minimum bids in ranges.
  bid_increments: [BidIncrement]

  # Auction's buyer's premium policy.
  buyers_premium: [BuyersPremium]
  cached: Int
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  event_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A formatted description of when the auction starts or ends or if it has ended
  formattedStartDateTime: String
  href: String

  # A slug ID.
  id: ID!
  initials(length: Int = 3): String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_benefit: Boolean
    @deprecated(reason: "Prefer to use `isBenefit`. [Will be removed in v2]")
  is_closed: Boolean
  is_live_open: Boolean
  is_open: Boolean
  is_preliminary: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  isBenefit: Boolean
  isGalleryAuction: Boolean
  live_start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Returns a live auctions url if the sale is open and start time is after now
  live_url_if_open: String
  name: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # A registration for this sale or null
  registrationStatus: Bidder
  require_bidder_approval: Boolean
  sale_artwork(id: String!): SaleArtwork
  sale_artworks(
    all: Boolean = false
    page: Int = 1
    size: Int = 25
  ): [SaleArtwork]
  sale_artworks_connection(
    after: String
    before: String
    first: Int

    # List of sale artwork IDs to fetch
    ids: [ID]
    last: Int
  ): SaleArtworkConnection
  sale_type: String
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  status: String
  symbol: String
  timeZone: String
}

type SaleArtwork {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  artwork: Artwork
  bid_increments: [Float]
    @deprecated(
      reason: "Prefer to use `increments.cents`. [Will be removed in v2]"
    )
  bidder_positions_count: Int
    @deprecated(
      reason: "Prefer to use `counts.bidder_positions`. [Will be removed in v2]"
    )
  cached: Int
  calculatedCost(
    # Max bid price for the sale artwork
    bidAmountMinor: Int!
  ): CalculatedCost
  counts: SaleArtworkCounts

  # Currency abbreviation (e.g. "USD")
  currency: String
  current_bid: SaleArtworkCurrentBid
  estimate: String

  # Singular estimate field, if specified
  estimate_cents: Int
  high_estimate: SaleArtworkHighEstimate
  high_estimate_cents: Float
    @deprecated(
      reason: "Prefer to use `high_estimate`. [Will be removed in v2]"
    )
  highest_bid: SaleArtworkHighestBid

  # A slug ID.
  id: ID!
  increments(
    # Whether or not to start the increments at the user's latest bid
    useMyMaxBid: Boolean
  ): [BidIncrementsFormatted]
  is_bid_on: Boolean

  # Can bids be placed on the artwork?
  is_biddable: Boolean
  is_with_reserve: Boolean
  lot_label: String
  lot_number: String
    @deprecated(reason: "Prefer to use `lot_label`. [Will be removed in v2]")
  low_estimate: SaleArtworkLowEstimate
  low_estimate_cents: Float
    @deprecated(reason: "Prefer to use `low_estimate`. [Will be removed in v2]")
  minimum_next_bid: SaleArtworkMinimumNextBid
  minimum_next_bid_cents: Float
    @deprecated(
      reason: "Prefer to use `minimum_next_bid`. [Will be removed in v2]"
    )
  opening_bid: SaleArtworkOpeningBid
  opening_bid_cents: Float
    @deprecated(reason: "Prefer to use `opening_bid`. [Will be removed in v2]")
  position: Float
  reserve: SaleArtworkReserve
  reserve_message: String
  reserve_status: String
  sale: Sale
  sale_id: String

  # Currency symbol (e.g. "$")
  symbol: String
}

enum SaleArtworkAggregation {
  ARTIST
  FOLLOWED_ARTISTS
  MEDIUM
  TOTAL
}

# A connection to a list of items.
type SaleArtworkConnection {
  # A list of edges.
  edges: [SaleArtworkEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type SaleArtworkCounts {
  bidder_positions(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

type SaleArtworkCurrentBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

# An edge in a connection.
type SaleArtworkEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: SaleArtwork
}

type SaleArtworkHighestBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  amount_cents: Float
    @deprecated(reason: "Prefer to use `cents`. [Will be removed in v2]")
  cents: Int
  created_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  display: String

  # An optional type-specific ID.
  id: ID
  is_cancelled: Boolean
}

type SaleArtworkHighEstimate {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkLowEstimate {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkMinimumNextBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkOpeningBid {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

type SaleArtworkReserve {
  # A formatted price with various currency formatting options.
  amount(
    decimal: String = "."

    # Allows control of symbol position (%v = value, %s = symbol)
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  # An amount of money expressed in cents.
  cents: Float

  # A pre-formatted price.
  display: String
}

# The results for one of the requested aggregations
type SaleArtworksAggregationResults {
  counts: [AggregationCount]
  slice: SaleArtworkAggregation
}

# A connection to a list of items.
type SaleArtworksConnection {
  # Returns aggregation counts for the given filter query.
  aggregations: [SaleArtworksAggregationResults]
  counts: FilterSaleArtworksCounts

  # A list of edges.
  edges: [SaleArtworksEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SaleArtworksEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: SaleArtwork
}

type SaleRegistration {
  bidder: Bidder
  is_registered: Boolean
  sale: Sale
}

enum SaleSorts {
  _ID_ASC
  _ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC
  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC
  END_AT_ASC
  END_AT_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
  TIMELY_AT_NAME_ASC
  TIMELY_AT_NAME_DESC
}

input SaveArtworkInput {
  artwork_id: String
  clientMutationId: String
  remove: Boolean
}

type SaveArtworkPayload {
  artwork: Artwork
  clientMutationId: String
}

# An object that may be searched for
interface Searchable {
  displayLabel: String
  href: String
  imageUrl: String
}

# A connection to a list of items.
type SearchableConnection {
  # Returns aggregation counts for the given filter query.
  aggregations: [SearchAggregationResults]

  # A list of edges.
  edges: [SearchableEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type SearchableEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Searchable
}

type SearchableItem implements Node & Searchable {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  description: String
  displayLabel: String
  displayType: String
  href: String

  # A slug ID.
  id: ID!
  imageUrl: String
  searchableType: String
    @deprecated(reason: "Prefer to use `displayType`. [Will be removed in v2]")
}

enum SearchAggregation {
  TYPE
}

# The results for a requested aggregations
type SearchAggregationResults {
  counts: [AggregationCount]
  slice: SearchAggregation
}

enum SearchEntity {
  ARTICLE
  ARTIST
  ARTWORK
  CITY
  COLLECTION
  FAIR
  FEATURE
  GALLERY
  GENE
  INSTITUTION
  PROFILE
  SALE
  SHOW
  TAG
}

enum SearchMode {
  AUTOSUGGEST
  SITE
}

# A piece that can be sold
interface Sellable {
  dimensions: dimensions
  edition_of: String

  # Whether a piece can be purchased through e-commerce
  is_acquireable: Boolean
  is_for_sale: Boolean

  # Whether a user can make an offer on the work
  is_offerable: Boolean
  is_sold: Boolean
  price: String
    @deprecated(reason: "Prefer to use `listPrice`. [Will be removed in v2]")
  sale_message: String
}

input sellerAcceptOfferInput {
  clientMutationId: String

  # Offer ID
  offerId: String!
}

type sellerAcceptOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input sellerCounterOfferInput {
  clientMutationId: String

  # Offer note
  note: String

  # The ID of the offer to counter
  offerId: String!

  # Offer price
  offerPrice: MoneyInput
}

type sellerCounterOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input sellerRejectOfferInput {
  clientMutationId: String

  # Offer ID
  offerId: String!

  # Reason for rejecting offer
  rejectReason: CancelReasonType
}

type sellerRejectOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input SendConversationMessageMutationInput {
  body_text: String!
  clientMutationId: String

  # The email address of the message sender
  from: String!

  # The id of the conversation to be updated
  id: String!

  # The message being replied to
  reply_to_message_id: String!
}

type SendConversationMessageMutationPayload {
  clientMutationId: String
  conversation: Conversation
  messageEdge: MessageEdge
}

type SendFeedbackMutationFailure {
  mutationError: GravityMutationError
}

input SendFeedbackMutationInput {
  clientMutationId: String

  # Email to associate with message (only used if logged out).
  email: String

  # Message to be sent.
  message: String!

  # Name to associate with message (only used if logged out).
  name: String

  # URL of page where feedback originated.
  url: String
}

type SendFeedbackMutationPayload {
  clientMutationId: String
  feedbackOrError: SendFeedbackMutationType
}

type SendFeedbackMutationSuccess {
  feedback: Feedback
}

union SendFeedbackMutationType =
    SendFeedbackMutationFailure
  | SendFeedbackMutationSuccess

type Services {
  convection: Convection!
  metaphysics: Metaphysics!
}

input SetOrderPaymentInput {
  clientMutationId: String

  # Gravity Credit Card Id
  creditCardId: String!

  # Order ID
  orderId: String!
}

type SetOrderPaymentPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input SetOrderShippingInput {
  clientMutationId: String

  # Fulfillment Type of this Order
  fulfillmentType: OrderFulfillmentType

  # Id of the Order
  orderId: ID

  # Shipping information
  shipping: ShippingInputField
}

type SetOrderShippingPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

type Ship {
  # Shipping address line 1
  addressLine1: String

  # Shipping address line 2
  addressLine2: String

  # Shipping city
  city: String

  # Shipping country
  country: String!

  # Name for the shipping information
  name: String

  # Shipping phone number
  phoneNumber: String

  # Shipping postal code
  postalCode: String

  # Shipping region
  region: String
}

input ShippingInputField {
  # Shipping address line 1
  addressLine1: String

  # Shipping address line 2
  addressLine2: String

  # Shipping city
  city: String

  # Shipping country
  country: String

  # Name for the shipping information
  name: String

  # Shipping phone number
  phoneNumber: String

  # Shipping postal code
  postalCode: String

  # Shipping region
  region: String
}

type Show implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!

  # The Artists presenting in this show
  artists: [Artist]

  # Artists in the show grouped by last name
  artists_grouped_by_name: [ArtistGroup]

  # Artists inside the show who do not have artworks present
  artists_without_artworks: [Artist]

  # The artworks featured in this show
  artworks(
    all: Boolean

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    for_sale: Boolean = false
    page: Int = 1
    published: Boolean = true

    # Number of artworks to return
    size: Int = 25
  ): [Artwork]
    @deprecated(
      reason: "Prefer to use `artworks_connection`. [Will be removed in v2]"
    )

  # The artworks featured in the show
  artworks_connection(
    after: String
    before: String

    # List of artwork IDs to exclude from the response (irrespective of size)
    exclude: [String]
    first: Int
    for_sale: Boolean = false
    last: Int
    published: Boolean = true
  ): ArtworkConnection
  cached: Int

  # The general city, derived from a fair location, a show location or a potential city
  city: String

  # An object that represents some of the numbers you might want to highlight
  counts: ShowCounts

  # The image you should use to represent this show
  cover_image: Image

  # A description of the show
  description: String
  displayable: Boolean
    @deprecated(
      reason: "Prefer to use `is_displayable`. [Will be removed in v2]"
    )
  end_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Events from the partner that runs this show
  events: [PartnerShowEventType]

  # A formatted description of the start to end dates
  exhibition_period: String

  # If the show is in a Fair, then that fair
  fair: Fair

  # Artworks Elastic Search results
  filteredArtworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks

  # A Connection of followed artists by current user for this show
  followedArtists(
    after: String
    before: String
    first: Int
    last: Int
  ): ShowFollowArtistConnection

  # Flag showing if show has any location.
  has_location: Boolean

  # A path to the show on Artsy
  href: String

  # A slug ID.
  id: ID!

  # Images that represent the show, you may be interested in meta_image or cover_image for a definitive thumbnail
  images(
    # Pass true/false to include cover or not
    default: Boolean
    page: Int

    # Number of images to return
    size: Int
  ): [Image]

  # Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  is_active: Boolean

  # Is this something we can display to the front-end?
  is_displayable: Boolean

  # Does the show exist as a fair booth?
  is_fair_booth: Boolean

  # Is the user following this show
  is_followed: Boolean
  is_local_discovery: Boolean
    @deprecated(reason: "Prefer to use `isStubShow`. [Will be removed in v2]")

  # Is it a show provided for historical reference?
  is_reference: Boolean

  # Is it an outsourced local discovery stub show?
  isStubShow: Boolean

  # Whether the show is in a fair, group or solo
  kind: String

  # Where the show is located (Could also be a fair location)
  location: Location

  # An image representing the show, or a sharable image from an artwork in the show
  meta_image: Image

  # The exhibition title
  name: String

  # Shows that are near (~75km) from this show
  nearbyShows(
    after: String
    before: String

    # Whether to include local discovery stubs as well as displayable shows
    discoverable: Boolean
    first: Int
    last: Int
    sort: PartnerShowSorts

    # By default show only current shows
    status: EventStatus
  ): ShowConnection

  # Alternate Markdown-supporting free text representation of the opening reception event’s date/time
  openingReceptionText: String

  # The partner that represents this show, could be a non-Artsy partner
  partner: PartnerTypes

  # The press release for this show
  press_release(format: Format): String

  # Link to the press release for this show
  pressReleaseUrl: String

  # When this show starts
  start_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String

  # Is this show running, upcoming or closed?
  status: String

  # A formatted update on upcoming status changes
  status_update(
    # Before this many days no update will be generated
    max_days: Int
  ): String

  # Is it a fair booth or a show?
  type: String
}

type ShowArtworkGrid implements ArtworkContextGrid {
  artworks(
    after: String
    before: String
    first: Int
    last: Int
  ): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

# A connection to a list of items.
type ShowConnection {
  # A list of edges.
  edges: [ShowEdge]
  pageCursors: PageCursors

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type ShowCounts {
  artists: Int
  artworks(
    # The slug or ID of an artist in the show.
    artist_id: String
  ): Int
  eligible_artworks(
    # Returns a `String` when format is specified. e.g.`'0,0.0000''`
    format: String
    label: String
  ): FormattedNumber
}

# An edge in a connection.
type ShowEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Show
}

type ShowFollowArtist {
  artist: Artist
}

# A connection to a list of items.
type ShowFollowArtistConnection {
  # A list of edges.
  edges: [ShowFollowArtistEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ShowFollowArtistEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: ShowFollowArtist
}

enum ShowSort {
  END_AT_ASC
  END_AT_DESC
  FEATURED_ASC
  FEATURED_DESC
  NAME_ASC
  NAME_DESC
  SORTABLE_NAME_ASC
  SORTABLE_NAME_DESC
  START_AT_ASC
  START_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum sort {
  ASC
  DESC
}

type StaticContent {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  content: String

  # A slug ID.
  id: ID!
  name: String
}

type Status {
  gravity: StatusGravity

  # Metaphysics ping
  ping: Boolean
}

# Gravity ping
type StatusGravity {
  ping: Boolean
}

input SubmitOrderInput {
  clientMutationId: String

  # Order ID
  orderId: String!
}

type SubmitOrderPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input SubmitOrderWithOfferInput {
  clientMutationId: String

  # Offer ID
  offerId: String!
}

type SubmitOrderWithOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

input submitPendingOfferInput {
  clientMutationId: String

  # The ID of the pending offer you want to submit
  offerId: String!
}

type submitPendingOfferPayload {
  clientMutationId: String
  orderOrError: OrderOrFailureUnionType
}

type System {
  # Gravity system time, necessary for synchronizing device clocks.
  time: SystemTime
}

type SystemTime {
  day: Int
  dst: Boolean
  hour: Int
  iso8601: String
  min: Int
  month: Int
  sec: Int
  unix: Int
  utc_offset: Int
  wday: Int
  year: Int
  zone: String
}

type Tag implements Node {
  # A globally unique ID.
  __id: ID!

  # A type-specific ID likely used as a database ID.
  _id: ID!
  cached: Int
  count: Int
  description: String

  # Artworks Elastic Search results
  filtered_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks
  href: String

  # A slug ID.
  id: ID!
  image: Image
  name: String
}

type TrendingArtists {
  artists: [Artist]
}

enum TrendingMetrics {
  # Cumulative price achieved at auction. Base time period: 12 weeks
  ARTIST_AUCTION_LOT

  # Number of artworks in fairs. Base time period: 12 weeks.
  ARTIST_FAIR

  # Base time period: 2 weeks
  ARTIST_FOLLOW

  # Base time period: 1 month
  ARTIST_INQUIRY

  # Base time period: 1 month
  ARTIST_SAVE

  # Base time period: 2 weeks
  ARTIST_SEARCH
}

union UnderlyingCurrentEvent = Sale | Show

input UpdateCollectorProfileInput {
  clientMutationId: String
  intents: [Intents]
  loyalty_applicant: Boolean
  professional_buyer: Boolean
  self_reported_purchases: String
}

type UpdateCollectorProfilePayload {
  # A globally unique ID.
  __id: ID!
  clientMutationId: String
  collector_level: Int
  confirmed_buyer_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  email: String

  # A type-specific ID likely used as a database ID.
  id: ID!
  intents: [String]
  loyalty_applicant_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  name: String
  professional_buyer_applied_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  professional_buyer_at(
    # This arg is deprecated, use timezone instead
    convert_to_utc: Boolean
    format: String

    # A tz database time zone, otherwise falls back to `X-TIMEZONE` header
    timezone: String
  ): String
  self_reported_purchases: String
}

input UpdateConversationMutationInput {
  clientMutationId: String

  # The id of the conversation to be updated.
  conversationId: String!

  # The message id to mark as read.
  fromLastViewedMessageId: String!
}

type UpdateConversationMutationPayload {
  clientMutationId: String
  conversation: Conversation
}

input UpdateMyProfileInput {
  clientMutationId: String

  # The collector level for the user
  collector_level: Int

  # The given email of the user.
  email: String

  # The given location of the user as structured data
  location: EditableLocation

  # The given name of the user.
  name: String

  # The given phone number of the user.
  phone: String

  # The maximum price collector has selected
  price_range_max: Float

  # The minimum price collector has selected
  price_range_min: Int
}

type UpdateMyProfilePayload {
  clientMutationId: String
  user: User
}

type User {
  # A globally unique ID.
  __id: ID!
  cached: Int

  # The given email of the user.
  email: String!

  # A type-specific ID likely used as a database ID.
  id: ID!

  # The given location of the user as structured data
  location: Location

  # The given name of the user.
  name: String!

  # The paddle number of the user
  paddle_number: String

  # The given phone number of the user.
  phone: String

  # Pin for bidding at an auction
  pin: String

  # The price range the collector has selected
  price_range: String

  # Check whether a user exists by email address before creating an account.
  userAlreadyExists: Boolean
}

# A wildcard used to support complex root queries in Relay
type Viewer {
  # An Article
  article(
    # The ID of the Article
    id: String!
  ): Article

  # A list of Articles
  articles(
    auction_id: String
    published: Boolean = true
    show_id: String
    sort: ArticleSorts
  ): [Article]

  # An Artist
  artist(
    # The slug or ID of the Artist
    id: String!
  ): Artist

  # A list of Artists
  artists(
    #
    #         Only return artists matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    page: Int = 1
    size: Int

    #
    #         Only return artists matching specified slugs.
    #         Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
    #
    slugs: [String]
    sort: ArtistSorts
  ): [Artist]

  # An Artwork
  artwork(
    # The slug or ID of the Artwork
    id: String!
  ): Artwork

  # List of all artwork attribution classes
  artworkAttributionClasses: [AttributionClass]

  # A list of Artworks
  artworks(ids: [String]): [Artwork]

  # A subset of the metadata for an artwork at a specific time
  artworkVersion(
    # The ID of the ArtworkVersion
    id: String!
  ): ArtworkVersion

  # Creates, and authorizes, a JWT custom for Causality
  causality_jwt(
    role: Role

    # The id of the auction to participate in
    sale_id: String!
  ): String

  # A city-based entry point for local discovery
  city(
    # A point which will be used to locate the nearest local discovery city within a threshold
    near: Near

    # A slug for the city, conforming to Gravity's city slug naming conventions
    slug: String
  ): City
  collection(
    # The slug or ID of the Collection
    id: String!
  ): Collection

  # A user's credit card
  credit_card(
    # The ID of the Credit Card
    id: String!
  ): CreditCard

  # An External Partner not on the platform
  external_partner(
    # The ID of the Partner
    id: String!
  ): ExternalPartner

  # A Fair
  fair(
    # The slug or ID of the Fair
    id: String!
  ): Fair

  # A list of Fairs
  fairs(
    fair_organizer_id: String
    has_full_feature: Boolean
    has_homepage_section: Boolean
    has_listing: Boolean

    #
    #         Only return fairs matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    page: Int
    size: Int
    sort: FairSorts
    status: EventStatus
  ): [Fair]

  # Artworks Elastic Search results
  filter_artworks(
    acquireable: Boolean
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    at_auction: Boolean
    attribution_class: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    inquireable_only: Boolean
    keyword: String

    # When true, will only return exact keyword match
    keyword_match_exact: Boolean
    major_periods: [String]

    # When true, will only return `marketable` works (not nude or provocative).
    marketable: Boolean

    # A string from the list of allocations, or * to denote all mediums
    medium: String
    offerable: Boolean
    page: Int
    partner_cities: [String]
    partner_id: ID
    period: String
    periods: [String]
    price_range: String
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    width: String
  ): FilterArtworks

  # Partners Elastic Search results
  filter_partners(
    aggregations: [PartnersAggregation]!
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    # Indicates an active subscription
    eligible_for_listing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligible_for_primary_bucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligible_for_secondary_bucket: Boolean
    has_full_profile: Boolean
    ids: [String]

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): FilterPartners

  # Sale Artworks Elastic Search results
  filter_sale_artworks(
    aggregations: [SaleArtworkAggregation]
    artist_ids: [String]
    estimate_range: String
    gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    is_auction: Boolean
    live_sale: Boolean
    page: Int
    sale_id: ID
    size: Int
    sort: String
  ): FilterSaleArtworks
    @deprecated(
      reason: "Prefer to use `sale_artworks`. [Will be removed in v2]"
    )
  gene(
    # The slug or ID of the Gene
    id: String!
  ): Gene

  # A list of Gene Families
  gene_families(
    after: String
    before: String
    first: Int
    last: Int
  ): GeneFamilyConnection
  gene_family: GeneFamily

  # A list of Genes
  genes(
    size: Int

    #
    #         Only return genes matching specified slugs.
    #         Accepts list of slugs.
    #
    slugs: [String]
  ): [Gene]

  # Home screen content
  home_page: HomePage

  # A Search for Artists
  match_artist(
    # Exclude these MongoDB ids from results
    exclude_ids: [String]

    # Page to retrieve. Default: 1.
    page: Int

    # Maximum number of items to retrieve. Default: 5.
    size: Int

    # Your search term
    term: String!
  ): [Artist]

  # A Search for Genes
  match_gene(
    # Exclude these MongoDB ids from results
    exclude_ids: [String]

    # Page to retrieve. Default: 1.
    page: Int

    # Maximum number of items to retrieve. Default: 5.
    size: Int

    # Your search term
    term: String!
  ): [Gene]
  me: Me

  # Fetches an object given its Globally Unique ID
  node(
    # The ID of the object
    __id: ID!
  ): Node

  # An OrderedSet
  ordered_set(
    # The ID of the OrderedSet
    id: String!
  ): OrderedSet

  # A collection of OrderedSets
  ordered_sets(
    # Key to the OrderedSet or group of OrderedSets
    key: String!
    page: Int = 1
    public: Boolean = true
    size: Int = 10
  ): [OrderedSet]

  # A Partner
  partner(
    # The slug or ID of the Partner
    id: String!
  ): Partner

  # A list of PartnerCategories
  partner_categories(
    category_type: CategoryType

    # Filter by whether category is internal
    internal: Boolean = false
    size: Int
  ): [PartnerCategory]

  # A PartnerCategory
  partner_category(
    # The slug or ID of the PartnerCategory
    id: String!
  ): PartnerCategory

  # A Partner Show
  partner_show(
    # The slug or ID of the PartnerShow
    id: String!
  ): PartnerShow

  # A list of PartnerShows
  partner_shows(
    at_a_fair: Boolean
    displayable: Boolean = true
    fair_id: String
    featured: Boolean

    #
    #         Only return shows matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]
    near: Near
    partner_id: String
    size: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): [PartnerShow]

  # A list of Partners
  partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    # Indicates an active subscription
    eligible_for_listing: Boolean

    # Indicates tier 1/2 for gallery, 1 for institution
    eligible_for_primary_bucket: Boolean

    # Indicates tier 3/4 for gallery, 2 for institution
    eligible_for_secondary_bucket: Boolean
    has_full_profile: Boolean
    ids: [String]

    # Coordinates to find partners closest to
    near: String
    page: Int

    #
    #         Only return partners of the specified partner categories.
    #         Accepts list of slugs.
    #
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    # term used for searching Partners
    term: String
    type: [PartnerClassification]
  ): [Partner]

  # Popular artists
  popular_artists(
    # Exclude these ids from results, may result in all artists being excluded.
    exclude_artist_ids: [String]

    # If true, will exclude followed artists for the user
    exclude_followed_artists: Boolean

    # Number of results to return
    size: Int
  ): PopularArtists

  # A Profile
  profile(
    # The slug or ID of the Profile
    id: String!
  ): Profile

  # A Sale
  sale(
    # The slug or ID of the Sale
    id: String!
  ): Sale

  # A Sale Artwork
  sale_artwork(
    # The slug or ID of the SaleArtwork
    id: String!
  ): SaleArtwork

  # Sale Artworks search results
  sale_artworks(
    after: String
    aggregations: [SaleArtworkAggregation]
    artist_ids: [String]
    before: String
    estimate_range: String
    first: Int
    gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    is_auction: Boolean
    last: Int
    live_sale: Boolean
    page: Int
    sale_id: ID
    size: Int
    sort: String
  ): SaleArtworksConnection

  # A list of Sales
  sales(
    #
    #         Only return sales matching specified ids.
    #         Accepts list of ids.
    #
    ids: [String]

    # Limit by auction.
    is_auction: Boolean = true

    # Limit by live status.
    live: Boolean = true

    # Limit by published status.
    published: Boolean = true
    size: Int
    sort: SaleSorts
  ): [Sale]

  # Global search
  search(
    after: String
    aggregations: [SearchAggregation]
    before: String

    # Entities to include in search. Default: [ARTIST, ARTWORK].
    entities: [SearchEntity]
    first: Int
    last: Int

    # Mode of search to execute. Default: SITE.
    mode: SearchMode

    # If present, will be used for pagination instead of cursors.
    page: Int

    # Search query to perform. Required.
    query: String!
  ): SearchableConnection

  # The schema for difference micro-service settings
  services: Services

  # A Show
  show(
    # The slug or ID of the Show
    id: String!
  ): Show

  # Content for a specific page or view
  staticContent(
    # The slug or id for the view
    id: String!
  ): StaticContent
  status: Status

  # List of curated genes with custom images
  suggested_genes: [Gene]

  # Fields related to internal systems.
  system: System
  tag(
    # The slug or ID of the Tag
    id: String!
  ): Tag

  # Trending artists
  trending_artists(
    # Fetch the top artists for each metric within double the base time period
    double_time_period: Boolean = false

    # Trending method
    method: String = "fetch"

    # Trending metric name
    name: TrendingMetrics!

    # Number of results to return
    size: Int = 40
  ): TrendingArtists
  user(
    # Email to search for user by
    email: String

    # ID of the user
    id: String
  ): User

  # A list of Users
  users(ids: [String]): [User]
}
